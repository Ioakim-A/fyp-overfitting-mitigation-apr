diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/533f6409-e771-4cc2-859c-b474effc7651_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/cc90d840-2156-4266-9767-c0c8da5ecd68_fixed.java
index 50cbfb2..c0d8fbf 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/533f6409-e771-4cc2-859c-b474effc7651_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/cc90d840-2156-4266-9767-c0c8da5ecd68_fixed.java
@@ -1,39 +1,25 @@
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
-
-        while (true) {
-
+    // replace while(true) with for loop to avoid infinite loop
+    for (int i = 0; i < MAX_ITERATIONS; i++) {
         incrementIterationsCounter();
-
-            // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
-
-            // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
-
-                // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
+            final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, khi, comparator);
+            if (comparator.compare(expanded, best) <= 0) {
                 simplex = reflectedSimplex;
             }
-
             return;
-
         }
-
-            // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
             return;
         }
-
+        // update the simplex with the contracted one
+        simplex = evaluateNewSimplex(original, rho, comparator);
     }
-
+    throw new OptimizationException(new MaxIterationsExceededException(MAX_ITERATIONS));
 }
\ No newline at end of file
