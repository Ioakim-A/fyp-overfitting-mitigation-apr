diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/fa373a8e-d8ba-4039-98d1-71ad56572c81_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a904bbd5-e114-44f1-a622-c14b1c1f2b83_fixed.java
index c28bd2d..cd39bf5 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/fa373a8e-d8ba-4039-98d1-71ad56572c81_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a904bbd5-e114-44f1-a622-c14b1c1f2b83_fixed.java
@@ -1,72 +1,23 @@
-    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
-    		DeserializationContext ctxt)
-        throws IOException, JsonProcessingException
-    {
-        final PropertyBasedCreator creator = _propertyBasedCreator;
-        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
-
-        TokenBuffer tokens = new TokenBuffer(p, ctxt);
-        tokens.writeStartObject();
-
-        JsonToken t = p.getCurrentToken();
-        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
-            String propName = p.getCurrentName();
-            p.nextToken(); // to point to value
-            // creator property?
-            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
 if (creatorProp != null) {
     if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
-                    t = p.nextToken();
+        JsonToken t2 = p.nextToken();
         Object bean;
         try {
             bean = creator.build(ctxt, buffer);
         } catch (Exception e) {
             wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
             continue;
         }
-                    while (t == JsonToken.FIELD_NAME) {
+        while (t2 == JsonToken.FIELD_NAME) {
             p.nextToken();
-                        tokens.copyCurrentStructure(p);
-                        t = p.nextToken();
-                    }
-                    tokens.writeEndObject();
+            TokenBuffer tb = new TokenBuffer(p, ctxt);
+            tb.copyCurrentStructure(p);
+            t2 = p.nextToken();
             if (bean.getClass() != _beanType.getRawClass()) {
-                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
-                        return null;
+                return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tb);
             }
-                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
         }
-                continue;
-            }
-            // Object Id property?
-            if (buffer.readIdProperty(propName)) {
-                continue;
-            }
-            // regular property? needs buffering
-            SettableBeanProperty prop = _beanProperties.find(propName);
-            if (prop != null) {
-                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
-                continue;
+        return bean;
     }
-            if (_ignorableProps != null && _ignorableProps.contains(propName)) {
-                handleIgnoredProperty(p, ctxt, handledType(), propName);
     continue;
 }
\ No newline at end of file
-            tokens.writeFieldName(propName);
-            tokens.copyCurrentStructure(p);
-            // "any property"?
-            if (_anySetter != null) {
-                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
-            }
-        }
-
-        // We hit END_OBJECT, so:
-        Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
-        try {
-            bean = creator.build(ctxt, buffer);
-        } catch (Exception e) {
-            return wrapInstantiationProblem(e, ctxt);
-        }
-        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
-    }
