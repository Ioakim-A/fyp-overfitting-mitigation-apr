diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/22076b0c-20cf-4a1f-9edc-26b87aa15e34_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a4357d76-4f40-4e3d-b54a-8a40f5f60d6b_fixed.java
index ca2992e..a76ed9a 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/22076b0c-20cf-4a1f-9edc-26b87aa15e34_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a4357d76-4f40-4e3d-b54a-8a40f5f60d6b_fixed.java
@@ -1,25 +1,25 @@
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+      // fixed code
+      Node parent = n.getParent();
+      if (parent.isAssign() && isVariableReadBeforeKill(parent.getLastChild(), variable) == VariableLiveness.READ) {
+        return VariableLiveness.READ;
+      }
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
-
-    // Expressions are evaluated left-right, depth first.
   for (Node child = n.getFirstChild();
       child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+    if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { 
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state != VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
