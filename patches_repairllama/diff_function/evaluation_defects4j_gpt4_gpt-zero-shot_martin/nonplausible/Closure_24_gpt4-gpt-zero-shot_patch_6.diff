diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e5614949-6111-45c9-a6f0-5d9536b6b4f9_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/72d46098-04d1-406e-baaa-475fd980e697_fixed.java
index 602226b..2f7db20 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e5614949-6111-45c9-a6f0-5d9536b6b4f9_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/72d46098-04d1-406e-baaa-475fd980e697_fixed.java
@@ -1,26 +1,20 @@
     private void findAliases(NodeTraversal t) {
         Scope scope = t.getScope();
         for (Var v : scope.getVarIterable()) {
             Node n = v.getNode();
             int type = n.getType();
             Node parent = n.getParent();
-        if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+
+            if (n.isName()) {
+                if (n.hasChildren() && n.getFirstChild().isString()) {
                     String name = n.getString();
                     Var aliasVar = scope.getVar(name);
                     aliases.put(name, aliasVar);
-
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+                    String qualifiedName = n.getFirstChild().getQualifiedName();
                     transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
                 } else {
-          // TODO(robbyw): Support using locals for private variables.
                     report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
                 }
             }
         }
     }
\ No newline at end of file
