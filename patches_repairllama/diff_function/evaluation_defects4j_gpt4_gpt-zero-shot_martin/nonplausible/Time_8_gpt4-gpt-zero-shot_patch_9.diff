diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/eaced7ce-4c0a-4912-b97e-ff5d7627151c_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d3b2ce91-5557-4d0a-a368-43740cd7cdfc_fixed.java
index ab7017e..b98fd2c 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/eaced7ce-4c0a-4912-b97e-ff5d7627151c_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d3b2ce91-5557-4d0a-a368-43740cd7cdfc_fixed.java
@@ -1,24 +1,24 @@
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {
     if (hoursOffset == 0 && minutesOffset == 0) {
         return DateTimeZone.UTC;
     }
     if (hoursOffset < -23 || hoursOffset > 23) {
         throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
     }
-        if (minutesOffset < 0 || minutesOffset > 59) {
+    if (minutesOffset < -59 || minutesOffset > 59) {
         throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);
     }
     int offset = 0;
     try {
         int hoursInMinutes = hoursOffset * 60;
         if (hoursInMinutes < 0) {
             minutesOffset = hoursInMinutes - minutesOffset;
         } else {
             minutesOffset = hoursInMinutes + minutesOffset;
         }
         offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
     } catch (ArithmeticException ex) {
         throw new IllegalArgumentException("Offset is too large");
     }
     return forOffsetMillis(offset);
 }
\ No newline at end of file
