diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2c4a3463-5000-495e-b0b8-42526f5f8ffd_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9c7c74e1-892a-41c6-af09-5d1a98e83fc6_fixed.java
index 63b85d1..02e1032 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2c4a3463-5000-495e-b0b8-42526f5f8ffd_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9c7c74e1-892a-41c6-af09-5d1a98e83fc6_fixed.java
@@ -1,32 +1,26 @@
 private void visitParameterList(NodeTraversal t, Node call,
     FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
-    arguments.next(); // skip the function name
-
+  arguments.next();
   Iterator<Node> parameters = functionType.getParameters().iterator();
   int ordinal = 0;
   Node parameter = null;
   Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
+  while (arguments.hasNext() && parameters.hasNext()) {
       parameter = parameters.next();
       argument = arguments.next();
       ordinal++;
-
       validator.expectArgumentMatchesParameter(t, argument,
           getJSType(argument), getJSType(parameter), call, ordinal);
   }
-
   int numArgs = call.getChildCount() - 1;
   int minArgs = functionType.getMinArguments();
   int maxArgs = functionType.getMaxArguments();
   if (minArgs > numArgs || maxArgs < numArgs) {
     report(t, call, WRONG_ARGUMENT_COUNT,
             validator.getReadableJSTypeName(call.getFirstChild(), false),
             String.valueOf(numArgs), String.valueOf(minArgs),
             maxArgs != Integer.MAX_VALUE ?
             " and no more than " + maxArgs + " argument(s)" : "");
   }
 }
\ No newline at end of file
