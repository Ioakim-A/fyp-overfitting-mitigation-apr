diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b6a60af2-6dff-41b7-bc17-94caa67e7df5_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/83cb38bb-96a2-411e-8d0d-8a56feedef86_fixed.java
index 5aa01c2..71f4829 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b6a60af2-6dff-41b7-bc17-94caa67e7df5_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/83cb38bb-96a2-411e-8d0d-8a56feedef86_fixed.java
@@ -1,29 +1,28 @@
     public long readBits(final int count) throws IOException {
         if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
             throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
         }
+
         while (bitsCachedSize < count) {
             final long nextByte = in.read();
             if (nextByte < 0) {
-                return nextByte;
+                throw new EOFException("End of file reached, not enough bits left to read");
             }
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
                 bitsCached |= (nextByte << bitsCachedSize);
             } else {
                 bitsCached <<= 8;
                 bitsCached |= nextByte;
             }
             bitsCachedSize += 8;
         }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
-        
         final long bitsOut;
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsOut = (bitsCached & MASKS[count]);
+            bitsOut = bitsCached & MASKS[count];
             bitsCached >>>= count;
         } else {
             bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
         }
         bitsCachedSize -= count;
         return bitsOut;
     }
\ No newline at end of file
