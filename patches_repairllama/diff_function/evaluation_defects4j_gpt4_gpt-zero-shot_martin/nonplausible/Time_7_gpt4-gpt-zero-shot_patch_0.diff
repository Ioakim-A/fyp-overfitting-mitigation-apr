diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1ae1b189-cb36-4754-88b1-5f5636466508_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0e7012b4-bff7-4780-a3c5-85d86e152ffe_fixed.java
index 284dc9c..779b24f 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1ae1b189-cb36-4754-88b1-5f5636466508_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0e7012b4-bff7-4780-a3c5-85d86e152ffe_fixed.java
@@ -1,29 +1,27 @@
 public int parseInto(ReadWritableInstant instant, String text, int position) {
     DateTimeParser parser = requireParser();
     if (instant == null) {
         throw new IllegalArgumentException("Instant must not be null");
     }
-        
     long instantMillis = instant.getMillis();
     Chronology chrono = instant.getChronology();
     long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
     chrono = selectChronology(chrono);
     int defaultYear = chrono.year().get(instantLocal);
-        
     DateTimeParserBucket bucket = new DateTimeParserBucket(
         instantLocal, chrono, iLocale, iPivotYear, defaultYear);
     int newPos = parser.parseInto(bucket, text, position);
     instant.setMillis(bucket.computeMillis(false, text));
     if (iOffsetParsed && bucket.getOffsetInteger() != null) {
         int parsedOffset = bucket.getOffsetInteger();
         DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
         chrono = chrono.withZone(parsedZone);
     } else if (bucket.getZone() != null) {
         chrono = chrono.withZone(bucket.getZone());
     }
     instant.setChronology(chrono);
     if (iZone != null) {
         instant.setZone(iZone);
     }
     return newPos;
 }
\ No newline at end of file
