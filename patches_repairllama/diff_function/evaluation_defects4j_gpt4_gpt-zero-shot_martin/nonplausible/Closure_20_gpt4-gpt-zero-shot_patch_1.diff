diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e4182713-3984-4d86-a31b-cfcfccde8daa_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/90d4ffd7-4eed-4861-b759-aac791490545_fixed.java
index d4e6d48..ab33345 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e4182713-3984-4d86-a31b-cfcfccde8daa_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/90d4ffd7-4eed-4861-b759-aac791490545_fixed.java
@@ -1,23 +1,18 @@
 private Node tryFoldSimpleFunctionCall(Node n) {
   Preconditions.checkState(n.isCall());
   Node callTarget = n.getFirstChild();
   if (callTarget != null && callTarget.isName() &&
         callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
     Node value = callTarget.getNext();
+    // corrected code
     if (value != null) {
       Node addition = IR.add(
           IR.string("").srcref(callTarget),
           value.detachFromParent());
       n.getParent().replaceChild(n, addition);
       reportCodeChange();
       return addition;
     }
   }
   return n;
 }
\ No newline at end of file
