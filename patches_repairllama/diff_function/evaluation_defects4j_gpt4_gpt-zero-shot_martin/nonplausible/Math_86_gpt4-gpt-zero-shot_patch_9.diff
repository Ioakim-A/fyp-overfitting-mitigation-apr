diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b6dc2173-c350-477c-984b-5d2825f47d35_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e651261f-4610-4ea8-8ab1-d313dd7bf15d_fixed.java
index 2ea7a7c..9aed24c 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b6dc2173-c350-477c-984b-5d2825f47d35_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e651261f-4610-4ea8-8ab1-d313dd7bf15d_fixed.java
@@ -1,59 +1,38 @@
 public CholeskyDecompositionImpl(final RealMatrix matrix,
                                  final double relativeSymmetryThreshold,
                                  final double absolutePositivityThreshold)
     throws NonSquareMatrixException,
            NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
-
     if (!matrix.isSquare()) {
         throw new NonSquareMatrixException(matrix.getRowDimension(),
                                            matrix.getColumnDimension());
     }
-
     final int order = matrix.getRowDimension();
     lTData   = matrix.getData();
     cachedL  = null;
     cachedLT = null;
-
-        // check the matrix before transformation
     for (int i = 0; i < order; ++i) {
-
         final double[] lI = lTData[i];
         
-            if (lTData[i][i] < absolutePositivityThreshold) {
-                throw new NotPositiveDefiniteMatrixException();
-            }
-            // check off-diagonal elements (and reset them to 0)
-            for (int j = i + 1; j < order; ++j) {
+        for (int j = i; j < order; ++j) {
             final double[] lJ = lTData[j];
-                final double lIJ = lI[j];
-                final double lJI = lJ[i];
-                final double maxDelta =
-                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
-                if (Math.abs(lIJ - lJI) > maxDelta) {
+            double sum = lI[j];
+            for (int k = 0; k < i; ++k) {
+                sum -= lI[k] * lJ[k];
+            }
+            if (i == j) {
+                if (sum < absolutePositivityThreshold) {
+                    throw new NotPositiveDefiniteMatrixException();
+                }
+                lJ[i] = Math.sqrt(sum);
+            } else {
+                final double lJI = sum / lI[i];
+                final double maxDelta = relativeSymmetryThreshold * Math.max(Math.abs(lI[j]), Math.abs(lJI));
+                if (Math.abs(lI[j] - lJI) > maxDelta) {
                     throw new NotSymmetricMatrixException();
                 }
-                lJ[i] = 0;
+                lJ[i] = lI[j] = lJI;
             }
         }
-
-        // transform the matrix
-        for (int i = 0; i < order; ++i) {
-
-            final double[] ltI = lTData[i];
-
-            // check diagonal element
-
-            ltI[i] = Math.sqrt(ltI[i]);
-            final double inverse = 1.0 / ltI[i];
-
-            for (int q = order - 1; q > i; --q) {
-                ltI[q] *= inverse;
-                final double[] ltQ = lTData[q];
-                for (int p = q; p < order; ++p) {
-                    ltQ[p] -= ltI[q] * ltI[p];
     }
 }
\ No newline at end of file
-
-        }
-
-    }
