diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d1328f4e-b1c6-49ff-82fb-6135c65f5dd3_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/5ade9896-09e7-4a45-9eef-ba70c712cd4b_fixed.java
index 3840a76..758d823 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d1328f4e-b1c6-49ff-82fb-6135c65f5dd3_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/5ade9896-09e7-4a45-9eef-ba70c712cd4b_fixed.java
@@ -1,29 +1,23 @@
     JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
         boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
 
         if (resolved) {
+            if (detectImplicitPrototypeCycle()) {
+                handleTypeCycle(t);
+            }
             super.resolveInternal(t, enclosing);
             finishPropertyContinuations();
             return registry.isLastGeneration() ?
                 getReferencedType() : this;
         }
-
         resolveViaProperties(t, enclosing);
         if (detectImplicitPrototypeCycle()) {
             handleTypeCycle(t);
         }
-
         super.resolveInternal(t, enclosing);
         if (isResolved()) {
             finishPropertyContinuations();
         }
         return registry.isLastGeneration() ?
             getReferencedType() : this;
     }
\ No newline at end of file
