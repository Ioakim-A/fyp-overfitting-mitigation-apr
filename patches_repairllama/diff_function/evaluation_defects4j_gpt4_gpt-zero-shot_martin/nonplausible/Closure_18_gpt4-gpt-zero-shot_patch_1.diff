diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/3c3da8d9-1d8e-4c23-9490-66f30272b81f_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4825a307-a2f6-46f2-8674-4651efb2496c_fixed.java
index 5745704..1a0f84d 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/3c3da8d9-1d8e-4c23-9490-66f30272b81f_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4825a307-a2f6-46f2-8674-4651efb2496c_fixed.java
@@ -1,123 +1,25 @@
-  Node parseInputs() {
-    boolean devMode = options.devMode != DevMode.OFF;
-
-    // If old roots exist (we are parsing a second time), detach each of the
-    // individual file parse trees.
-    if (externsRoot != null) {
-      externsRoot.detachChildren();
-    }
-    if (jsRoot != null) {
-      jsRoot.detachChildren();
-    }
-
-    // Parse main JS sources.
-    jsRoot = IR.block();
-    jsRoot.setIsSyntheticBlock(true);
-
-    externsRoot = IR.block();
-    externsRoot.setIsSyntheticBlock(true);
-
-    externAndJsRoot = IR.block(externsRoot, jsRoot);
-    externAndJsRoot.setIsSyntheticBlock(true);
-
-    if (options.tracer.isOn()) {
-      tracker = new PerformanceTracker(jsRoot, options.tracer);
-      addChangeHandler(tracker.getCodeChangeHandler());
-    }
-
-    Tracer tracer = newTracer("parseInputs");
-
-    try {
-      // Parse externs sources.
-      for (CompilerInput input : externs) {
-        Node n = input.getAstRoot(this);
-        if (hasErrors()) {
-          return null;
-        }
-        externsRoot.addChildToBack(n);
-      }
-
-      // Modules inferred in ProcessCommonJS pass.
-      if (options.transformAMDToCJSModules || options.processCommonJSModules) {
-        processAMDAndCommonJSModules();
-      }
-
-      hoistExterns(externsRoot);
-
-      // Check if the sources need to be re-ordered.
-      boolean staleInputs = false;
 if (options.dependencyOptions.needsManagement() && options.closurePass) {
     for (CompilerInput input : inputs) {
-          // Forward-declare all the provided types, so that they
-          // are not flagged even if they are dropped from the process.
         for (String provide : input.getProvides()) {
             getTypeRegistry().forwardDeclareType(provide);
         }
     }
-
     try {
         inputs =
             (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)
             .manageDependencies(options.dependencyOptions, inputs);
         staleInputs = true;
     } catch (CircularDependencyException e) {
         report(JSError.make(
             JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));
-
-          // If in IDE mode, we ignore the error and keep going.
         if (hasErrors()) {
             return null;
         }
     } catch (MissingProvideException e) {
         report(JSError.make(
             MISSING_ENTRY_ERROR, e.getMessage()));
-
-          // If in IDE mode, we ignore the error and keep going.
         if (hasErrors()) {
             return null;
         }
     }
 }
\ No newline at end of file
-
-      hoistNoCompileFiles();
-
-      if (staleInputs) {
-        repartitionInputs();
-      }
-
-      // Build the AST.
-      for (CompilerInput input : inputs) {
-        Node n = input.getAstRoot(this);
-        if (n == null) {
-          continue;
-        }
-
-        if (devMode) {
-          runSanityCheck();
-          if (hasErrors()) {
-            return null;
-          }
-        }
-
-        if (options.sourceMapOutputPath != null ||
-            options.nameReferenceReportPath != null) {
-
-          // Annotate the nodes in the tree with information from the
-          // input file. This information is used to construct the SourceMap.
-          SourceInformationAnnotator sia =
-              new SourceInformationAnnotator(
-                  input.getName(), options.devMode != DevMode.OFF);
-          NodeTraversal.traverse(this, n, sia);
-        }
-
-        jsRoot.addChildToBack(n);
-      }
-
-      if (hasErrors()) {
-        return null;
-      }
-      return externAndJsRoot;
-    } finally {
-      stopTracer(tracer, "parseInputs");
-    }
-  }
