diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f4773015-a03e-4de9-afd9-ae47bef8c58d_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4c042301-de94-4aa1-ad3a-9d31d71780f4_fixed.java
index 3110cf7..cb6a3c9 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f4773015-a03e-4de9-afd9-ae47bef8c58d_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4c042301-de94-4aa1-ad3a-9d31d71780f4_fixed.java
@@ -1,26 +1,21 @@
 public boolean apply(Node n) {
-        // When the node is null it means, we reached the implicit return
-        // where the function returns (possibly without an return statement)
     if (n == null) {
         return false;
     }
-
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
     if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
         return true;
     }
-
     if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
         return true;
     }
-
-
+    // Check if the node represents an assignment operation and if it has side effects
+    if (n.isAssign() && NodeUtil.assignmentHasSideEffects(n)) {
+        return true;
+    }
     for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
         if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
             return true;
         }
     }
     return false;
 }
\ No newline at end of file
