diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4be1383d-2da0-4e89-b958-c7d48c951238_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/47e3125b-fdab-4cc9-ab71-f3778b7d26f7_fixed.java
index dfceb86..017606e 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4be1383d-2da0-4e89-b958-c7d48c951238_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/47e3125b-fdab-4cc9-ab71-f3778b7d26f7_fixed.java
@@ -1,54 +1,47 @@
   String getReadableJSTypeName(Node n, boolean dereference) {
-
-    // The best type name is the actual type name.
-
-    // If we're analyzing a GETPROP, the property may be inherited by the
-    // prototype chain. So climb the prototype chain and find out where
-    // the property was originally defined.
+    JSType type = getJSType(n);
+    ObjectType objectType = null;
     if (n.isGetProp()) {
-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();
+      objectType = type.toObjectType();
+      if (objectType != null) {
+        objectType = objectType.dereference();
+      }
       if (objectType != null) {
         String propName = n.getLastChild().getString();
         if (objectType.getConstructor() != null &&
             objectType.getConstructor().isInterface()) {
           objectType = FunctionType.getTopDefiningInterface(
               objectType, propName);
         } else {
-          // classes
           while (objectType != null && !objectType.hasOwnProperty(propName)) {
             objectType = objectType.getImplicitPrototype();
           }
         }
-
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
         if (objectType != null &&
             (objectType.getConstructor() != null ||
              objectType.isFunctionPrototypeType())) {
           return objectType.toString() + "." + propName;
         }
       }
+      type = objectType;
     }
-
-    JSType type = getJSType(n);
-    if (dereference) {
+    if (dereference && type != null) {
       ObjectType dereferenced = type.dereference();
       if (dereferenced != null) {
         type = dereferenced;
       }
     }
-    if (type.isFunctionPrototypeType() ||
+    if (type != null && (type.isFunctionPrototypeType() ||
         (type.toObjectType() != null &&
-         type.toObjectType().getConstructor() != null)) {
+         type.toObjectType().getConstructor() != null))) {
       return type.toString();
     }
     String qualifiedName = n.getQualifiedName();
     if (qualifiedName != null) {
       return qualifiedName;
-    } else if (type.isFunctionType()) {
-      // Don't show complex function names.
+    } else if (type != null && type.isFunctionType()) {
       return "function";
     } else {
-      return type.toString();
+      return (type != null ? type.toString() : "unknown");
     }
   }
\ No newline at end of file
