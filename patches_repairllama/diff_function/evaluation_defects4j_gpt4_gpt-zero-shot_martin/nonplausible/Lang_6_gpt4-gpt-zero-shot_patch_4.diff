diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1bec4678-a4c2-4d8a-8011-ec7032a5d950_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2d574cf3-eb98-413c-aba8-6d8a84f7fec7_fixed.java
index f74e742..1f55e4b 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1bec4678-a4c2-4d8a-8011-ec7032a5d950_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2d574cf3-eb98-413c-aba8-6d8a84f7fec7_fixed.java
@@ -1,24 +1,23 @@
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
         int len = input.length();
         while (pos < len) {
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
                 char[] c = Character.toChars(Character.codePointAt(input, pos));
                 out.write(c);
                 pos+= c.length;
                 continue;
             }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
             for (int pt = 0; pt < consumed; pt++) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
+// fixed code
+                pos += Character.charCount(Character.codePointAt(input, pos + pt));
             }
         }
     }
\ No newline at end of file
