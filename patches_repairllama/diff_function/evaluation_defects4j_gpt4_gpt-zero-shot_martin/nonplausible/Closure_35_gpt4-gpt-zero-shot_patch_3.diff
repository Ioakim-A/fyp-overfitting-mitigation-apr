diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/89e4dbb6-3e49-4095-ac85-4dd73d25328b_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9801ae18-c5a2-4513-9f7b-5eb322550507_fixed.java
index b108107..f88ddf0 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/89e4dbb6-3e49-4095-ac85-4dd73d25328b_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9801ae18-c5a2-4513-9f7b-5eb322550507_fixed.java
@@ -1,25 +1,25 @@
 private void inferPropertyTypesToMatchConstraint(
     JSType type, JSType constraint) {
   if (type == null || constraint == null) {
     return;
   }
-
   ObjectType constraintObj =
       ObjectType.cast(constraint.restrictByNotNullOrUndefined());
+  // fixed code
   if (constraintObj != null && constraintObj.isRecordType()) {
       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
       if (objType != null) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
           JSType propType = constraintObj.getPropertyType(prop);
           if (!objType.isPropertyTypeDeclared(prop)) {
             JSType typeToInfer = propType;
             if (!objType.hasProperty(prop)) {
               typeToInfer =
                   getNativeType(VOID_TYPE).getLeastSupertype(propType);
             }
             objType.defineInferredProperty(prop, typeToInfer, null);
           }
         }
       }
   }
 }
\ No newline at end of file
