diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9572d05c-e10d-41b4-85a5-419fbc28fd6d_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e784ceec-a15a-4f30-928c-3430ceaaa30a_fixed.java
index 5aa01c2..e44fd0e 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9572d05c-e10d-41b4-85a5-419fbc28fd6d_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e784ceec-a15a-4f30-928c-3430ceaaa30a_fixed.java
@@ -1,29 +1,29 @@
     public long readBits(final int count) throws IOException {
         if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
             throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
         }
+
          while (bitsCachedSize < count) {
-            final long nextByte = in.read();
+             final int nextByte = in.read();
              if (nextByte < 0) {
-                return nextByte;
+                 throw new EOFException();
              }
              if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsCached |= (nextByte << bitsCachedSize);
+                 bitsCached |= ((long) nextByte << bitsCachedSize);
              } else {
-                bitsCached <<= 8;
-                bitsCached |= nextByte;
+                 bitsCached = (bitsCached << 8) | nextByte;
              }
              bitsCachedSize += 8;
          }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
-        
-        final long bitsOut;
+         long bitsOut;
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
                 bitsOut = (bitsCached & MASKS[count]);
                 bitsCached >>>= count;
             } else {
-                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+                bitsOut = ((bitsCached >>> (bitsCachedSize - count)) & MASKS[count]);
+                bitsCached <<= count;
             }
             bitsCachedSize -= count;
+
         return bitsOut;
     }
\ No newline at end of file
