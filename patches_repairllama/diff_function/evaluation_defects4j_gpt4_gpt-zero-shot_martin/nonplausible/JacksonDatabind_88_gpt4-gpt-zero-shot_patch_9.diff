diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/22f4baf9-e85d-4b8a-9314-b6f3ca66b46c_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f9400e4d-5e58-4cbd-98fd-29db8536395a_fixed.java
index ae1f3a6..6b3d7cc 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/22f4baf9-e85d-4b8a-9314-b6f3ca66b46c_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f9400e4d-5e58-4cbd-98fd-29db8536395a_fixed.java
@@ -1,34 +1,24 @@
     protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException
     {
-        /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first
-         *    check if any generics info is added; and only then ask factory
-         *    to do translation when necessary
-         */
         TypeFactory tf = ctxt.getTypeFactory();
         if (id.indexOf('<') > 0) {
-            // note: may want to try combining with specialization (esp for EnumMap)?
-            // 17-Aug-2017, tatu: As per [databind#1735] need to ensure assignment
-            //    compatibility -- needed later anyway, and not doing so may open
-            //    security issues.
             JavaType t = tf.constructFromCanonical(id);
-                // Probably cleaner to have a method in `TypeFactory` but can't add in patch
+            if (!_baseType.isAssignableFrom(t.getRawClass())) {
+                throw new IllegalArgumentException("Type " + id + " is not a subtype of " + _baseType);
+            }
             return t;
         }
         Class<?> cls;
         try {
             cls =  tf.findClass(id);
         } catch (ClassNotFoundException e) {
-            // 24-May-2016, tatu: Ok, this is pretty ugly, but we should always get
-            //   DeserializationContext, just playing it safe
             if (ctxt instanceof DeserializationContext) {
                 DeserializationContext dctxt = (DeserializationContext) ctxt;
-                // First: we may have problem handlers that can deal with it?
                 return dctxt.handleUnknownTypeId(_baseType, id, this, "no such class found");
             }
-            // ... meaning that we really should never get here.
             return null;
         } catch (Exception e) {
             throw new IllegalArgumentException("Invalid type id '"+id+"' (for id type 'Id.class'): "+e.getMessage(), e);
         }
         return tf.constructSpecializedType(_baseType, cls);
     }
\ No newline at end of file
