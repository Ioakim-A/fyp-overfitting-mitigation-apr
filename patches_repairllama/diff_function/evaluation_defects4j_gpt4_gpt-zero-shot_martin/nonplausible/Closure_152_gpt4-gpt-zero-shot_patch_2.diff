diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1fedab5a-7c84-427a-beee-0519c9d2d720_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/7958ac21-66a6-47e5-9ce9-2dda80a177ad_fixed.java
index d7800f4..eefb6a9 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1fedab5a-7c84-427a-beee-0519c9d2d720_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/7958ac21-66a6-47e5-9ce9-2dda80a177ad_fixed.java
@@ -1,31 +1,24 @@
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
   setResolvedTypeInternal(this);
-
   call = (ArrowType) safeResolve(call, t, scope);
   prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
-
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
+  // corrected code
   typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
-
   boolean changed = false;
   ImmutableList.Builder<ObjectType> resolvedInterfaces =
       ImmutableList.builder();
   for (ObjectType iface : implementedInterfaces) {
     ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
     resolvedInterfaces.add(resolvedIface);
     changed |= (resolvedIface != iface);
   }
   if (changed) {
     implementedInterfaces = resolvedInterfaces.build();
   }
-
   if (subTypes != null) {
     for (int i = 0; i < subTypes.size(); i++) {
       subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
     }
   }
-
   return super.resolveInternal(t, scope);
 }
\ No newline at end of file
