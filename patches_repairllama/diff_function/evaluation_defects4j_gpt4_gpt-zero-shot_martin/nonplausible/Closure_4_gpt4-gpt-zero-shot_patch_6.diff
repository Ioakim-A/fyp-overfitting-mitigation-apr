diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/7f008f49-ffaa-405c-8890-19c21aaa1451_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d6480ae8-7188-4aad-8526-3a54a9b77e33_fixed.java
index 3840a76..3407287 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/7f008f49-ffaa-405c-8890-19c21aaa1451_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d6480ae8-7188-4aad-8526-3a54a9b77e33_fixed.java
@@ -1,29 +1,22 @@
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
     boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
+// fixed code
     if (resolved) {
+      if (detectImplicitPrototypeCycle()) {
+        handleTypeCycle(t);
+      }
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
-    }
-
+    } else {
       resolveViaProperties(t, enclosing);
       if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
       }
-
       super.resolveInternal(t, enclosing);
+    }
     if (isResolved()) {
       finishPropertyContinuations();
     }
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
\ No newline at end of file
