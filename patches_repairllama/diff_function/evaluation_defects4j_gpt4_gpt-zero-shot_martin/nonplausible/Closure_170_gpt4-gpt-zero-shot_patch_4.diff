diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/47860895-1323-47c5-b89a-843de379a22e_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f8be4278-c951-4907-aa2e-c9b04550bd26_fixed.java
index a0eee42..ba5c3f9 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/47860895-1323-47c5-b89a-843de379a22e_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f8be4278-c951-4907-aa2e-c9b04550bd26_fixed.java
@@ -1,25 +1,13 @@
     private void getNumUseInUseCfgNode(final Node cfgNode) {
-
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
-
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+           if (n.isName() && n.getString().equals(varName) && !(parent.isAssign())) {
                numUsesWithinCfgNode++;
            }
         }
-
       };
-
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
