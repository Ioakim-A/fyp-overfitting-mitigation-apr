diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e583d8cf-e1bf-4d8c-9c48-6f5ec5a41da0_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9ff2cff1-f559-4061-87c9-6f5011ef5d6f_fixed.java
index 710fcc0..fba60a4 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e583d8cf-e1bf-4d8c-9c48-6f5ec5a41da0_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9ff2cff1-f559-4061-87c9-6f5011ef5d6f_fixed.java
@@ -1,37 +1,35 @@
     Object returnValueFor(Class<?> type) {
         if (Primitives.isPrimitiveOrWrapper(type)) {
             return Primitives.defaultValueForPrimitiveOrWrapper(type);
-            //new instances are used instead of Collections.emptyList(), etc.
-            //to avoid UnsupportedOperationException if code under test modifies returned collection
-        } else if (type == Collection.class) {
+        } 
+        else if (type == Collection.class) {
             return new LinkedList<Object>();
         } else if (type == Set.class) {
             return new HashSet<Object>();
         } else if (type == HashSet.class) {
             return new HashSet<Object>();
         } else if (type == SortedSet.class) {
             return new TreeSet<Object>();
         } else if (type == TreeSet.class) {
             return new TreeSet<Object>();
         } else if (type == LinkedHashSet.class) {
             return new LinkedHashSet<Object>();
         } else if (type == List.class) {
             return new LinkedList<Object>();
         } else if (type == LinkedList.class) {
             return new LinkedList<Object>();
         } else if (type == ArrayList.class) {
             return new ArrayList<Object>();
         } else if (type == Map.class) {
             return new HashMap<Object, Object>();
         } else if (type == HashMap.class) {
             return new HashMap<Object, Object>();
         } else if (type == SortedMap.class) {
             return new TreeMap<Object, Object>();
         } else if (type == TreeMap.class) {
             return new TreeMap<Object, Object>();
         } else if (type == LinkedHashMap.class) {
             return new LinkedHashMap<Object, Object>();
         }
-        //Let's not care about the rest of collections.
-        return null;
+        throw new IllegalArgumentException("Unsupported type: " + type);
     }
\ No newline at end of file
