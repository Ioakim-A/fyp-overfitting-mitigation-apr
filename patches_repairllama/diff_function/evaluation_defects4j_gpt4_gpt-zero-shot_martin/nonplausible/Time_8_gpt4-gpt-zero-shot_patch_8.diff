diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0f92f8b1-d1eb-4263-a888-45080090b749_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b70835dc-833d-4ef3-b4f1-60034cb46e1f_fixed.java
index ab7017e..2020f6c 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0f92f8b1-d1eb-4263-a888-45080090b749_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b70835dc-833d-4ef3-b4f1-60034cb46e1f_fixed.java
@@ -1,24 +1,24 @@
 public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {
     if (hoursOffset == 0 && minutesOffset == 0) {
         return DateTimeZone.UTC;
     }
     if (hoursOffset < -23 || hoursOffset > 23) {
         throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
     }
-        if (minutesOffset < 0 || minutesOffset > 59) {
+    if (minutesOffset < -59 || minutesOffset > 59) {
         throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);
     }
     int offset = 0;
     try {
         int hoursInMinutes = hoursOffset * 60;
         if (hoursInMinutes < 0) {
-                minutesOffset = hoursInMinutes - minutesOffset;
+            minutesOffset = Math.abs(hoursInMinutes) - minutesOffset;
         } else {
             minutesOffset = hoursInMinutes + minutesOffset;
         }
         offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
     } catch (ArithmeticException ex) {
         throw new IllegalArgumentException("Offset is too large");
     }
     return forOffsetMillis(offset);
 }
\ No newline at end of file
