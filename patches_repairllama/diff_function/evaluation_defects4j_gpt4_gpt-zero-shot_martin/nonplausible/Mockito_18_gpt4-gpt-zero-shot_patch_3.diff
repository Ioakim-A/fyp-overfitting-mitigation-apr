diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b352fb16-5091-4e5c-8a26-2961ce52b455_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e1c97b4a-8b75-4db3-ab0f-b94fb224946d_fixed.java
index 710fcc0..1ac7b0d 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b352fb16-5091-4e5c-8a26-2961ce52b455_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e1c97b4a-8b75-4db3-ab0f-b94fb224946d_fixed.java
@@ -1,37 +1,41 @@
 Object returnValueFor(Class<?> type) {
     if (Primitives.isPrimitiveOrWrapper(type)) {
         return Primitives.defaultValueForPrimitiveOrWrapper(type);
-            //new instances are used instead of Collections.emptyList(), etc.
-            //to avoid UnsupportedOperationException if code under test modifies returned collection
+    } else if (type.isInterface() || Modifier.isAbstract(type.getModifiers())) {
+        throw new IllegalArgumentException("Cannot handle interface or abstract class: " + type.getName());
     } else if (type == Collection.class) {
         return new LinkedList<Object>();
     } else if (type == Set.class) {
         return new HashSet<Object>();
     } else if (type == HashSet.class) {
         return new HashSet<Object>();
     } else if (type == SortedSet.class) {
         return new TreeSet<Object>();
     } else if (type == TreeSet.class) {
         return new TreeSet<Object>();
     } else if (type == LinkedHashSet.class) {
         return new LinkedHashSet<Object>();
     } else if (type == List.class) {
         return new LinkedList<Object>();
     } else if (type == LinkedList.class) {
         return new LinkedList<Object>();
     } else if (type == ArrayList.class) {
         return new ArrayList<Object>();
     } else if (type == Map.class) {
         return new HashMap<Object, Object>();
     } else if (type == HashMap.class) {
         return new HashMap<Object, Object>();
     } else if (type == SortedMap.class) {
         return new TreeMap<Object, Object>();
     } else if (type == TreeMap.class) {
         return new TreeMap<Object, Object>();
     } else if (type == LinkedHashMap.class) {
         return new LinkedHashMap<Object, Object>();
+    } else {
+        try {
+            return type.newInstance();
+        } catch (Exception e) {
+            throw new IllegalArgumentException("Cannot create instance of: " + type.getName(), e);
+        }
     }
-        //Let's not care about the rest of collections.
-        return null;
 }
\ No newline at end of file
