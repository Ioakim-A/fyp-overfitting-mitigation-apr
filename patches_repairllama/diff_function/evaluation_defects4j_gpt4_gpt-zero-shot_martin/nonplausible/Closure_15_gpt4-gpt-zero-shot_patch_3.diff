diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/8d949b36-b37b-4aa9-b208-9cb1da5a0e6d_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4f8fcc59-8026-41b6-aaf9-842aec34b46d_fixed.java
index 3110cf7..9a218b2 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/8d949b36-b37b-4aa9-b208-9cb1da5a0e6d_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4f8fcc59-8026-41b6-aaf9-842aec34b46d_fixed.java
@@ -1,26 +1,3 @@
-      public boolean apply(Node n) {
-        // When the node is null it means, we reached the implicit return
-        // where the function returns (possibly without an return statement)
-        if (n == null) {
-          return false;
-        }
-
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
-        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
-          return true;
-        }
-
-        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
+if (n.isAssign() && NodeUtil.assignmentHasSideEffects(n)) {
     return true;
 }
\ No newline at end of file
-
-
-        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
-          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
-            return true;
-          }
-        }
-        return false;
-      }
