diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9b1e04ce-5873-4626-b830-046013d6dbdc_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e235cb11-ee4a-4ebe-8e2c-896f9911dc5a_fixed.java
index b108107..ad9343b 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9b1e04ce-5873-4626-b830-046013d6dbdc_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e235cb11-ee4a-4ebe-8e2c-896f9911dc5a_fixed.java
@@ -1,25 +1,27 @@
 private void inferPropertyTypesToMatchConstraint(
     JSType type, JSType constraint) {
   if (type == null || constraint == null) {
     return;
   }
-
   ObjectType constraintObj =
       ObjectType.cast(constraint.restrictByNotNullOrUndefined());
   if (constraintObj != null && constraintObj.isRecordType()) {
     ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
     if (objType != null) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!objType.isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
           if (!objType.hasProperty(prop)) {
             typeToInfer =
                 getNativeType(VOID_TYPE).getLeastSupertype(propType);
           }
           objType.defineInferredProperty(prop, typeToInfer, null);
         }
       }
+    } else {
+      // Handle the scenario when objType is null
+      throw new IllegalArgumentException("Type cannot be restricted by Not Null Or Undefined");
     }
   }
 }
\ No newline at end of file
