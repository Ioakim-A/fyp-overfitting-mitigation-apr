diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4b1d6354-a723-4ea1-a912-17022084084b_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6a76d98c-0e54-4882-b72d-b7b9a7e49778_fixed.java
index a0eee42..d0fed04 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4b1d6354-a723-4ea1-a912-17022084084b_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6a76d98c-0e54-4882-b72d-b7b9a7e49778_fixed.java
@@ -1,25 +1,15 @@
 private void getNumUseInUseCfgNode(final Node cfgNode) {
-
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
-
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+        if (n.isName() && n.getString().equals(varName)) {
+            if(!(parent.isAssign() && parent.getFirstChild() == n)) {
                 numUsesWithinCfgNode++;
             }
         }
-
+    }
   };
-
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
