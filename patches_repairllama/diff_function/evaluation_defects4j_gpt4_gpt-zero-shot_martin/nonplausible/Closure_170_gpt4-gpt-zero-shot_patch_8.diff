diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/70abad88-9c7e-4353-90d3-cba02678b80f_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a2311685-590d-4ce8-afee-9dddf0b65160_fixed.java
index a0eee42..42c1736 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/70abad88-9c7e-4353-90d3-cba02678b80f_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a2311685-590d-4ce8-afee-9dddf0b65160_fixed.java
@@ -1,25 +1,16 @@
 private void getNumUseInUseCfgNode(final Node cfgNode) {
-
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
-
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
+      // fixed code
       if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
+          !(parent != null && parent.isAssign() &&
            (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
           numUsesWithinCfgNode++;
       }
     }
-
   };
-
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
