diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/bcb1994d-a790-4d71-92ae-86b83cbdd6d8_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/44b837e2-05f0-4ae4-8d38-32d237bd5bd8_fixed.java
index 602226b..d3d5d2f 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/bcb1994d-a790-4d71-92ae-86b83cbdd6d8_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/44b837e2-05f0-4ae4-8d38-32d237bd5bd8_fixed.java
@@ -1,26 +1,20 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
-        if (parent.isVar()) {
+        if (parent != null && parent.isVar()) {
           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
             String name = n.getString();
             Var aliasVar = scope.getVar(name);
             aliases.put(name, aliasVar);
-
             String qualifiedName =
                 aliasVar.getInitialValue().getQualifiedName();
             transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
           } else {
-          // TODO(robbyw): Support using locals for private variables.
             report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
           }
         }
       }
     }
\ No newline at end of file
