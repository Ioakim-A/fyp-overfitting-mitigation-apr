diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/546c6ab1-49bd-4806-a2b3-eff289509d6b_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c0e5acbe-833c-4a11-8d44-df6a4ff54798_fixed.java
index 9a8827e..9e5272e 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/546c6ab1-49bd-4806-a2b3-eff289509d6b_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c0e5acbe-833c-4a11-8d44-df6a4ff54798_fixed.java
@@ -1,27 +1,31 @@
 private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
                                               String functionName, HashMap<String, ObjectType> properties,
                                               HashMap<String, ObjectType> currentProperties,
                                               ObjectType interfaceType) {
   ObjectType implicitProto = interfaceType.getImplicitPrototype();
   Set<String> currentPropertyNames;
-      // This can be the case if interfaceType is proxy to a non-existent
-      // object (which is a bad type annotation, but shouldn't crash).
+
+  // check if implicitProto is not null before trying to get property names
+  if (implicitProto != null) {
     currentPropertyNames = implicitProto.getOwnPropertyNames();
+
     for (String name : currentPropertyNames) {
       ObjectType oType = properties.get(name);
       if (oType != null) {
         if (!interfaceType.getPropertyType(name).isEquivalentTo(
             oType.getPropertyType(name))) {
           compiler.report(
               t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
                   functionName, name, oType.toString(),
                   interfaceType.toString()));
         }
       }
       currentProperties.put(name, interfaceType);
     }
+  }
+
   for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
     checkInterfaceConflictProperties(t, n, functionName, properties,
         currentProperties, iType);
   }
 }
\ No newline at end of file
