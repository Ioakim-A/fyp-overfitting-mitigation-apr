diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b0f3e2b5-73c9-4e99-9bd3-9a58eb24992f_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/dfec121c-4110-4ff9-bcb2-c75a366c9fa8_fixed.java
index 602226b..f8fac68 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b0f3e2b5-73c9-4e99-9bd3-9a58eb24992f_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/dfec121c-4110-4ff9-bcb2-c75a366c9fa8_fixed.java
@@ -1,26 +1,23 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
     int type = n.getType();
     Node parent = n.getParent();
-        if (parent.isVar()) {
+    if (parent != null && parent.isVar()) {
       if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+        if (n.isString()) {
           String name = n.getString();
           Var aliasVar = scope.getVar(name);
+          if (aliasVar != null && aliasVar.getInitialValue() != null) {
             aliases.put(name, aliasVar);
-
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+            String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
             transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
           } else {
-          // TODO(robbyw): Support using locals for private variables.
-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);
+          }
+        }
       }
     }
   }
 }
\ No newline at end of file
