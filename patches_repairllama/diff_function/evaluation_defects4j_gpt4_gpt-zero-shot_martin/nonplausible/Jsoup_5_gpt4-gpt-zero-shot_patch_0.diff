diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/248ff153-d2fb-4c86-b645-bc62eaaeb5fa_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e3ae664b-e9f1-4343-bd7c-6a3dfbc4a52f_fixed.java
index 39dd8e7..b7fdc35 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/248ff153-d2fb-4c86-b645-bc62eaaeb5fa_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e3ae664b-e9f1-4343-bd7c-6a3dfbc4a52f_fixed.java
@@ -1,30 +1,27 @@
 private Attribute parseAttribute() {
     tq.consumeWhitespace();
     String key = tq.consumeAttributeKey();
     String value = "";
     tq.consumeWhitespace();
     if (tq.matchChomp("=")) {
         tq.consumeWhitespace();
-
         if (tq.matchChomp(SQ)) {
             value = tq.chompTo(SQ);
         } else if (tq.matchChomp(DQ)) {
             value = tq.chompTo(DQ);
         } else {
             StringBuilder valueAccum = new StringBuilder();
-                // no ' or " to look for, so scan to end tag or space (or end of stream)
             while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                 valueAccum.append(tq.consume());
             }
             value = valueAccum.toString();
         }
         tq.consumeWhitespace();
     }
     if (key.length() != 0)
         return Attribute.createFromEncoded(key, value);
     else {
-            tq.consume();
-                
+        // throw new IllegalArgumentException("Attribute key cannot be empty");
         return null;
     }
 }
\ No newline at end of file
