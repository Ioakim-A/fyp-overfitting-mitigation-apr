diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0885bb27-7f4d-4df0-b901-51c54e0ca214_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b7c14238-9228-4da6-abb9-15f7d41339ae_fixed.java
index 89df533..00fca1e 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0885bb27-7f4d-4df0-b901-51c54e0ca214_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b7c14238-9228-4da6-abb9-15f7d41339ae_fixed.java
@@ -1,67 +1,49 @@
 public TarArchiveEntry getNextTarEntry() throws IOException {
     if (hasHitEOF) {
         return null;
     }
-
     if (currEntry != null) {
         long numToSkip = entrySize - entryOffset;
-
         while (numToSkip > 0) {
             long skipped = skip(numToSkip);
             if (skipped <= 0) {
                 throw new RuntimeException("failed to skip current tar entry");
             }
             numToSkip -= skipped;
         }
-
         readBuf = null;
     }
-
     byte[] headerBuf = getRecord();
-
     if (hasHitEOF) {
         currEntry = null;
         return null;
     }
-
     currEntry = new TarArchiveEntry(headerBuf);
     entryOffset = 0;
     entrySize = currEntry.getSize();
-
     if (currEntry.isGNULongNameEntry()) {
-            // read in the name
         StringBuffer longName = new StringBuffer();
         byte[] buf = new byte[SMALL_BUFFER_SIZE];
         int length = 0;
         while ((length = read(buf)) >= 0) {
             longName.append(new String(buf, 0, length));
         }
         getNextEntry();
         if (currEntry == null) {
-                // Bugzilla: 40334
-                // Malformed tar file - long entry name not followed by entry
             return null;
         }
-            // remove trailing null terminator
         if (longName.length() > 0
             && longName.charAt(longName.length() - 1) == 0) {
             longName.deleteCharAt(longName.length() - 1);
         }
         currEntry.setName(longName.toString());
     }
-
-        if (currEntry.isPaxHeader()){ // Process Pax headers
+    if (currEntry.isPaxHeader()){ 
         paxHeaders();
     }
-
-        if (currEntry.isGNUSparse()){ // Process sparse files
+    if (currEntry.isGNUSparse()){ 
         readGNUSparse();
     }
-
-        // If the size of the next element in the archive has changed
-        // due to a new size being reported in the posix header
-        // information, we update entrySize here so that it contains
-        // the correct value.
     entrySize = currEntry.getSize();
     return currEntry;
 }
\ No newline at end of file
