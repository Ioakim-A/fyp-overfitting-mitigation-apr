diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/069fed40-4b61-42f9-a512-03ff258f90f8_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/233c190f-e165-4310-ab28-6fce851d3863_fixed.java
index 618a37c..bfdd49e 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/069fed40-4b61-42f9-a512-03ff258f90f8_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/233c190f-e165-4310-ab28-6fce851d3863_fixed.java
@@ -1,28 +1,23 @@
 private boolean inferTemplatedTypesForCall(
         Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
             .getTemplateKeys();
     if (keys.isEmpty()) {
         return false;
     }
-
-    // Try to infer the template types
+    // fixed code
     Map<TemplateType, JSType> inferred =
             inferTemplateTypesFromParameters(fnType, n);
-
-
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
+    if (inferred == null) {
+        return false;
+    }
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
             registry, inferred);
     Node callTarget = n.getFirstChild();
-
     FunctionType replacementFnType = fnType.visit(replacer)
             .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
-
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
-
     return replacer.madeChanges;
 }
\ No newline at end of file
