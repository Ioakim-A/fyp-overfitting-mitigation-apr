diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f6e0bb97-972b-40b9-8933-102cc0953265_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c22b2c55-2ac7-4b18-8432-b8b7c00b19ed_fixed.java
index 602226b..a65bafb 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f6e0bb97-972b-40b9-8933-102cc0953265_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c22b2c55-2ac7-4b18-8432-b8b7c00b19ed_fixed.java
@@ -1,26 +1,24 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
         if (parent.isVar()) {
            if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
              String name = n.getString();
              Var aliasVar = scope.getVar(name);
+             if (aliasVar != null && aliasVar.getInitialValue() != null && aliasVar.getInitialValue().isQualifiedName()) {
                aliases.put(name, aliasVar);
-
                String qualifiedName =
                    aliasVar.getInitialValue().getQualifiedName();
                transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
              } else {
-          // TODO(robbyw): Support using locals for private variables.
+               report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+             }
+           } else {
              report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
            }
         }
       }
     }
\ No newline at end of file
