diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/64c8f847-55a1-41e2-97cd-77da6a96cccd_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/99e7f20c-675e-4878-b958-314c9f4c0b85_fixed.java
index ab7017e..386cdf8 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/64c8f847-55a1-41e2-97cd-77da6a96cccd_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/99e7f20c-675e-4878-b958-314c9f4c0b85_fixed.java
@@ -1,24 +1,24 @@
     public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {
         if (hoursOffset == 0 && minutesOffset == 0) {
             return DateTimeZone.UTC;
         }
         if (hoursOffset < -23 || hoursOffset > 23) {
             throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
         }
         if (minutesOffset < 0 || minutesOffset > 59) {
             throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);
         }
         int offset = 0;
         try {
-            int hoursInMinutes = hoursOffset * 60;
-            if (hoursInMinutes < 0) {
+            int hoursInMinutes = Math.abs(hoursOffset) * 60;
+            if (hoursOffset < 0) {
                 minutesOffset = hoursInMinutes - minutesOffset;
             } else {
                 minutesOffset = hoursInMinutes + minutesOffset;
             }
             offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
         } catch (ArithmeticException ex) {
             throw new IllegalArgumentException("Offset is too large");
         }
         return forOffsetMillis(offset);
     }
\ No newline at end of file
