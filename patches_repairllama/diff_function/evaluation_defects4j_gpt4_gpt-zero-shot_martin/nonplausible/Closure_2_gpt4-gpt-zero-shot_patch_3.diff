diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/72e37eac-a2d2-41a0-a335-ac20809e23b5_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/50a5516f-0b47-4125-9ae0-3402f90f4c93_fixed.java
index 9a8827e..91da511 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/72e37eac-a2d2-41a0-a335-ac20809e23b5_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/50a5516f-0b47-4125-9ae0-3402f90f4c93_fixed.java
@@ -1,27 +1,27 @@
   private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
       String functionName, HashMap<String, ObjectType> properties,
       HashMap<String, ObjectType> currentProperties,
       ObjectType interfaceType) {
     ObjectType implicitProto = interfaceType.getImplicitPrototype();
     Set<String> currentPropertyNames;
-      // This can be the case if interfaceType is proxy to a non-existent
-      // object (which is a bad type annotation, but shouldn't crash).
+    if (implicitProto != null) {
         currentPropertyNames = implicitProto.getOwnPropertyNames();
         for (String name : currentPropertyNames) {
           ObjectType oType = properties.get(name);
           if (oType != null) {
             if (!interfaceType.getPropertyType(name).isEquivalentTo(
                 oType.getPropertyType(name))) {
               compiler.report(
                   t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
                       functionName, name, oType.toString(),
                       interfaceType.toString()));
             }
           }
           currentProperties.put(name, interfaceType);
         }
+    }
     for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
       checkInterfaceConflictProperties(t, n, functionName, properties,
           currentProperties, iType);
     }
   }
\ No newline at end of file
