diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9359a617-4a17-4c08-8971-bf56d8e2de05_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/8e7c902f-2217-4b92-bacd-942f6b47fa16_fixed.java
index 6926bd5..fa435f9 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9359a617-4a17-4c08-8971-bf56d8e2de05_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/8e7c902f-2217-4b92-bacd-942f6b47fa16_fixed.java
@@ -1,58 +1,15 @@
-    private void replaceAssignmentExpression(Var v, Reference ref,
-                                             Map<String, String> varmap) {
-      // Compute all of the assignments necessary
-      List<Node> nodes = Lists.newArrayList();
-      Node val = ref.getAssignedValue();
-      blacklistVarReferencesInTree(val, v.scope);
-      Preconditions.checkState(val.getType() == Token.OBJECTLIT);
-      Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
-      for (Node key = val.getFirstChild(); key != null;
-           key = key.getNext()) {
-        String var = key.getString();
-        Node value = key.removeFirstChild();
-        // TODO(user): Copy type information.
-        nodes.add(
-          new Node(Token.ASSIGN,
-                   Node.newString(Token.NAME, varmap.get(var)), value));
-        all.remove(var);
-      }
-
-      // TODO(user): Better source information.
-      for (String var : all) {
-        nodes.add(
-          new Node(Token.ASSIGN,
-                   Node.newString(Token.NAME, varmap.get(var)),
-                   NodeUtil.newUndefinedNode(null)));
-      }
-
-      Node replacement;
-        // All assignments evaluate to true, so make sure that the
-        // expr statement evaluates to true in case it matters.
-        nodes.add(new Node(Token.TRUE));
+      // start by creating a comma node with the last assignment
+      Node replacement = new Node(Token.COMMA, nodes.remove(nodes.size() - 1));
       
-        // Join these using COMMA.  A COMMA node must have 2 children, so we
-        // create a tree. In the tree the first child be the COMMA to match
-        // the parser, otherwise tree equality tests fail.
-        nodes = Lists.reverse(nodes);
-        replacement = new Node(Token.COMMA);
-        Node cur = replacement;
-        int i;
-        for (i = 0; i < nodes.size() - 2; i++) {
-          cur.addChildToFront(nodes.get(i));
-          Node t = new Node(Token.COMMA);
-          cur.addChildToFront(t);
-          cur = t;
+      // for every node in the list, prepend a new comma node with the assignment as a child
+      for (int i = nodes.size() - 1; i >= 0; i--) {
+        replacement = new Node(Token.COMMA, nodes.get(i), replacement);
       }
-        cur.addChildToFront(nodes.get(i));
-        cur.addChildToFront(nodes.get(i + 1));
 
       Node replace = ref.getParent();
       replacement.copyInformationFromForTree(replace);
-
       if (replace.getType() == Token.VAR) {
-        replace.getParent().replaceChild(
-            replace, NodeUtil.newExpr(replacement));
+        replace.getParent().replaceChild(replace, NodeUtil.newExpr(replacement));
       } else {
         replace.getParent().replaceChild(replace, replacement);
       }
\ No newline at end of file
-    }
