diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/7963cbfc-0303-4c9f-9a7f-0b0f3ff5e4fe_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1710d9e1-70d3-4aae-bc01-09172df48a84_fixed.java
index 602226b..12e83dc 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/7963cbfc-0303-4c9f-9a7f-0b0f3ff5e4fe_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1710d9e1-70d3-4aae-bc01-09172df48a84_fixed.java
@@ -1,26 +1,21 @@
 private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
         if (parent.isVar()) {
           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
             String name = n.getString();
             Var aliasVar = scope.getVar(name);
+            if (aliasVar != null) { // add null check to prevent NullPointerException
                 aliases.put(name, aliasVar);
-
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+                String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
                 transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
+            }
           } else {
-          // TODO(robbyw): Support using locals for private variables.
             report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
           }
         }
       }
     }
\ No newline at end of file
