diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c7322f3a-4ef8-4585-8a96-855a06bf0697_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a117a2ef-ebfa-4800-9b8d-8a78c09a2566_fixed.java
index aa64e1a..3f8f11c 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c7322f3a-4ef8-4585-8a96-855a06bf0697_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a117a2ef-ebfa-4800-9b8d-8a78c09a2566_fixed.java
@@ -1,38 +1,9 @@
-    void writePaxHeaders(String entryName,
-                         Map<String, String> headers) throws IOException {
-        String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);
-            // TarEntry's constructor would think this is a directory
-            // and not allow any data to be written
-        if (name.length() >= TarConstants.NAMELEN) {
-            name = name.substring(0, TarConstants.NAMELEN - 1);
+    String stripTo7Bits(String entryName) {
+        StringBuilder strBuilder = new StringBuilder();
+        for (char c : entryName.toCharArray()) {
+            if ((c >= 32) && (c < 127)) {
+                strBuilder.append(c);
             }
-        TarArchiveEntry pex = new TarArchiveEntry(name,
-                                                  TarConstants.LF_PAX_EXTENDED_HEADER_LC);
-
-        StringWriter w = new StringWriter();
-        for (Map.Entry<String, String> h : headers.entrySet()) {
-            String key = h.getKey();
-            String value = h.getValue();
-            int len = key.length() + value.length()
-                + 3 /* blank, equals and newline */
-                + 2 /* guess 9 < actual length < 100 */;
-            String line = len + " " + key + "=" + value + "\n";
-            int actualLength = line.getBytes(CharsetNames.UTF_8).length;
-            while (len != actualLength) {
-                // Adjust for cases where length < 10 or > 100
-                // or where UTF-8 encoding isn't a single octet
-                // per character.
-                // Must be in loop as size may go from 99 to 100 in
-                // first pass so we'd need a second.
-                len = actualLength;
-                line = len + " " + key + "=" + value + "\n";
-                actualLength = line.getBytes(CharsetNames.UTF_8).length;
         }
-            w.write(line);
-        }
-        byte[] data = w.toString().getBytes(CharsetNames.UTF_8);
-        pex.setSize(data.length);
-        putArchiveEntry(pex);
-        write(data);
-        closeArchiveEntry();
+        return strBuilder.toString();
     }
\ No newline at end of file
