diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/48d66fd5-3223-4ca5-a1a2-9806576f3dcd_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1dbb05c9-6118-4eee-b312-4d289d0e6b1f_fixed.java
index b108107..9aa9546 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/48d66fd5-3223-4ca5-a1a2-9806576f3dcd_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1dbb05c9-6118-4eee-b312-4d289d0e6b1f_fixed.java
@@ -1,25 +1,23 @@
-  private void inferPropertyTypesToMatchConstraint(
-      JSType type, JSType constraint) {
+private void inferPropertyTypesToMatchConstraint(JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
-
-    ObjectType constraintObj =
-        ObjectType.cast(constraint.restrictByNotNullOrUndefined());
+    ObjectType constraintObj = ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
         ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
         if (objType != null) {
             for (String prop : constraintObj.getOwnPropertyNames()) {
                 JSType propType = constraintObj.getPropertyType(prop);
                 if (!objType.isPropertyTypeDeclared(prop)) {
                     JSType typeToInfer = propType;
                     if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+                        typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);
                     }
                     objType.defineInferredProperty(prop, typeToInfer, null);
                 }
             }
         }
+    } else { // handling non-Record types
+        // handle your logic here
     }
 }
\ No newline at end of file
