diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/8e1c6586-5299-49f8-8179-de40953787a2_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/26773bf3-f7c2-47bc-acf9-9b64b3d3e16b_fixed.java
index c4e5233..5916d79 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/8e1c6586-5299-49f8-8179-de40953787a2_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/26773bf3-f7c2-47bc-acf9-9b64b3d3e16b_fixed.java
@@ -1,43 +1,28 @@
     public double solve(final UnivariateRealFunction f,
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
-
         clearResult();
         verifySequence(min, initial, max);
-
-        // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
-
-        // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            setResult(min, 0);
             return result;
         }
-
-        // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
+            return solve(f, min, initial);
         }
-
-        // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            setResult(max, 0);
             return result;
         }
-
-        // reduce interval if initial and max bracket the root
         if (yInitial * yMax < 0) {
-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);
+            return solve(f, initial, max);
         }
-
-
-        // full Brent algorithm starting with provided initial guess
-        return solve(f, min, yMin, max, yMax, initial, yInitial);
-
+        return solve(f, min, max);
     }
