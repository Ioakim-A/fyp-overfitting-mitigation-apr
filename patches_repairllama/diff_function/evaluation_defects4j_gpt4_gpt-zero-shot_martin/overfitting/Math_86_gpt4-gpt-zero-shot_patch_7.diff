diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b12c439b-07d6-4750-99c3-80cc907fd410_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f3b255df-3e57-4909-9b9c-322536350381_fixed.java
index 2ea7a7c..557824c 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b12c439b-07d6-4750-99c3-80cc907fd410_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f3b255df-3e57-4909-9b9c-322536350381_fixed.java
@@ -1,59 +1,58 @@
 public CholeskyDecompositionImpl(final RealMatrix matrix,
                                  final double relativeSymmetryThreshold,
                                  final double absolutePositivityThreshold)
     throws NonSquareMatrixException,
            NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
-
     if (!matrix.isSquare()) {
         throw new NonSquareMatrixException(matrix.getRowDimension(),
                                            matrix.getColumnDimension());
     }
-
     final int order = matrix.getRowDimension();
     lTData   = matrix.getData();
     cachedL  = null;
     cachedLT = null;
-
-        // check the matrix before transformation
     for (int i = 0; i < order; ++i) {
-
         final double[] lI = lTData[i];
-
         if (lTData[i][i] < absolutePositivityThreshold) {
             throw new NotPositiveDefiniteMatrixException();
         }
-            // check off-diagonal elements (and reset them to 0)
         for (int j = i + 1; j < order; ++j) {
             final double[] lJ = lTData[j];
             final double lIJ = lI[j];
             final double lJI = lJ[i];
             final double maxDelta =
                 relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
             if (Math.abs(lIJ - lJI) > maxDelta) {
                 throw new NotSymmetricMatrixException();
             }
             lJ[i] = 0;
         }
     }
-
-        // transform the matrix
     for (int i = 0; i < order; ++i) {
-
         final double[] ltI = lTData[i];
-
-            // check diagonal element
-
-            ltI[i] = Math.sqrt(ltI[i]);
+        for (int j = 0; j < i; ++j) {
+            double sum = 0;
+            for (int k = 0; k < j; ++k) {
+                sum += ltI[k] * lTData[j][k];
+            }
+            ltI[j] = (ltI[j] - sum) / lTData[j][j];
+        }
+        double sum = 0;
+        for (int k = 0; k < i; ++k) {
+            sum += ltI[k] * ltI[k];
+        }
+        double d = ltI[i] - sum;
+        if (d < absolutePositivityThreshold) {
+            throw new NotPositiveDefiniteMatrixException();
+        }
+        ltI[i] = Math.sqrt(d);
         final double inverse = 1.0 / ltI[i];
-
         for (int q = order - 1; q > i; --q) {
             ltI[q] *= inverse;
             final double[] ltQ = lTData[q];
             for (int p = q; p < order; ++p) {
                 ltQ[p] -= ltI[q] * ltI[p];
             }
         }
-
     }
-
 }
\ No newline at end of file
