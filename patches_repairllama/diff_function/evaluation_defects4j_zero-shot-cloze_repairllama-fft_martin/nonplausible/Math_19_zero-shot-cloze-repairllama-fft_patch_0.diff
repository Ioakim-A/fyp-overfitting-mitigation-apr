diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/86fc5bb2-4ed4-4172-8498-ab1bb2a1a08a_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/17458b22-ccbd-4d56-aad5-9311d35929f6_fixed.java
index 248f3ee..0abc8bb 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/86fc5bb2-4ed4-4172-8498-ab1bb2a1a08a_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/17458b22-ccbd-4d56-aad5-9311d35929f6_fixed.java
@@ -1,58 +1,49 @@
     private void checkParameters() {
         final double[] init = getStartPoint();
         final double[] lB = getLowerBound();
         final double[] uB = getUpperBound();
-
-        // Checks whether there is at least one finite bound value.
         boolean hasFiniteBounds = false;
         for (int i = 0; i < lB.length; i++) {
             if (!Double.isInfinite(lB[i]) ||
                 !Double.isInfinite(uB[i])) {
                 hasFiniteBounds = true;
                 break;
             }
         }
-        // Checks whether there is at least one infinite bound value.
         boolean hasInfiniteBounds = false;
         if (hasFiniteBounds) {
             for (int i = 0; i < lB.length; i++) {
                 if (Double.isInfinite(lB[i]) ||
                     Double.isInfinite(uB[i])) {
                     hasInfiniteBounds = true;
                     break;
                 }
             }
-
             if (hasInfiniteBounds) {
-                // If there is at least one finite bound, none can be infinite,
-                // because mixed cases are not supported by the current code.
                 throw new MathUnsupportedOperationException();
             } else {
-                // Convert API to internal handling of boundaries.
                 boundaries = new double[2][];
                 boundaries[0] = lB;
                 boundaries[1] = uB;
+// buggy code
 
-                // Abort early if the normalization will overflow (cf. "encode" method).
             }
         } else {
-            // Convert API to internal handling of boundaries.
             boundaries = null;
         }
-
         if (inputSigma != null) {
             if (inputSigma.length != init.length) {
                 throw new DimensionMismatchException(inputSigma.length, init.length);
             }
             for (int i = 0; i < init.length; i++) {
                 if (inputSigma[i] < 0) {
                     throw new NotPositiveException(inputSigma[i]);
                 }
                 if (boundaries != null) {
                     if (inputSigma[i] > boundaries[1][i] - boundaries[0][i]) {
                         throw new OutOfRangeException(inputSigma[i], 0, boundaries[1][i] - boundaries[0][i]);
                     }
                 }
             }
         }
     }
