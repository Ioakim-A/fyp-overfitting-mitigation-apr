diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/960ba06b-b09a-4f37-90c3-e914354663e9_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a4f330e1-5d46-4e67-b0c6-5a188efd8832_fixed.java
index b98f0a7..93c333f 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/960ba06b-b09a-4f37-90c3-e914354663e9_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a4f330e1-5d46-4e67-b0c6-5a188efd8832_fixed.java
@@ -1,29 +1,51 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
-
+// buggy code
+//    Node constructor = n.getFirstChild();
+//    scope = traverse(constructor, scope);
+//    JSType constructorType = constructor.getJSType();
+//    JSType type = null;
+//    if (constructorType != null) {
+//      constructorType = constructorType.restrictByNotNullOrUndefined();
+//      if (constructorType.isUnknownType()) {
+//        type = getNativeType(UNKNOWN_TYPE);
+//      } else {
+//        FunctionType ct = constructorType.toMaybeFunctionType();
+//        if (ct == null && constructorType instanceof FunctionType) {
+//          ct = (FunctionType) constructorType;
+//        }
+//        if (ct != null && ct.isConstructor()) {
+//          type = ct.getInstanceType();
+//        }
+//      }
+//    }
+//    n.setJSType(type);
+//    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+//      scope = traverse(arg, scope);
+//    }
    Node constructor = n.getFirstChild();
+    if (constructor != null) {
       scope = traverse(constructor, scope);
       JSType constructorType = constructor.getJSType();
       JSType type = null;
       if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
           type = getNativeType(UNKNOWN_TYPE);
         } else {
           FunctionType ct = constructorType.toMaybeFunctionType();
           if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
             ct = (FunctionType) constructorType;
           }
           if (ct != null && ct.isConstructor()) {
             type = ct.getInstanceType();
           }
         }
       }
       n.setJSType(type);
       for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
       }
+    }
+
     return scope;
   }
