diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d597af7c-2945-47d1-b64b-a23b1cc30f5b_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a027fada-983a-4934-83c2-e7f2c7c8941a_fixed.java
index b108107..8ff45ad 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d597af7c-2945-47d1-b64b-a23b1cc30f5b_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a027fada-983a-4934-83c2-e7f2c7c8941a_fixed.java
@@ -1,25 +1,42 @@
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
-
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
-    if (constraintObj != null && constraintObj.isRecordType()) {
+// buggy code
+//    if (constraintObj != null && constraintObj.isRecordType()) {
+//      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
+//      if (objType != null) {
+//        for (String prop : constraintObj.getOwnPropertyNames()) {
+//          JSType propType = constraintObj.getPropertyType(prop);
+//          if (!objType.isPropertyTypeDeclared(prop)) {
+//            JSType typeToInfer = propType;
+//            if (!objType.hasProperty(prop)) {
+//              typeToInfer =
+//                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+//            }
+//            objType.defineInferredProperty(prop, typeToInfer, null);
+//          }
+//        }
+//      }
+//    }
+    if (constraintObj != null && constraintObj.isStruct()) {
       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
       if (objType != null) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
           JSType propType = constraintObj.getPropertyType(prop);
           if (!objType.isPropertyTypeDeclared(prop)) {
             JSType typeToInfer = propType;
             if (!objType.hasProperty(prop)) {
               typeToInfer =
                   getNativeType(VOID_TYPE).getLeastSupertype(propType);
             }
             objType.defineInferredProperty(prop, typeToInfer, null);
           }
         }
       }
+
     }
   }
