diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/afe76e4b-bea0-4382-8ce5-09db3ad2d92b_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/3670a1a4-1816-4da1-8510-8d0936b1d0b5_fixed.java
index b2db1d6..c7816af 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/afe76e4b-bea0-4382-8ce5-09db3ad2d92b_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/3670a1a4-1816-4da1-8510-8d0936b1d0b5_fixed.java
@@ -1,29 +1,27 @@
     protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
             Class<?> mixInCls, AnnotatedMethodMap mixIns)
     {
         List<Class<?>> parents = new ArrayList<Class<?>>();
         parents.add(mixInCls);
         ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
         for (Class<?> mixin : parents) {
             for (Method m : mixin.getDeclaredMethods()) {
                 if (!_isIncludableMemberMethod(m)) {
                     continue;
                 }
                 AnnotatedMethod am = methods.find(m);
-                /* Do we already have a method to augment (from sub-class
-                 * that will mask this mixIn)? If so, add if visible
-                 * without masking (no such annotation)
-                 */
                 if (am != null) {
                     _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
                 } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
+// buggy code
+//                        mixIns.add(_constructMethod(m));
+//                    } else {
+//                        mixIns.add(_constructMethod(m, true));
+//                    }
+                    mixIns.add(_constructMethod(m, true));
+                } else {
                     mixIns.add(_constructMethod(m));
                 }
             }
         }
     }
