diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/95261d43-dace-4a65-82b1-3cad00279e5d_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/43b361e2-700e-467c-9a5c-a8d2091b68c1_fixed.java
index 710fcc0..f5a9f18 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/95261d43-dace-4a65-82b1-3cad00279e5d_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/43b361e2-700e-467c-9a5c-a8d2091b68c1_fixed.java
@@ -1,37 +1,37 @@
     Object returnValueFor(Class<?> type) {
         if (Primitives.isPrimitiveOrWrapper(type)) {
             return Primitives.defaultValueForPrimitiveOrWrapper(type);
-            //new instances are used instead of Collections.emptyList(), etc.
-            //to avoid UnsupportedOperationException if code under test modifies returned collection
+// buggy code
+       } else if (type == Boolean.class) {
+            return Boolean.FALSE;
         } else if (type == Collection.class) {
             return new LinkedList<Object>();
         } else if (type == Set.class) {
             return new HashSet<Object>();
         } else if (type == HashSet.class) {
             return new HashSet<Object>();
         } else if (type == SortedSet.class) {
             return new TreeSet<Object>();
         } else if (type == TreeSet.class) {
             return new TreeSet<Object>();
         } else if (type == LinkedHashSet.class) {
             return new LinkedHashSet<Object>();
         } else if (type == List.class) {
             return new LinkedList<Object>();
         } else if (type == LinkedList.class) {
             return new LinkedList<Object>();
         } else if (type == ArrayList.class) {
             return new ArrayList<Object>();
         } else if (type == Map.class) {
             return new HashMap<Object, Object>();
         } else if (type == HashMap.class) {
             return new HashMap<Object, Object>();
         } else if (type == SortedMap.class) {
             return new TreeMap<Object, Object>();
         } else if (type == TreeMap.class) {
             return new TreeMap<Object, Object>();
         } else if (type == LinkedHashMap.class) {
             return new LinkedHashMap<Object, Object>();
         }
-        //Let's not care about the rest of collections.
         return null;
     }
