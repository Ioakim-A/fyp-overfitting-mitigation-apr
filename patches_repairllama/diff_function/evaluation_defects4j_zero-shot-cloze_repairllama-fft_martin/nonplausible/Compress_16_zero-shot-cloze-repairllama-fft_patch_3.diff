diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4bdf07bd-6af5-45fe-8a9f-876acbaf31f2_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/5797d3cd-87d9-406b-8441-9deb910ff1b3_fixed.java
index 1449592..a5e758d 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4bdf07bd-6af5-45fe-8a9f-876acbaf31f2_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/5797d3cd-87d9-406b-8441-9deb910ff1b3_fixed.java
@@ -1,62 +1,75 @@
     public ArchiveInputStream createArchiveInputStream(final InputStream in)
             throws ArchiveException {
         if (in == null) {
             throw new IllegalArgumentException("Stream must not be null.");
         }
-
         if (!in.markSupported()) {
             throw new IllegalArgumentException("Mark is not supported.");
         }
-
         final byte[] signature = new byte[12];
         in.mark(signature.length);
         try {
             int signatureLength = in.read(signature);
             in.reset();
             if (ZipArchiveInputStream.matches(signature, signatureLength)) {
                 return new ZipArchiveInputStream(in);
             } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
                 return new JarArchiveInputStream(in);
             } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
                 return new ArArchiveInputStream(in);
             } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
                 return new CpioArchiveInputStream(in);
             }
-
-            // Dump needs a bigger buffer to check the signature;
             final byte[] dumpsig = new byte[32];
             in.mark(dumpsig.length);
             signatureLength = in.read(dumpsig);
             in.reset();
             if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
                 return new DumpArchiveInputStream(in);
             }
-
-            // Tar needs an even bigger buffer to check the signature; read the first block
             final byte[] tarheader = new byte[512];
             in.mark(tarheader.length);
             signatureLength = in.read(tarheader);
             in.reset();
             if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
                 return new TarArchiveInputStream(in);
             }
-            // COMPRESS-117 - improve auto-recognition
             if (signatureLength >= 512) {
                 try {
                     TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-                    // COMPRESS-191 - verify the header checksum
-                    tais.getNextEntry();
+// buggy code
+//                    tais.getNextEntry();
+//                        return new TarArchiveInputStream(in);
+                   if (tais.getNextEntry() != null) {
                         return new TarArchiveInputStream(in);
-                } catch (Exception e) { // NOPMD
-                    // can generate IllegalArgumentException as well
-                    // as IOException
-                    // autodetection, simply not a TAR
-                    // ignored
+                    }
+                } catch (Exception e) { 
+                }
+                try {
+                    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(signature));
+                    if (zais.getNextEntry() != null) {
+                        return new ZipArchiveInputStream(in);
+                    }
+                } catch (Exception e) { 
+                }
+                try {
+                    JarArchiveInputStream jais = new JarArchiveInputStream(new ByteArrayInputStream(signature));
+                    if (jais.getNextEntry() != null) {
+                        return new JarArchiveInputStream(in);
+                    }
+                } catch (Exception e) { 
+                }
+                try {
+                    ArArchiveInputStream aais = new ArArchiveInputStream(new ByteArrayInputStream(signature));
+                    if (aais.getNextEntry() != null) {
+                        return new ArArchiveInputStream(in);
+                    }
+                }
+                } catch (Exception e) { 
                 }
             }
         } catch (IOException e) {
             throw new ArchiveException("Could not use reset and mark operations.", e);
         }
-
         throw new ArchiveException("No Archiver found for the stream signature");
     }
