diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f2009e35-9d16-4ac2-b71e-2736c136e45b_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f4931cf6-7698-4448-92cd-7bbb9580821a_fixed.java
index ab7017e..c117399 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f2009e35-9d16-4ac2-b71e-2736c136e45b_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f4931cf6-7698-4448-92cd-7bbb9580821a_fixed.java
@@ -1,24 +1,41 @@
     public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {
         if (hoursOffset == 0 && minutesOffset == 0) {
             return DateTimeZone.UTC;
         }
         if (hoursOffset < -23 || hoursOffset > 23) {
             throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
         }
-        if (minutesOffset < 0 || minutesOffset > 59) {
+// buggy code
+//        if (minutesOffset < 0 || minutesOffset > 59) {
+//            throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);
+//        }
+//        int offset = 0;
+//        try {
+//            int hoursInMinutes = hoursOffset * 60;
+//            if (hoursInMinutes < 0) {
+//                minutesOffset = hoursInMinutes - minutesOffset;
+//            } else {
+//                minutesOffset = hoursInMinutes + minutesOffset;
+//            }
+//            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
+//        } catch (ArithmeticException ex) {
+//            throw new IllegalArgumentException("Offset is too large");
+//        }
+        if (minutesOffset < 0) {
             throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);
         }
         int offset = 0;
         try {
             int hoursInMinutes = hoursOffset * 60;
             if (hoursInMinutes < 0) {
                 minutesOffset = hoursInMinutes - minutesOffset;
+
             } else {
                 minutesOffset = hoursInMinutes + minutesOffset;
             }
             offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
         } catch (ArithmeticException ex) {
             throw new IllegalArgumentException("Offset is too large");
         }
         return forOffsetMillis(offset);
     }
