diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/28e611ef-f7d3-425e-bc4e-74015297b44a_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e3724770-bb12-402c-9a82-265ba91c2d9b_fixed.java
index 42b7715..79c26a2 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/28e611ef-f7d3-425e-bc4e-74015297b44a_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e3724770-bb12-402c-9a82-265ba91c2d9b_fixed.java
@@ -1,22 +1,24 @@
   protected void declareNameInScope(FlowScope scope, Node node, JSType type) {
     switch (node.getType()) {
       case Token.NAME:
         scope.inferSlotType(node.getString(), type);
         break;
-
       case Token.GETPROP:
         String qualifiedName = node.getQualifiedName();
         Preconditions.checkNotNull(qualifiedName);
-
         JSType origType = node.getJSType();
         origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
         scope.inferQualifiedSlot(node, qualifiedName, origType, type);
         break;
-
-        // "this" references aren't currently modeled in the CFG.
+// buggy code
+     case Token.GETELEM:
+        JSType origType = node.getJSType();
+        origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
+        scope.inferQualifiedSlot(node, node.getQualifiedName(), origType, type);
+        break;
 
       default:
         throw new IllegalArgumentException("Node cannot be refined. \n" +
             node.toStringTree());
     }
   }
