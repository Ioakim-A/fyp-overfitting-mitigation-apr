diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/389967e6-41a0-49fc-b1ed-22c6b6655ca9_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/536cf98b-19c0-4f00-b41e-2b45b63e440f_fixed.java
index b108107..5f07a77 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/389967e6-41a0-49fc-b1ed-22c6b6655ca9_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/536cf98b-19c0-4f00-b41e-2b45b63e440f_fixed.java
@@ -1,25 +1,41 @@
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
-
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
-    if (constraintObj != null && constraintObj.isRecordType()) {
+// buggy code
+//    if (constraintObj != null && constraintObj.isRecordType()) {
+//      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
+//      if (objType != null) {
+//        for (String prop : constraintObj.getOwnPropertyNames()) {
+//          JSType propType = constraintObj.getPropertyType(prop);
+//          if (!objType.isPropertyTypeDeclared(prop)) {
+//            JSType typeToInfer = propType;
+//            if (!objType.hasProperty(prop)) {
+//              typeToInfer =
+//                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+//            }
+//            objType.defineInferredProperty(prop, typeToInfer, null);
+//          }
+//        }
+//      }
+//    }
+    if (constraintObj != null && constraintObj.isObject()) {
       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
       if (objType != null) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
           JSType propType = constraintObj.getPropertyType(prop);
           if (!objType.isPropertyTypeDeclared(prop)) {
             JSType typeToInfer = propType;
             if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);
             }
             objType.defineInferredProperty(prop, typeToInfer, null);
           }
         }
       }
+
     }
   }
