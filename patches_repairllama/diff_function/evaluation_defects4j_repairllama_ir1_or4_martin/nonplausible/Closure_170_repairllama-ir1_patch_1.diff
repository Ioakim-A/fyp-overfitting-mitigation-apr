diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/93ff8dc2-0d5d-4ff5-b485-793cfdb97070_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4c6481f7-88a5-40b1-be70-9b7d63c1290d_fixed.java
index a0eee42..8cd511a 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/93ff8dc2-0d5d-4ff5-b485-793cfdb97070_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4c6481f7-88a5-40b1-be70-9b7d63c1290d_fixed.java
@@ -1,25 +1,15 @@
-    private void getNumUseInUseCfgNode(final Node cfgNode) {
-
+    public void getNumUseInUseCfgNode(final Node cfgNode) {
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
-
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
           if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
               !(parent.isAssign() &&
                (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
               numUsesWithinCfgNode++;
           }
         }
-
       };
-
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
