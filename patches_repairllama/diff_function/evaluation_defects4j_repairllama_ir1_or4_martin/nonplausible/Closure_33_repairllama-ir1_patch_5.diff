diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/acb05f17-f655-47d8-be83-356dd0775a05_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/ef8ce72b-8618-4aa2-b26d-2d36407e8031_fixed.java
index 370507c..1f65b8f 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/acb05f17-f655-47d8-be83-356dd0775a05_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/ef8ce72b-8618-4aa2-b26d-2d36407e8031_fixed.java
@@ -1,26 +1,8 @@
   public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
-
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraintObj.isRecordType()) {
+    if (constraintObj != null && constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
-          }
-          defineInferredProperty(prop, typeToInfer, null);
-        }
-      }
-    }
+          if (!hasProperty(    }
   }
