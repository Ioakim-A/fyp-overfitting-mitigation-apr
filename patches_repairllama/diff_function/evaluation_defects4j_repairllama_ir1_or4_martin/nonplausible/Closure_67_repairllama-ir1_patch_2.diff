diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/665dfb6c-c488-4cd9-b0ba-baafc04dc69c_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2dfb80a2-1e6e-4cc8-b737-59eee8fa5ee6_fixed.java
index 939f49b..350d3a1 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/665dfb6c-c488-4cd9-b0ba-baafc04dc69c_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2dfb80a2-1e6e-4cc8-b737-59eee8fa5ee6_fixed.java
@@ -1,21 +1,33 @@
     private boolean isPrototypePropertyAssign(Node assign) {
       Node n = assign.getFirstChild();
       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
           && n.getType() == Token.GETPROP
           ) {
-        // We want to exclude the assignment itself from the usage list
         boolean isChainedProperty =
             n.getFirstChild().getType() == Token.GETPROP;
-
         if (isChainedProperty) {
           Node child = n.getFirstChild().getFirstChild().getNext();
-
           if (child.getType() == Token.STRING &&
               child.getString().equals("prototype")) {
             return true;
           }
         }
       }
-
+      return false;
+    private boolean isPrototypePropertyAssign(Node assign) {
+      Node n = assign.getFirstChild();
+      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
+          && n.getType() == Token.GETPROP
+          ) {
+        boolean isChainedProperty =
+            n.getFirstChild().getType() == Token.GETPROP;
+        if (isChainedProperty) {
+          Node child = n.getFirstChild().getFirstChild().getNext();
+          if (child.getType() == Token.STRING &&
+              child.getString().equals("prototype")) {
+            return true;
+          }
+        }
+      }
       return false;
     }
