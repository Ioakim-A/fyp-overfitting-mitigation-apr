diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/3d677a26-ddf2-4b89-827a-3de55db95203_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d800b9e0-1f03-4da5-8dc0-7d9dfbf6a5a0_fixed.java
index 5edb8df..aaca87f 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/3d677a26-ddf2-4b89-827a-3de55db95203_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d800b9e0-1f03-4da5-8dc0-7d9dfbf6a5a0_fixed.java
@@ -1,61 +1,38 @@
-  private CanInlineResult canInlineReferenceDirectly(
+  public CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
-
     Node block = fnNode.getLastChild();
-
-
-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
-
-    // Functions called via 'call' and 'apply' have a this-object as
-    // the first parameter, but this is not part of the called function's
-    // parameter list.
     if (!callNode.getFirstChild().isName()) {
       if (NodeUtil.isFunctionObjectCall(callNode)) {
-        // TODO(johnlenz): Support replace this with a value.
         if (cArg == null || !cArg.isThis()) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       } else {
-        // ".apply" call should be filtered before this.
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
-
-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
     while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
       if (fnParam != null) {
         if (cArg != null) {
-
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
           if (NodeUtil.mayEffectMutableState(cArg, compiler)
               && NodeUtil.getNameReferenceCount(
                   block, fnParam.getString()) > 1) {
             return CanInlineResult.NO;
           }
         }
-
-        // Move to the next name.
         fnParam = fnParam.getNext();
       }
-
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
       if (cArg != null) {
         if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       }
     }
-
     return CanInlineResult.YES;
   }
