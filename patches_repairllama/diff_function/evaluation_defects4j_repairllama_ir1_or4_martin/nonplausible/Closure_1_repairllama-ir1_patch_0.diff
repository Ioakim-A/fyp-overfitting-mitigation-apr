diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d97ad5c8-640f-461f-ae4c-dee65df24a78_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9e6c66f0-90fe-4846-8283-39c3d06de82b_fixed.java
index cdfd827..4f8de86 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d97ad5c8-640f-461f-ae4c-dee65df24a78_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9e6c66f0-90fe-4846-8283-39c3d06de82b_fixed.java
@@ -1,38 +1,48 @@
   private void removeUnreferencedFunctionArgs(Scope fnScope) {
-    // Notice that removing unreferenced function args breaks
-    // Function.prototype.length. In advanced mode, we don't really care
-    // about this: we consider "length" the equivalent of reflecting on
-    // the function's lexical source.
-    //
-    // Rather than create a new option for this, we assume that if the user
-    // is removing globals, then it's OK to remove unused function args.
-    //
-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253
-
     Node function = fnScope.getRootNode();
-
     Preconditions.checkState(function.isFunction());
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
-      // The parameters object literal setters can not be removed.
       return;
     }
-
     Node argList = getFunctionArgList(function);
     boolean modifyCallers = modifyCallSites
         && callSiteOptimizer.canModifyCallers(function);
     if (!modifyCallers) {
-      // Strip unreferenced args off the end of the function declaration.
+      Node lastArg;
+      while ((lastArg = argList.getLastChild()) != null) {
+        Var var = fnScope.getVar(lastArg.getString());
+        if (!referenced.contains(var)) {
+          argList.removeChild(lastArg);
+          compiler.reportCodeChange();
+        } else {
+          break;
+        }
+      }
+    } else {
+      callSiteOptimizer.optimize(fnScope, referenced);
+    }
+  }
+  private void removeUnreferencedFunctionArgs(Scope fnScope) {
+    Node function = fnScope.getRootNode();
+    Preconditions.checkState(function.isFunction());
+    if (NodeUtil.isGetOrSetKey(function.getParent())) {
+      return;
+    }
+    Node argList = getFunctionArgList(function);
+    boolean modifyCallers = modifyCallSites
+        && callSiteOptimizer.canModifyCallers(function);
+    if (!modifyCallers) {
       Node lastArg;
       while ((lastArg = argList.getLastChild()) != null) {
         Var var = fnScope.getVar(lastArg.getString());
         if (!referenced.contains(var)) {
           argList.removeChild(lastArg);
           compiler.reportCodeChange();
         } else {
           break;
         }
       }
     } else {
       callSiteOptimizer.optimize(fnScope, referenced);
     }
   }
