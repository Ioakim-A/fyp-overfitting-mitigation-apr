diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a6a6fafa-28ea-4b3a-89d3-d61d10375d17_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/67423356-5015-4004-8e5b-cb50b5cf3a01_fixed.java
index d4e6d48..e3ef775 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a6a6fafa-28ea-4b3a-89d3-d61d10375d17_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/67423356-5015-4004-8e5b-cb50b5cf3a01_fixed.java
@@ -1,23 +1,33 @@
   private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
     if (callTarget != null && callTarget.isName() &&
           callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
+      Node value = callTarget.getNext();
+      if (value != null) {
+        Node addition = IR.add(
+            IR.string("").srcref(callTarget),
+            value.detachFromParent());
+        n.getParent().replaceChild(n, addition);
+        reportCodeChange();
+        return addition;
+      }
+    }
+    return n;
+  private Node tryFoldSimpleFunctionCall(Node n) {
+    Preconditions.checkState(n.isCall());
+    Node callTarget = n.getFirstChild();
+    if (callTarget != null && callTarget.isName() &&
+          callTarget.getString().equals("String")) {
       Node value = callTarget.getNext();
       if (value != null) {
         Node addition = IR.add(
             IR.string("").srcref(callTarget),
             value.detachFromParent());
         n.getParent().replaceChild(n, addition);
         reportCodeChange();
         return addition;
       }
     }
     return n;
   }
