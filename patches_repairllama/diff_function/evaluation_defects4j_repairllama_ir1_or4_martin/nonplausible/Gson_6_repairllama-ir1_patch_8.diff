diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2c155b76-d439-41fe-8554-a873e6b97d8b_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/67fa9c80-1d2b-4c4f-87b3-349752a9110f_fixed.java
index dde7e35..bb8ca7e 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2c155b76-d439-41fe-8554-a873e6b97d8b_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/67fa9c80-1d2b-4c4f-87b3-349752a9110f_fixed.java
@@ -1,19 +1,24 @@
+  static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
+      TypeToken<?> fieldType, JsonAdapter annotation) {
+    if (annotation == null) {
+      return null;
+    }
   static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
       TypeToken<?> fieldType, JsonAdapter annotation) {
     Class<?> value = annotation.value();
     TypeAdapter<?> typeAdapter;
     if (TypeAdapter.class.isAssignableFrom(value)) {
       Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
     } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
       Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
           .construct()
           .create(gson, fieldType);
     } else {
       throw new IllegalArgumentException(
           "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
     }
       typeAdapter = typeAdapter.nullSafe();
     return typeAdapter;
   }
