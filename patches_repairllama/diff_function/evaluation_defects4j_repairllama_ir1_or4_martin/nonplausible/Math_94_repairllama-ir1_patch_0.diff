diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/ec821e65-26f0-466d-83a8-66c09ef891a7_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/65239601-a6bb-40f4-abb3-406b40fd9136_fixed.java
index bdaabd2..17ea8bb 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/ec821e65-26f0-466d-83a8-66c09ef891a7_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/65239601-a6bb-40f4-abb3-406b40fd9136_fixed.java
@@ -1,50 +1,33 @@
-    public static int gcd(int u, int v) {
+    public static long gcd(long u, long v) {
         if (u * v == 0) {
             return (Math.abs(u) + Math.abs(v));
         }
-        // keep u and v negative, as negative integers range down to
-        // -2^31, while positive numbers can only be as large as 2^31-1
-        // (i.e. we can't necessarily negate a negative number without
-        // overflow)
-        /* assert u!=0 && v!=0; */
         if (u > 0) {
             u = -u;
-        } // make u negative
+        } 
         if (v > 0) {
             v = -v;
-        } // make v negative
-        // B1. [Find power of 2]
+        } 
         int k = 0;
-        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
-                                                            // both even...
+        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { 
             u /= 2;
             v /= 2;
-            k++; // cast out twos.
+            k++; 
         }
         if (k == 31) {
             throw new ArithmeticException("overflow: gcd is 2^31");
         }
-        // B2. Initialize: u and v have been divided by 2^k and at least
-        // one is odd.
-        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
-        // t negative: u was odd, v may be even (t replaces v)
-        // t positive: u was even, v is odd (t replaces u)
+        int t = ((u & 1) == 1) ? v : -(u / 2);
         do {
-            /* assert u<0 && v<0; */
-            // B4/B3: cast out twos from t.
-            while ((t & 1) == 0) { // while t is even..
-                t /= 2; // cast out twos
+            while ((t & 1) == 0) { 
+                t /= 2; 
             }
-            // B5 [reset max(u,v)]
             if (t > 0) {
                 u = -t;
             } else {
                 v = t;
             }
-            // B6/B3. at this point both u and v should be odd.
             t = (v - u) / 2;
-            // |u| larger: t positive (replace u)
-            // |v| larger: t negative (replace v)
         } while (t != 0);
-        return -u * (1 << k); // gcd is u*2^k
+        return -u * (1 << k); 
     }
