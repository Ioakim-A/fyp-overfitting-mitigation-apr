diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2b41959e-c013-4fc7-85d0-869c3ccf7094_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6da92af3-4e35-42ed-b940-278389db1388_fixed.java
index dc93be3..d3a9440 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2b41959e-c013-4fc7-85d0-869c3ccf7094_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6da92af3-4e35-42ed-b940-278389db1388_fixed.java
@@ -1,14 +1,17 @@
+    private Element insertEmpty(Token.StartTag startTag) {
+        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
+        insert(el);
+        tokeniser.emit(new Token.EndTag(el.tagName()));
+        return el;
+    }
     Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
         if (startTag.isSelfClosing()) {
             Element el = insertEmpty(startTag);
             stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+            tokeniser.emit(new Token.EndTag(el.tagName()));  
             return el;
         }
-        
         Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
         insert(el);
         return el;
     }
