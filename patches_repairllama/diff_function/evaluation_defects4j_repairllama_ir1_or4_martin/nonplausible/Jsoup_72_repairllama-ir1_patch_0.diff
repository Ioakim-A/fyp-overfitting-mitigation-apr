diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/7c32e2fb-24e7-4334-9d76-a7cb8399ec2a_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/7ee965a9-6c85-4696-8782-f1882e004c29_fixed.java
index 7b4f703..5da4ad8 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/7c32e2fb-24e7-4334-9d76-a7cb8399ec2a_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/7ee965a9-6c85-4696-8782-f1882e004c29_fixed.java
@@ -1,29 +1,23 @@
-    private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {
-        // limit (no cache):
+    public static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {
         if (count > maxStringCacheLen)
             return new String(charBuf, start, count);
-
-        // calculate hash:
         int hash = 0;
         int offset = start;
         for (int i = 0; i < count; i++) {
             hash = 31 * hash + charBuf[offset++];
         }
-
-        // get from cache
         final int index = hash & stringCache.length - 1;
         String cached = stringCache[index];
-
-        if (cached == null) { // miss, add
+        if (cached == null) { 
             cached = new String(charBuf, start, count);
             stringCache[index] = cached;
-        } else { // hashcode hit, check equality
-            if (rangeEquals(charBuf, start, count, cached)) { // hit
+        } else { 
+            if (rangeEquals(charBuf, start, count, cached)) { 
                 return cached;
-            } else { // hashcode conflict
+            } else { 
                 cached = new String(charBuf, start, count);
-                stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again
+                stringCache[index] = cached; 
             }
         }
         return cached;
     }
