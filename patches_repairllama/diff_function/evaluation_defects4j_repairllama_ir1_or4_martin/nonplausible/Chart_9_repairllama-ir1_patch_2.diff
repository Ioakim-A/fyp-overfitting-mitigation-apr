diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e3bc10c9-4b74-4f35-9f9c-9de60c5f57df_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e6f0f53f-5bb1-4a67-859d-b9cb7c272ceb_fixed.java
index f6c07b1..3316163 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e3bc10c9-4b74-4f35-9f9c-9de60c5f57df_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e6f0f53f-5bb1-4a67-859d-b9cb7c272ceb_fixed.java
@@ -1,39 +1,37 @@
-    public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)
+    public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end) throws CloneNotSupportedException {
         throws CloneNotSupportedException {
-
         if (start == null) {
             throw new IllegalArgumentException("Null 'start' argument.");
         }
         if (end == null) {
             throw new IllegalArgumentException("Null 'end' argument.");
         }
         if (start.compareTo(end) > 0) {
             throw new IllegalArgumentException(
                     "Requires start on or before end.");
         }
         boolean emptyRange = false;
         int startIndex = getIndex(start);
         if (startIndex < 0) {
             startIndex = -(startIndex + 1);
             if (startIndex == this.data.size()) {
-                emptyRange = true;  // start is after last data item
+                emptyRange = true;  
             }
         }
         int endIndex = getIndex(end);
-        if (endIndex < 0) {             // end period is not in original series
-            endIndex = -(endIndex + 1); // this is first item AFTER end period
-            endIndex = endIndex - 1;    // so this is last item BEFORE end
+        if (endIndex < 0) {             
+            endIndex = -(endIndex + 1); 
+            endIndex = endIndex - 1;    
         }
         if (endIndex < 0) {
             emptyRange = true;
         }
         if (emptyRange) {
             TimeSeries copy = (TimeSeries) super.clone();
             copy.data = new java.util.ArrayList();
             return copy;
         }
         else {
             return createCopy(startIndex, endIndex);
         }
-
     }
