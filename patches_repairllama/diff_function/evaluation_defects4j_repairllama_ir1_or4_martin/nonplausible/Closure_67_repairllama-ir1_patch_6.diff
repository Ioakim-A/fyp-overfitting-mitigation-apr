diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/8c3574c3-b75e-411b-ae9f-c28d5ca2a02e_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2d4b3af8-d15e-4a6e-96b3-801fece10582_fixed.java
index 939f49b..2519ed1 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/8c3574c3-b75e-411b-ae9f-c28d5ca2a02e_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2d4b3af8-d15e-4a6e-96b3-801fece10582_fixed.java
@@ -1,21 +1,31 @@
+    private boolean isPrototypePropertyAssign(Node assign) {
+      Node n = assign.getFirstChild();
+      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
+          && n.getType() == Token.GETPROP
+          && n.getFirstChild().getType() == Token.GETPROP
+          ) {
+        Node child = n.getFirstChild().getFirstChild().getNext();
+        if (child.getType() == Token.STRING &&
+            child.getString().equals("prototype")) {
+          return true;
+        }
+      }
+      return false;
+    }
     private boolean isPrototypePropertyAssign(Node assign) {
       Node n = assign.getFirstChild();
       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
           && n.getType() == Token.GETPROP
           ) {
-        // We want to exclude the assignment itself from the usage list
         boolean isChainedProperty =
             n.getFirstChild().getType() == Token.GETPROP;
-
         if (isChainedProperty) {
           Node child = n.getFirstChild().getFirstChild().getNext();
-
           if (child.getType() == Token.STRING &&
               child.getString().equals("prototype")) {
             return true;
           }
         }
       }
-
       return false;
     }
