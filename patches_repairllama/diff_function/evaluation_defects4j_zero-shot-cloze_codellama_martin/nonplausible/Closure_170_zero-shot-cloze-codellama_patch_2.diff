diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/8ef8deb2-b3b7-487d-86ae-12b48011fd78_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0f57c669-0704-4025-b71c-8958f908e6b0_fixed.java
index a0eee42..d13447b 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/8ef8deb2-b3b7-487d-86ae-12b48011fd78_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0f57c669-0704-4025-b71c-8958f908e6b0_fixed.java
@@ -1,25 +1,13 @@
     private void getNumUseInUseCfgNode(final Node cfgNode) {
-
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
-
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
-              numUsesWithinCfgNode++;
+         if (n.isName()) {
+            ++numUsesWithinCfgNode;
           }
         }
-
       };
-
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
