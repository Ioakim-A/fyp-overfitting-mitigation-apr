diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2e47b1e7-990f-432f-b38a-4d3b93bd10b6_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/7af2b458-ca2f-4ca0-bb44-0d8cde6dc22c_fixed.java
index de25498..dd3a307 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2e47b1e7-990f-432f-b38a-4d3b93bd10b6_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/7af2b458-ca2f-4ca0-bb44-0d8cde6dc22c_fixed.java
@@ -1,101 +1,42 @@
     protected double acceptStep(final AbstractStepInterpolator interpolator,
                                 final double[] y, final double[] yDot, final double tEnd)
         throws MathIllegalStateException {
-
             double previousT = interpolator.getGlobalPreviousTime();
             final double currentT = interpolator.getGlobalCurrentTime();
-            resetOccurred = false;
-
-            // initialize the events states if needed
-            if (! statesInitialized) {
-                for (EventState state : eventsStates) {
-                    state.reinitializeBegin(interpolator);
-                }
-                statesInitialized = true;
-            }
-
-            // search for next events that may occur during the step
-            final int orderingSign = interpolator.isForward() ? +1 : -1;
-            SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
-
-                /** {@inheritDoc} */
-                public int compare(EventState es0, EventState es1) {
-                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
-                }
-
-            });
-
+           interpolator.setInterpolatedTime(currentT);
+            final double[] currentY = interpolator.getInterpolatedState();
             for (final EventState state : eventsStates) {
-                if (state.evaluateStep(interpolator)) {
-                    // the event occurs during the current step
-                    occuringEvents.add(state);
+                state.stepAccepted(currentT, currentY);
+                isLastStep = isLastStep || state.stop();
             }
-            }
-
-            while (!occuringEvents.isEmpty()) {
-
-                // handle the chronologically first event
-                final Iterator<EventState> iterator = occuringEvents.iterator();
-                final EventState currentEvent = iterator.next();
-                iterator.remove();
-
-                // restrict the interpolator to the first part of the step, up to the event
-                final double eventT = currentEvent.getEventTime();
-                interpolator.setSoftPreviousTime(previousT);
-                interpolator.setSoftCurrentTime(eventT);
-
-                // trigger the event
-                interpolator.setInterpolatedTime(eventT);
-                final double[] eventY = interpolator.getInterpolatedState();
-                currentEvent.stepAccepted(eventT, eventY);
-                isLastStep = currentEvent.stop();
-
-                // handle the first part of the step, up to the event
-                for (final StepHandler handler : stepHandlers) {
+            isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);
+            for (StepHandler handler : stepHandlers) {
                 handler.handleStep(interpolator, isLastStep);
             }
-
-                if (isLastStep) {
-                    // the event asked to stop integration
-                    System.arraycopy(eventY, 0, y, 0, y.length);
-                    return eventT;
+            for (final Event currentEvent : events) {
+                final double eventT = currentEvent.g(interpolator);
+                if (eventT >= tEnd) {
+                    return tEnd;
                 }
-
-                if (currentEvent.reset(eventT, eventY)) {
-                    // some event handler has triggered changes that
-                    // invalidate the derivatives, we need to recompute them
-                    System.arraycopy(eventY, 0, y, 0, y.length);
-                    computeDerivatives(eventT, y, yDot);
-                    resetOccurred = true;
+                if (eventT <= previousT) {
                     return eventT;
                 }
-
-                // prepare handling of the remaining part of the step
                 previousT = eventT;
                 interpolator.setSoftPreviousTime(eventT);
                 interpolator.setSoftCurrentTime(currentT);
-
-                // check if the same event occurs again in the remaining part of the step
                 if (currentEvent.evaluateStep(interpolator)) {
-                    // the event occurs during the current step
                     occuringEvents.add(currentEvent);
                 }
-
             }
-
             interpolator.setInterpolatedTime(currentT);
             final double[] currentY = interpolator.getInterpolatedState();
             for (final EventState state : eventsStates) {
                 state.stepAccepted(currentT, currentY);
                 isLastStep = isLastStep || state.stop();
             }
             isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);
-
-            // handle the remaining part of the step, after all events if any
             for (StepHandler handler : stepHandlers) {
                 handler.handleStep(interpolator, isLastStep);
             }
-
             return currentT;
-
     }
