diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d5c0f5c8-a3f2-4eb7-b557-cd5b2df152f1_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f13847e5-77a7-433a-be94-257566a57e48_fixed.java
index 5c5286c..a09c7a6 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d5c0f5c8-a3f2-4eb7-b557-cd5b2df152f1_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f13847e5-77a7-433a-be94-257566a57e48_fixed.java
@@ -1,6 +1,30 @@
     public <T> void resetMock(T mock) {
         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);
-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);
-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));
+       if (oldMockHandler != null) {
+            removeMockHandler(mock);
+        }
+        MockHandlerInterface<T> newMockHandler = new MockHandler<T>(mock);
+        addMockHandler(mock, newMockHandler);
+    }
+    
+    private <T> MockHandlerInterface<T> getMockHandler(T mock) {
+        return (MockHandlerInterface<T>) mockHandlerMap.get(mock);
+    }
+    
+    private <T> void addMockHandler(T mock, MockHandlerInterface<T> mockHandler) {
+        mockHandlerMap.put(mock, mockHandler);
+    }
+    
+    private <T> void removeMockHandler(T mock) {
+        MockHandlerInterface<T> mockHandler = getMockHandler(mock);
+        if (mockHandler != null) {
+            mockHandlerMap.remove(mock);
+        }
+    }
+    
+    @SuppressWarnings("unchecked")
+    public <T> void resetMockFilter(T mock) {
+        MockHandlerInterface<T> mockHandler = getMockHandler(mock);
+        if (mockHandler != null)
         ((Factory) mock).setCallback(0, newFilter);
     }
