diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/02ac082d-2824-4cd2-b097-db3b527ef3fd_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1c890cf2-bbd5-4c8a-b6de-d31f0316549a_fixed.java
index c50b3cc..e1ead5f 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/02ac082d-2824-4cd2-b097-db3b527ef3fd_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1c890cf2-bbd5-4c8a-b6de-d31f0316549a_fixed.java
@@ -1,23 +1,23 @@
     public Period normalizedStandard(PeriodType type) {
         type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
+        long millis = getMillis();  
         millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
         millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
         millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
         millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
         millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
         Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
         int years = getYears();
         int months = getMonths();
         if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
+           int newYears = result.getYears();
+            int newMonths = result.getMonths();
             if (years != 0) {
-                result = result.withYears(years);
+                newYears += years;
             }
             if (months != 0) {
-                result = result.withMonths(months);
+                newMonths += months;
             }
         }
         return result;
     }
