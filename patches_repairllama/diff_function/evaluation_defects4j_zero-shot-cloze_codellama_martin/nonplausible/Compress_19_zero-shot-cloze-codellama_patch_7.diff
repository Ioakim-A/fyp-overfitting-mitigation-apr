diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0b4560cd-afd2-41fa-9999-00879f29b2da_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9b0bbd43-5a36-4f3a-b318-fce60f9ef321_fixed.java
index af634a5..6c6433a 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0b4560cd-afd2-41fa-9999-00879f29b2da_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9b0bbd43-5a36-4f3a-b318-fce60f9ef321_fixed.java
@@ -1,39 +1,40 @@
     public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                             boolean hasCompressedSize,
                                             boolean hasRelativeHeaderOffset,
                                             boolean hasDiskStart)
         throws ZipException {
         if (rawCentralDirectoryData != null) {
             int expectedLength = (hasUncompressedSize ? DWORD : 0)
                 + (hasCompressedSize ? DWORD : 0)
                 + (hasRelativeHeaderOffset ? DWORD : 0)
                 + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
+
+            if (expectedLength != rawCentralDirectoryData.length) {
                 throw new ZipException("central directory zip64 extended"
                                        + " information extra field's length"
                                        + " doesn't match central directory"
                                        + " data.  Expected length "
                                        + expectedLength + " but is "
                                        + rawCentralDirectoryData.length);
             }
             int offset = 0;
             if (hasUncompressedSize) {
                 size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
                 offset += DWORD;
             }
             if (hasCompressedSize) {
                 compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
                                                          offset);
                 offset += DWORD;
             }
             if (hasRelativeHeaderOffset) {
                 relativeHeaderOffset =
                     new ZipEightByteInteger(rawCentralDirectoryData, offset);
                 offset += DWORD;
             }
             if (hasDiskStart) {
                 diskStart = new ZipLong(rawCentralDirectoryData, offset);
                 offset += WORD;
             }
         }
     }
