diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/80eb9900-2e08-4ebc-a710-6e3399a6337d_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9fd4a25f-c3fc-49ca-b629-e35720a4a589_fixed.java
index 71189c3..cfa6f42 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/80eb9900-2e08-4ebc-a710-6e3399a6337d_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9fd4a25f-c3fc-49ca-b629-e35720a4a589_fixed.java
@@ -1,46 +1,35 @@
     public void validate(final WriteableCommandLine commandLine)
         throws OptionException {
-        // number of options found
         int present = 0;
-
-        // reference to first unexpected option
         Option unexpected = null;
-
         for (final Iterator i = options.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
-
-            // needs validation?
             boolean validate = option.isRequired() || option instanceof Group;
-            if (validate) {
-                option.validate(commandLine);
-            }
-
-            // if the child option is present then validate it
-            if (commandLine.hasOption(option)) {
-                if (++present > maximum) {
-                    unexpected = option;
-
+           if (option instanceof Group) {
+                final Group group = (Group) option;
+                for (final Iterator j = group.getOptions().iterator(); j.hasNext();) {
+                    final Option subOption = (Option) j.next();
+                    if (subOption.isPresent(commandLine)) {
+                        validate = true;
                         break;
                     }
-
+                }
+            }
+            if (option.isPresent(commandLine)) {
+                present++;
+                if (validate) {
                 option.validate(commandLine);
             }
         }
-
-        // too many options
         if (unexpected != null) {
             throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                       unexpected.getPreferredName());
         }
-
-        // too few option
         if (present < minimum) {
             throw new OptionException(this, ResourceConstants.MISSING_OPTION);
         }
-
-        // validate each anonymous argument
         for (final Iterator i = anonymous.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
             option.validate(commandLine);
         }
     }
