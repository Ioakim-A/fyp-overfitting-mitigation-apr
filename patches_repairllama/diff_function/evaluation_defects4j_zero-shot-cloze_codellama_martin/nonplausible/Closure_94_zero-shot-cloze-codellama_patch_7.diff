diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/453faa3d-8c8a-432e-8b99-6e22781d2bdd_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/61970411-d6c1-4c06-9405-2ecee40d1ba7_fixed.java
index 02afa2a..ff8256f 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/453faa3d-8c8a-432e-8b99-6e22781d2bdd_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/61970411-d6c1-4c06-9405-2ecee40d1ba7_fixed.java
@@ -1,28 +1,20 @@
   static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
       case Token.STRING:
       case Token.NUMBER:
       case Token.TRUE:
       case Token.FALSE:
         return true;
-
-      // Binary operators are only valid if both children are valid.
-      case Token.BITAND:
-      case Token.BITNOT:
-      case Token.BITOR:
-      case Token.BITXOR:
-
-      // Uniary operators are valid if the child is valid.
-      case Token.NOT:
-      case Token.NEG:
+     case Token.ARRAYLIT:
+        for (Node child = val.getFirstChild();
+             child != null;
+             child = child.getNext()) {
         return isValidDefineValue(val.getFirstChild(), defines);
-
-      // Names are valid if and only if they are defines themselves.
       case Token.NAME:
       case Token.GETPROP:
         if (val.isQualifiedName()) {
           return defines.contains(val.getQualifiedName());
         }
     }
     return false;
   }
