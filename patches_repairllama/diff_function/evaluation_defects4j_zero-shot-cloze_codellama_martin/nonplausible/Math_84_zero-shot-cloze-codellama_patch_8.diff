diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/42172531-6124-44b8-abb7-9ce7fb9480bc_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/57d63156-f95d-411b-97e1-5942399c68a5_fixed.java
index 50cbfb2..77d4e55 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/42172531-6124-44b8-abb7-9ce7fb9480bc_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/57d63156-f95d-411b-97e1-5942399c68a5_fixed.java
@@ -1,39 +1,26 @@
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
-
-        while (true) {
-
-            incrementIterationsCounter();
-
-            // save the original vertex
-            final RealPointValuePair[] original = simplex;
-            final RealPointValuePair best = original[0];
-
-            // perform a reflection step
-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
-            if (comparator.compare(reflected, best) < 0) {
-
-                // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
-                    simplex = reflectedSimplex;
+       for (int i = 0; i < simplex.length; i++) {
+            for (int j = 0; j < simplex.length; j++) {
+                if (i == j) {
+                    continue;
                 }
-
-                return;
-
+                for (int k = 0; k < simplex.length; k++) {
+                    if (i == k || j == k) {
+                        continue;
                     }
-
-            // compute the contracted simplex
-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
-                return;
+                    for (int l = 0; l < simplex.length; l++) {
+                        if (i == l || j == l || k == l) {
+                            continue;
                         }
-
+                        for (int m = 0; m < simplex.length; m++) {
+                            if (i == m || j == m || k == m || l == m) {
+                                continue;
+                            }
+                            for (int n = 0; n < simplex.length; n++) {
+                                if (i == n || j == n || k == n || l == n) {
+                                    continue;
+                                }
+                                for
         }
-
     }
