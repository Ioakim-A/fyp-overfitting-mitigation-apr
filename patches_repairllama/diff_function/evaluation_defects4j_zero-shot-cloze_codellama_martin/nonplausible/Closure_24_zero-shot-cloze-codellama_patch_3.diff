diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/debfe563-1ccb-4d3f-b9eb-df3090bd55a2_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4ac3de6e-98bf-4f5e-875a-aedbe83bdbc2_fixed.java
index 602226b..4583b3f 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/debfe563-1ccb-4d3f-b9eb-df3090bd55a2_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4ac3de6e-98bf-4f5e-875a-aedbe83bdbc2_fixed.java
@@ -1,26 +1,33 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
-        if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
-          String name = n.getString();
-          Var aliasVar = scope.getVar(name);
-          aliases.put(name, aliasVar);
-
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
-          transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
-        } else {
-          // TODO(robbyw): Support using locals for private variables.
-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+       switch (type) {
+          case Token.ASSIGN:
+            if (parent.getType() == Token.EXPR_RESULT) {
+              parent = parent.getParent();
             }
+            if (parent.getType() == Token.EXPR_RESULT) {
+              parent = parent.getParent();
             }
+            if (parent.getType() == Token.EXPR_RESULT) {
+              parent = parent.getParent();
+            }
+            if (parent.getType() == Token.EXPR_RESULT) {
+              parent = parent.getParent();
+            }
+            if (parent.getType() == Token.EXPR_RESULT) {
+              parent = parent.getParent();
+            }
+            if (parent.getType() == Token.EXPR_RESULT) {
+              parent = parent.getParent();
+            }
+            if (parent.getType() == Token.EXPR_RESULT) {
+              parent = parent.getParent();
+            }
+            if (parent.getType() == Token.EXPR_RESULT) {
+              if (parent.
       }
     }
