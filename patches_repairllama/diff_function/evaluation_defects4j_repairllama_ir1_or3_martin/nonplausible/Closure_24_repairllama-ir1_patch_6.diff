diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/bb1e366d-ca14-4236-98f0-c478fd0be1c5_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a14ed8ff-555a-449e-8057-1cc9811bae13_fixed.java
index 602226b..d2eefe2 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/bb1e366d-ca14-4236-98f0-c478fd0be1c5_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a14ed8ff-555a-449e-8057-1cc9811bae13_fixed.java
@@ -1,26 +1,6 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
-      for (Var v : scope.getVarIterable()) {
+      for (Var v : scope.getVars()) {
         Node n = v.getNode();
-        int type = n.getType();
-        Node parent = n.getParent();
-        if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
-          String name = n.getString();
-          Var aliasVar = scope.getVar(name);
-          aliases.put(name, aliasVar);
-
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
-          transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
-        } else {
-          // TODO(robbyw): Support using locals for private variables.
-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
-        }
-        }
              }
     }
