diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e5464f1e-c5fe-403e-a35b-4b4b755dc5e9_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2c1fea71-3e8c-49e8-8838-796450d148ac_fixed.java
index 9a8827e..fdcca92 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e5464f1e-c5fe-403e-a35b-4b4b755dc5e9_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2c1fea71-3e8c-49e8-8838-796450d148ac_fixed.java
@@ -1,27 +1,24 @@
   private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
       String functionName, HashMap<String, ObjectType> properties,
       HashMap<String, ObjectType> currentProperties,
       ObjectType interfaceType) {
     ObjectType implicitProto = interfaceType.getImplicitPrototype();
     Set<String> currentPropertyNames;
-      // This can be the case if interfaceType is proxy to a non-existent
-      // object (which is a bad type annotation, but shouldn't crash).
       currentPropertyNames = implicitProto.getOwnPropertyNames();
     for (String name : currentPropertyNames) {
       ObjectType oType = properties.get(name);
       if (oType != null) {
         if (!interfaceType.getPropertyType(name).isEquivalentTo(
             oType.getPropertyType(name))) {
-          compiler.report(
-              t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
+          compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
               functionName, name, oType.toString(),
               interfaceType.toString()));
         }
       }
       currentProperties.put(name, interfaceType);
     }
     for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
       checkInterfaceConflictProperties(t, n, functionName, properties,
           currentProperties, iType);
     }
   }
