diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e179a27f-ff10-41ed-8bfc-75759123782e_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d5a6b6f3-7d44-49f6-8c31-5b8340a717dd_fixed.java
index f74e742..74727d7 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e179a27f-ff10-41ed-8bfc-75759123782e_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d5a6b6f3-7d44-49f6-8c31-5b8340a717dd_fixed.java
@@ -1,24 +1,22 @@
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
-            throw new IllegalArgumentException("The Writer must not be null");
+            throw new IllegalArgumentException("The Writer must not be null", null);
         }
         if (input == null) {
             return;
         }
         int pos = 0;
         int len = input.length();
         while (pos < len) {
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
                 char[] c = Character.toChars(Character.codePointAt(input, pos));
                 out.write(c);
                 pos+= c.length;
                 continue;
             }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
             for (int pt = 0; pt < consumed; pt++) {
                 pos += Character.charCount(Character.codePointAt(input, pos));
             }
         }
     }
