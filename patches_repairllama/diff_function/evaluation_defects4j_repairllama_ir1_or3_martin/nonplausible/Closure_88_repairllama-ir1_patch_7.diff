diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e786b25e-3f00-4b5c-8d73-8607713cce4f_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/503f5c16-3e45-4e3d-8845-b268f01797e5_fixed.java
index ca2992e..535a2a8 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e786b25e-3f00-4b5c-8d73-8607713cce4f_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/503f5c16-3e45-4e3d-8845-b268f01797e5_fixed.java
@@ -1,25 +1,22 @@
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
-    if (NodeUtil.isName(n) && variable.equals(n.getString())) {
+    if (NodeUtil.isName(n)) {
+      if (variable.equals(n.getString())) {
         if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
           return VariableLiveness.KILL;
         } else {
           return VariableLiveness.READ;
         }
       }
-
-    // Expressions are evaluated left-right, depth first.
+    }
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { 
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
           return state;
         }
       }
     }
     return VariableLiveness.MAYBE_LIVE;
   }
