diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0630311b-fa72-483f-97e0-fef2dc093263_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/8313dddf-53ff-436c-a995-7e2a62a554cf_fixed.java
index 1c875ad..07f7626 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0630311b-fa72-483f-97e0-fef2dc093263_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/8313dddf-53ff-436c-a995-7e2a62a554cf_fixed.java
@@ -1,31 +1,12 @@
     public void captureArgumentsFrom(Invocation invocation) {
         if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
             throw new UnsupportedOperationException();
-
         } else {
             for (int position = 0; position < matchers.size(); position++) {
                 Matcher m = matchers.get(position);
                 if (m instanceof CapturesArguments) {
                     ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
                 }
             }
         }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
     }
