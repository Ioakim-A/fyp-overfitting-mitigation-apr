diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1be8ab0d-aab8-4cd9-bd1d-1a2b0891a8b5_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f8511d24-8000-4d0a-95bc-ca4607d7a16c_fixed.java
index af634a5..d21e3c4 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1be8ab0d-aab8-4cd9-bd1d-1a2b0891a8b5_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f8511d24-8000-4d0a-95bc-ca4607d7a16c_fixed.java
@@ -1,39 +1,38 @@
     public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                             boolean hasCompressedSize,
                                             boolean hasRelativeHeaderOffset,
                                             boolean hasDiskStart)
         throws ZipException {
         if (rawCentralDirectoryData != null) {
             int expectedLength = (hasUncompressedSize ? DWORD : 0)
                 + (hasCompressedSize ? DWORD : 0)
-                + (hasRelativeHeaderOffset ? DWORD : 0)
-                + (hasDiskStart ? WORD : 0);
+                + (hasRelativeHeaderOffset ? DWORD : 0);
             if (rawCentralDirectoryData.length != expectedLength) {
                 throw new ZipException("central directory zip64 extended"
                                        + " information extra field's length"
                                        + " doesn't match central directory"
                                        + " data.  Expected length "
                                        + expectedLength + " but is "
                                        + rawCentralDirectoryData.length);
             }
             int offset = 0;
             if (hasUncompressedSize) {
                 size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
                 offset += DWORD;
             }
             if (hasCompressedSize) {
                 compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
                                                          offset);
                 offset += DWORD;
             }
             if (hasRelativeHeaderOffset) {
                 relativeHeaderOffset =
                     new ZipEightByteInteger(rawCentralDirectoryData, offset);
                 offset += DWORD;
             }
             if (hasDiskStart) {
                 diskStart = new ZipLong(rawCentralDirectoryData, offset);
                 offset += WORD;
             }
         }
     }
