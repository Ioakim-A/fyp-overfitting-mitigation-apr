diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2497259b-df6b-4af7-ac6f-ae4464b84d34_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/fd703269-196c-4985-8bd4-61bb28d8783b_fixed.java
index 370507c..ece7811 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2497259b-df6b-4af7-ac6f-ae4464b84d34_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/fd703269-196c-4985-8bd4-61bb28d8783b_fixed.java
@@ -1,26 +1,15 @@
   public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
-
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
-        if (!isPropertyTypeDeclared(prop)) {
+        if (!isPropertyTypeDeclared(prop) && propType != null) {
           JSType typeToInfer = propType;
           if (!hasProperty(prop)) {
             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                 .getLeastSupertype(propType);
           }
           defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
