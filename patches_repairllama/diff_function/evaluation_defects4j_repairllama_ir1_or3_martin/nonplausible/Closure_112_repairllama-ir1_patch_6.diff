diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0135e586-c8c5-4d25-aa8d-11f92c361f13_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0b56b92a-6517-4ce8-a084-da235ff1e0e6_fixed.java
index 618a37c..0d178f3 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0135e586-c8c5-4d25-aa8d-11f92c361f13_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0b56b92a-6517-4ce8-a084-da235ff1e0e6_fixed.java
@@ -1,28 +1,18 @@
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
-    if (keys.isEmpty()) {
-      return false;
-    }
-
-    // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
-
-
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
-
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
-
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
-
     return replacer.madeChanges;
+  } else {
+    return false;
   }
