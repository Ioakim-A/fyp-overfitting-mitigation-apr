diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e4356515-8437-4403-bfc6-abaa0de4f212_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b68bda8f-52ef-4275-ac78-6d3b00cff1af_fixed.java
index c4e5233..156d359 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e4356515-8437-4403-bfc6-abaa0de4f212_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b68bda8f-52ef-4275-ac78-6d3b00cff1af_fixed.java
@@ -1,43 +1,18 @@
     public double solve(final UnivariateRealFunction f,
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
-
+        try {
             clearResult();
             verifySequence(min, initial, max);
-
-        // return the initial guess if it is good enough
             double yInitial = f.value(initial);
-        if (Math.abs(yInitial) <= functionValueAccuracy) {
-            setResult(initial, 0);
-            return result;
-        }
-
-        // return the first endpoint if it is good enough
-        double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
-
-        // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
-        }
-
-        // return the second endpoint if it is good enough
+            if (Math.abs(y        }
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
         }
-
-        // reduce interval if initial and max bracket the root
         if (yInitial * yMax < 0) {
             return solve(f, initial, yInitial, max, yMax, initial, yInitial);
         }
-
-
-        // full Brent algorithm starting with provided initial guess
         return solve(f, min, yMin, max, yMax, initial, yInitial);
-
     }
