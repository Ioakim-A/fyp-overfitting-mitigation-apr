diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/3b0425b7-1e9c-451a-90f0-c591f19d8e73_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f60831d6-9080-420d-b8c7-f14299f31e03_fixed.java
index 618a37c..ccf83f3 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/3b0425b7-1e9c-451a-90f0-c591f19d8e73_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f60831d6-9080-420d-b8c7-f14299f31e03_fixed.java
@@ -1,28 +1,18 @@
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
-
-    // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
-
-
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
-
-    FunctionType replacementFnType = fnType.visit(replacer)
-        .toMaybeFunctionType();
+    FunctionType replacementFnType = fnType.visit(replacer);
     Preconditions.checkNotNull(replacementFnType);
-
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
-
     return replacer.madeChanges;
   }
