diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/15fb5e4b-3e34-4703-8a7f-ce0a95d042bf_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d07b8878-deb8-4a74-85d5-fa2b95d78fab_fixed.java
index ab7017e..ed6405b 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/15fb5e4b-3e34-4703-8a7f-ce0a95d042bf_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d07b8878-deb8-4a74-85d5-fa2b95d78fab_fixed.java
@@ -1,24 +1,18 @@
     public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {
         if (hoursOffset == 0 && minutesOffset == 0) {
             return DateTimeZone.UTC;
         }
-        if (hoursOffset < -23 || hoursOffset > 23) {
-            throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
-        }
-        if (minutesOffset < 0 || minutesOffset > 59) {
-            throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);
-        }
         int offset = 0;
         try {
             int hoursInMinutes = hoursOffset * 60;
             if (hoursInMinutes < 0) {
                 minutesOffset = hoursInMinutes - minutesOffset;
             } else {
                 minutesOffset = hoursInMinutes + minutesOffset;
             }
             offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
         } catch (ArithmeticException ex) {
             throw new IllegalArgumentException("Offset is too large");
         }
         return forOffsetMillis(offset);
     }
