diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/731e5a34-ffd0-4b59-8602-473b375bb13e_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d00b8aa5-9697-4367-b68b-69009585bb4c_fixed.java
index 618a37c..61b9862 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/731e5a34-ffd0-4b59-8602-473b375bb13e_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d00b8aa5-9697-4367-b68b-69009585bb4c_fixed.java
@@ -1,28 +1,19 @@
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
-
-    // Try to infer the template types
-    Map<TemplateType, JSType> inferred =
-        inferTemplateTypesFromParameters(fnType, n);
-
-
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
+   Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(
+        fnType, n, keys);
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
-
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
-
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
-
     return replacer.madeChanges;
   }
