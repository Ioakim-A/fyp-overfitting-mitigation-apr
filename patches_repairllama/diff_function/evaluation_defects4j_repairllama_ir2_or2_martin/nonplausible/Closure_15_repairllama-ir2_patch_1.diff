diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9caa5a0a-de83-4e52-bbbe-2d32bb1542c0_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2f8a0b13-e584-40f1-9f4b-ac300573fa98_fixed.java
index 3110cf7..6d1bf99 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9caa5a0a-de83-4e52-bbbe-2d32bb1542c0_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2f8a0b13-e584-40f1-9f4b-ac300573fa98_fixed.java
@@ -1,26 +1,20 @@
       public boolean apply(Node n) {
-        // When the node is null it means, we reached the implicit return
-        // where the function returns (possibly without an return statement)
         if (n == null) {
           return false;
         }
-
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
         if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
           return true;
         }
-
         if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
           return true;
         }
-
-
+       if (n.isFunction()) {
+          return true;
+        }
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
             return true;
           }
         }
         return false;
       }
