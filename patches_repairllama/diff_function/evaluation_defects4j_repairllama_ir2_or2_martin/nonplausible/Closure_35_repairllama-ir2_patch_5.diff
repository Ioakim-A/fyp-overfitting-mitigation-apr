diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a7063ea6-91b8-4c5e-85a1-751129d21b82_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/38115e81-97f2-437d-9407-508d354b17a0_fixed.java
index b108107..bf2485f 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a7063ea6-91b8-4c5e-85a1-751129d21b82_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/38115e81-97f2-437d-9407-508d354b17a0_fixed.java
@@ -1,25 +1,22 @@
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
-
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
-    if (constraintObj != null && constraintObj.isRecordType()) {
    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
-      if (objType != null) {
+    if (objType != null && constraintObj != null && constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!objType.isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
           if (!objType.hasProperty(prop)) {
             typeToInfer =
                 getNativeType(VOID_TYPE).getLeastSupertype(propType);
           }
           objType.defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
-  }
