diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/7817e161-4df5-40b6-b2e0-dc2306b12114_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c58b0fec-a166-47ba-b5d8-ac734f2ec1b5_fixed.java
index 02afa2a..165c5f2 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/7817e161-4df5-40b6-b2e0-dc2306b12114_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c58b0fec-a166-47ba-b5d8-ac734f2ec1b5_fixed.java
@@ -1,28 +1,22 @@
   static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
       case Token.STRING:
       case Token.NUMBER:
       case Token.TRUE:
       case Token.FALSE:
         return true;
-
-      // Binary operators are only valid if both children are valid.
+     case Token.NEG:
+      case Token.NOT:
       case Token.BITAND:
       case Token.BITNOT:
       case Token.BITOR:
       case Token.BITXOR:
-
-      // Uniary operators are valid if the child is valid.
-      case Token.NOT:
-      case Token.NEG:
         return isValidDefineValue(val.getFirstChild(), defines);
-
-      // Names are valid if and only if they are defines themselves.
       case Token.NAME:
       case Token.GETPROP:
         if (val.isQualifiedName()) {
           return defines.contains(val.getQualifiedName());
         }
     }
     return false;
   }
