diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d082c7ad-70b1-4939-b79c-d8af1a8a084a_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4305e536-f45c-440e-b09b-55f2b5bfb6d4_fixed.java
index 7e6373a..ebdaf97 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d082c7ad-70b1-4939-b79c-d8af1a8a084a_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4305e536-f45c-440e-b09b-55f2b5bfb6d4_fixed.java
@@ -1,63 +1,52 @@
     protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
     {
         init();
         this.options = options;
-
-        // an iterator for the command line tokens
         Iterator iter = Arrays.asList(arguments).iterator();
-
-        // process each command line token
         while (iter.hasNext())
         {
-            // get the next command line token
             String token = (String) iter.next();
-
-            // handle long option --foo or --foo=bar
             if (token.startsWith("--"))
             {
-                if (token.indexOf('=') != -1)
+               if (token.indexOf('=') > 0)
                 {
                     tokens.add(token.substring(0, token.indexOf('=')));
                     tokens.add(token.substring(token.indexOf('=') + 1, token.length()));
                 }
                 else
                 {
                     tokens.add(token);
                 }
                 }
-
-            // single hyphen
+            }
             else if ("-".equals(token))
             {
                 tokens.add(token);
             }
             else if (token.startsWith("-"))
             {
                 if (token.length() == 2)
                 {
                     processOptionToken(token, stopAtNonOption);
                 }
                 else if (options.hasOption(token))
                 {
                     tokens.add(token);
                 }
-                // requires bursting
                 else
                 {
                     burstToken(token, stopAtNonOption);
                 }
             }
             else if (stopAtNonOption)
             {
                 process(token);
             }
             else
             {
                 tokens.add(token);
             }
-
             gobble(iter);
         }
-
         return (String[]) tokens.toArray(new String[tokens.size()]);
     }
