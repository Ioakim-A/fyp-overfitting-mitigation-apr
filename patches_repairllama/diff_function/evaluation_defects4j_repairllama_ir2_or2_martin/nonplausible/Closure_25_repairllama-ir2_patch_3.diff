diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e0cbc222-504c-4e84-9da6-df6eea23cf15_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e9fa4da4-47b7-4e37-956e-981d9dd448d5_fixed.java
index b98f0a7..549d001 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e0cbc222-504c-4e84-9da6-df6eea23cf15_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e9fa4da4-47b7-4e37-956e-981d9dd448d5_fixed.java
@@ -1,29 +1,27 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
-
+   if (n.getFirstChild() != null) {
       Node constructor = n.getFirstChild();
       scope = traverse(constructor, scope);
       JSType constructorType = constructor.getJSType();
       JSType type = null;
       if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
           type = getNativeType(UNKNOWN_TYPE);
         } else {
           FunctionType ct = constructorType.toMaybeFunctionType();
           if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
             ct = (FunctionType) constructorType;
           }
           if (ct != null && ct.isConstructor()) {
             type = ct.getInstanceType();
           }
         }
       }
       n.setJSType(type);
       for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
       }
+    }
     return scope;
   }
