diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/056e2340-c93a-4a69-98ec-8768ae36db2d_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/16594c9c-fb8b-45ec-a5b3-e192a8e91d94_fixed.java
index 370507c..c01b61a 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/056e2340-c93a-4a69-98ec-8768ae36db2d_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/16594c9c-fb8b-45ec-a5b3-e192a8e91d94_fixed.java
@@ -1,26 +1,16 @@
   public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
-
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
+   if (constraintObj == null) return;
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
           if (!hasProperty(prop)) {
             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                 .getLeastSupertype(propType);
           }
           defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
