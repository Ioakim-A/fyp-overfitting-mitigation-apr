diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c060681c-c0f6-481f-a990-bd1fb8fbc3a7_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e575e834-4167-4d53-9855-3a0bb71bb132_fixed.java
index d8ae7a4..6e6575b 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c060681c-c0f6-481f-a990-bd1fb8fbc3a7_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e575e834-4167-4d53-9855-3a0bb71bb132_fixed.java
@@ -1,43 +1,43 @@
     public void serializeAsColumn(Object bean, JsonGenerator jgen, SerializerProvider prov)
         throws Exception
     {
         Object value = get(bean);
-        if (value == null) { // nulls need specialized handling
+        if (value == null) { 
             if (_nullSerializer != null) {
                 _nullSerializer.serialize(null, jgen, prov);
-            } else { // can NOT suppress entries in tabular output
+            } else { 
                 jgen.writeNull();
             }
+       } else if (_nullSerializer != null) {
+            _nullSerializer.serialize(value, jgen, prov);
+            return;
         }
-        // otherwise find serializer to use
         JsonSerializer<Object> ser = _serializer;
         if (ser == null) {
             Class<?> cls = value.getClass();
             PropertySerializerMap map = _dynamicSerializers;
             ser = map.serializerFor(cls);
             if (ser == null) {
                 ser = _findAndAddDynamic(map, cls, prov);
             }
         }
-        // and then see if we must suppress certain values (default, empty)
         if (_suppressableValue != null) {
             if (MARKER_FOR_EMPTY == _suppressableValue) {
-                if (ser.isEmpty(value)) { // can NOT suppress entries in tabular output
+                if (ser.isEmpty(value)) { 
                     serializeAsPlaceholder(bean, jgen, prov);
                     return;
                 }
-            } else if (_suppressableValue.equals(value)) { // can NOT suppress entries in tabular output
+            } else if (_suppressableValue.equals(value)) { 
                 serializeAsPlaceholder(bean, jgen, prov);
                 return;
             }
         }
-        // For non-nulls: simple check for direct cycles
         if (value == bean) {
             _handleSelfReference(bean, ser);
         }
         if (_typeSerializer == null) {
             ser.serialize(value, jgen, prov);
         } else {
             ser.serializeWithType(value, jgen, prov, _typeSerializer);
         }
     }
