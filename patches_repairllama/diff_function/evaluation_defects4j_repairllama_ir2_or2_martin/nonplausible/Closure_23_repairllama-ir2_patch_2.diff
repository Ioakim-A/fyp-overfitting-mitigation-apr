diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/292ddf15-6683-460d-931f-c97f38736555_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/8abcd359-7c91-4bde-940e-963c171746e3_fixed.java
index cfdcd9c..919e9db 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/292ddf15-6683-460d-931f-c97f38736555_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/8abcd359-7c91-4bde-940e-963c171746e3_fixed.java
@@ -1,51 +1,39 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
-    // If GETPROP/GETELEM is used as assignment target the array literal is
-    // acting as a temporary we can't fold it here:
-    //    "[][0] += 1"
     if (isAssignmentTarget(n)) {
       return n;
     }
-
     if (!right.isNumber()) {
-      // Sometimes people like to use complex expressions to index into
-      // arrays, or strings to index into array methods.
       return n;
     }
-
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
-
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
-
     Node current = left.getFirstChild();
     Node elem = null;
-    for (int i = 0; current != null && i < intIndex; i++) {
+   int i = 0;
+    while (current != null && i < intIndex) {
       elem = current;
-
+      i++;
       current = current.getNext();
     }
-
     if (elem == null) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
-
     if (elem.isEmpty()) {
       elem = NodeUtil.newUndefinedNode(elem);
     } else {
       left.removeChild(elem);
     }
-
-    // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
   }
