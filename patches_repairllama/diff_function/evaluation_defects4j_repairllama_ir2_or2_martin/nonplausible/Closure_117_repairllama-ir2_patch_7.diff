diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d70cb053-26d8-4cd5-8160-090640f6e6ed_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/179e6322-9518-41bd-aaa2-b55c0990ac0c_fixed.java
index dfceb86..4ca9ef1 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d70cb053-26d8-4cd5-8160-090640f6e6ed_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/179e6322-9518-41bd-aaa2-b55c0990ac0c_fixed.java
@@ -1,54 +1,35 @@
   String getReadableJSTypeName(Node n, boolean dereference) {
-
-    // The best type name is the actual type name.
-
-    // If we're analyzing a GETPROP, the property may be inherited by the
-    // prototype chain. So climb the prototype chain and find out where
-    // the property was originally defined.
+   JSType type = getJSType(n);
+    if (dereference) {
+      ObjectType dereferenced = type.dereference();
+      if (dereferenced != null) {
+        type = dereferenced;
+      }
+    }
     if (n.isGetProp()) {
-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();
+      ObjectType objectType = type.dereference();
       if (objectType != null) {
         String propName = n.getLastChild().getString();
         if (objectType.getConstructor() != null &&
             objectType.getConstructor().isInterface()) {
           objectType = FunctionType.getTopDefiningInterface(
               objectType, propName);
         } else {
-          // classes
           while (objectType != null && !objectType.hasOwnProperty(propName)) {
             objectType = objectType.getImplicitPrototype();
           }
         }
-
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
         if (objectType != null &&
             (objectType.getConstructor() != null ||
              objectType.isFunctionPrototypeType())) {
           return objectType.toString() + "." + propName;
         }
-      }
-    }
-
-    JSType type = getJSType(n);
-    if (dereference) {
-      ObjectType dereferenced = type.dereference();
-      if (dereferenced != null) {
-        type = dereferenced;
-      }
-    }
-    if (type.isFunctionPrototypeType() ||
-        (type.toObjectType() != null &&
-         type.toObjectType().getConstructor() != null)) {
-      return type.toString();
-    }
     String qualifiedName = n.getQualifiedName();
     if (qualifiedName != null) {
       return qualifiedName;
     } else if (type.isFunctionType()) {
-      // Don't show complex function names.
       return "function";
     } else {
       return type.toString();
     }
   }
