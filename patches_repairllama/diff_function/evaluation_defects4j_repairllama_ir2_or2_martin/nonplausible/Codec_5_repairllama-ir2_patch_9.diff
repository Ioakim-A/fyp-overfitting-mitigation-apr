diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e0d600ab-f472-49e1-906f-38db9ebe7658_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/8b9a79b6-ae4b-4982-9069-c16f8823224e_fixed.java
index 5280b92..9b1ac8c 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e0d600ab-f472-49e1-906f-38db9ebe7658_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/8b9a79b6-ae4b-4982-9069-c16f8823224e_fixed.java
@@ -1,50 +1,47 @@
     void decode(byte[] in, int inPos, int inAvail) {
         if (eof) {
             return;
         }
         if (inAvail < 0) {
             eof = true;
         }
         for (int i = 0; i < inAvail; i++) {
             if (buffer == null || buffer.length - pos < decodeSize) {
                 resizeBuffer();
             }
             byte b = in[inPos++];
             if (b == PAD) {
-                // We're done.
                 eof = true;
                 break;
             } else {
                 if (b >= 0 && b < DECODE_TABLE.length) {
                     int result = DECODE_TABLE[b];
                     if (result >= 0) {
                         modulus = (++modulus) % 4;
                         x = (x << 6) + result;
                         if (modulus == 0) {
                             buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
                             buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
                             buffer[pos++] = (byte) (x & MASK_8BITS);
                         }
                     }
                 }
             }
         }
-
-        // Two forms of EOF as far as base64 decoder is concerned: actual
-        // EOF (-1) and first time '=' character is encountered in stream.
-        // This approach makes the '=' padding characters completely optional.
         if (eof && modulus != 0) {
-            
+           if (modulus == 1) {
+                x = x << 6;
+            }
             x = x << 6;
             switch (modulus) {
                 case 2 :
                     x = x << 6;
                     buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
                     break;
                 case 3 :
                     buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
                     buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
                     break;
             }
         }
     }
