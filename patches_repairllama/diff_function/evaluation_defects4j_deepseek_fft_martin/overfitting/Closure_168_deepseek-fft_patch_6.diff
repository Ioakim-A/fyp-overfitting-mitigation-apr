diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/151e31a9-46bc-4519-b78b-bc7b22f04421_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b3a7e76b-dc8b-44b2-a62a-c96b55bad886_fixed.java
index b12de99..a2844d6 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/151e31a9-46bc-4519-b78b-bc7b22f04421_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b3a7e76b-dc8b-44b2-a62a-c96b55bad886_fixed.java
@@ -1,52 +1,51 @@
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (t.inGlobalScope()) {
         return;
       }
-
       if (n.isReturn() && n.getFirstChild() != null) {
         data.get(t.getScopeRoot()).recordNonEmptyReturn();
       }
+// buggy code
+//      if (t.getScopeDepth() <= 2) {
+      if (t.getScopeDepth() <= 0) {
 
-      if (t.getScopeDepth() <= 2) {
         // The first-order function analyzer looks at two types of variables:
         //
         // 1) Local variables that are assigned in inner scopes ("escaped vars")
         //
         // 2) Local variables that are assigned more than once.
         //
         // We treat all global variables as escaped by default, so there's
         // no reason to do this extra computation for them.
         return;
       }
-
       if (n.isName() && NodeUtil.isLValue(n) &&
           // Be careful of bleeding functions, which create variables
           // in the inner scope, not the scope where the name appears.
           !NodeUtil.isBleedingFunctionName(n)) {
         String name = n.getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
           Scope ownerScope = var.getScope();
           if (ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode()).recordAssignedName(name);
           }
-
           if (scope != ownerScope && ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
           }
         }
       } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
           NodeUtil.isLValue(n)) {
         String name = NodeUtil.getRootOfQualifiedName(n).getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
           Scope ownerScope = var.getScope();
           if (scope != ownerScope && ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode())
                 .recordEscapedQualifiedName(n.getQualifiedName());
           }
         }
       }
     }
