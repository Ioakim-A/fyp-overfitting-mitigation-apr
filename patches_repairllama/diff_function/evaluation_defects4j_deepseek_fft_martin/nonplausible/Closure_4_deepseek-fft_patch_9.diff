diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/96ae5439-6a2f-4a71-8b49-20b86c07a586_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2b2ddb52-fe68-4a5a-9803-b7727a45b9c3_fixed.java
index d6a560a..130837a 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/96ae5439-6a2f-4a71-8b49-20b86c07a586_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2b2ddb52-fe68-4a5a-9803-b7727a45b9c3_fixed.java
@@ -1,33 +1,36 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
     // TODO(user): Investigate whether it is really necessary to keep two
     // different mechanisms for resolving named types, and if so, which order
     // makes more sense. Now, resolution via registry is first in order to
     // avoid triggering the warnings built into the resolution via properties.
     boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
-    if (resolved) {
-      super.resolveInternal(t, enclosing);
-      finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
-    }
-
+// buggy code
+//    if (detectImplicitPrototypeCycle()) {
+//      handleTypeCycle(t);
+//    }
+//    if (resolved) {
+//      super.resolveInternal(t, enclosing);
+//      finishPropertyContinuations();
+//      return registry.isLastGeneration() ?
+//          getReferencedType() : this;
+//    }
+//    resolveViaProperties(t, enclosing);
+//    if (detectImplicitPrototypeCycle()) {
+    if (!resolved) {
       resolveViaProperties(t, enclosing);
+    }
     if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
 
+      handleTypeCycle(t);
+    }
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
