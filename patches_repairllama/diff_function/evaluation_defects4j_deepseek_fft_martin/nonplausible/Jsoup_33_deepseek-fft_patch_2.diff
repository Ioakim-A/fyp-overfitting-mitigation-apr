diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/59b0b26d-ab8d-45b9-a814-e82ead29ab8d_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/ab087cf4-fb0e-4682-83af-854b1cb66e0e_fixed.java
index dc93be3..4379ae4 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/59b0b26d-ab8d-45b9-a814-e82ead29ab8d_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/ab087cf4-fb0e-4682-83af-854b1cb66e0e_fixed.java
@@ -1,14 +1,16 @@
     Element insert(Token.StartTag startTag) {
         // handle empty unknown tags
         // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
         if (startTag.isSelfClosing()) {
             Element el = insertEmpty(startTag);
             stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
-            return el;
-        }
+// buggy code
+            tokeniser.emit(new Token.EndTag(startTag.name()));
 
+            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+            return el;
+        }
         Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
         insert(el);
         return el;
     }
