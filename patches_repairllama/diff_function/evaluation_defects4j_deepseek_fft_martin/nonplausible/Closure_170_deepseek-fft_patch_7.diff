diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/3a33ac49-3d74-4cfa-8b81-6b733d4e60d1_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/43f8fed4-3a90-4814-aa62-d298123435ad_fixed.java
index 5abdeb5..75f64b4 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/3a33ac49-3d74-4cfa-8b81-6b733d4e60d1_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/43f8fed4-3a90-4814-aa62-d298123435ad_fixed.java
@@ -1,29 +1,31 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
-
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
-
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
+// buggy code
+//          if (n.isName() && n.getString().equals(varName) &&
+//            // We make a special exception when the entire cfgNode is a chain
+//            // of assignments, since in that case the assignment statements
+//            // will happen after the inlining of the right hand side.
+//            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
+//            //   and remove this special case.
+//              !(parent.isAssign() &&
+//               (parent.getFirstChild() == n))) {
+//              // Don't count lhs of top-level assignment chain
+//              numUsesWithinCfgNode++;
+//          }
+            if (n.isName() && n.getString().equals(varName)) {
               // Don't count lhs of top-level assignment chain
               numUsesWithinCfgNode++;
             }
-        }
 
+        }
       };
-
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
