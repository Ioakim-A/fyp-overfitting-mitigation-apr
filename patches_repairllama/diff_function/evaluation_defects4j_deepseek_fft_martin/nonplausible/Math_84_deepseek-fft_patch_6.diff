diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a70a3796-d37b-4b50-aeb4-938110606906_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/eec48898-9783-4331-9c68-6548a56e412d_fixed.java
index 5f1dcf2..e24e72a 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a70a3796-d37b-4b50-aeb4-938110606906_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/eec48898-9783-4331-9c68-6548a56e412d_fixed.java
@@ -1,41 +1,59 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
-
+// buggy code
+//        while (true) {
+//            incrementIterationsCounter();
+//            // save the original vertex
+//            final RealPointValuePair[] original = simplex;
+//            final RealPointValuePair best = original[0];
+//            // perform a reflection step
+//            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
+//            if (comparator.compare(reflected, best) < 0) {
+//                // compute the expanded simplex
+//                final RealPointValuePair[] reflectedSimplex = simplex;
+//                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
+//                if (comparator.compare(reflected, expanded) <= 0) {
+//                    // accept the reflected simplex
+//                    simplex = reflectedSimplex;
+//                }
+//                return;
+//            }
+//            // compute the contracted simplex
+//            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
+//            if (comparator.compare(contracted, best) < 0) {
+//                // accept the contracted simplex
+//            // check convergence
                 while (true) {
-
                     incrementIterationsCounter();
-
                     // save the original vertex
                     final RealPointValuePair[] original = simplex;
                     final RealPointValuePair best = original[0];
-
                     // perform a reflection step
                     final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
                     if (comparator.compare(reflected, best) < 0) {
-
                         // compute the expanded simplex
                         final RealPointValuePair[] reflectedSimplex = simplex;
                         final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                         if (comparator.compare(reflected, expanded) <= 0) {
                             // accept the reflected simplex
                             simplex = reflectedSimplex;
                         }
-
                         return;
-
                     }
-
                     // compute the contracted simplex
                     final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
                     if (comparator.compare(contracted, best) < 0) {
                         // accept the contracted simplex
-
                     // check convergence
+                        if (comparator.compare(contracted, reflected) == 0) {
+                            simplex = reflectedSimplex;
                             return;
                         }
-
                     }
 
+                return;
+            }
+        }
     }
