diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4d22476c-8aee-482c-bf12-5b04bb125a09_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9c87cbbf-2785-4a14-9670-316377dde579_fixed.java
index 8b0cd97..f91a045 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4d22476c-8aee-482c-bf12-5b04bb125a09_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9c87cbbf-2785-4a14-9670-316377dde579_fixed.java
@@ -1,30 +1,38 @@
      /**
      * {@inheritDoc}
      * <p><strong>Note: </strong>This implementation rescales the 
      * <code>expected</code> array if necessary to ensure that the sum of the
      * expected and observed counts are equal.</p>
      * 
      * @param observed array of observed frequency counts
      * @param expected array of expected frequency counts
      * @return chi-square test statistic
      * @throws IllegalArgumentException if preconditions are not met
      * or length is less than 2
      */
     public double chiSquare(double[] expected, long[] observed)
         throws IllegalArgumentException {
         if ((expected.length < 2) || (expected.length != observed.length)) {
             throw new IllegalArgumentException(
                     "observed, expected array lengths incorrect");
         }
         if (!isPositive(expected) || !isNonNegative(observed)) {
             throw new IllegalArgumentException(
                 "observed counts must be non-negative and expected counts must be postive");
         }
+// buggy code
+//        double sumSq = 0.0d;
+//        double dev = 0.0d;
+//        for (int i = 0; i < observed.length; i++) {
+//                dev = ((double) observed[i] - expected[i]);
+//                sumSq += dev * dev / expected[i];
+//        }
+        double[] dev = new double[observed.length];
         double sumSq = 0.0d;
-        double dev = 0.0d;
         for (int i = 0; i < observed.length; i++) {
-                dev = ((double) observed[i] - expected[i]);
-                sumSq += dev * dev / expected[i];
+                dev[i] = ((double) observed[i] - expected[i]);
+                sumSq += dev[i] * dev[i] / expected[i];
+
         }
         return sumSq;
     }
