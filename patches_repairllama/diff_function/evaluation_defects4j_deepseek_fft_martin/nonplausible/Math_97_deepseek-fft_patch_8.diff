diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/92dc774e-b71a-41d5-a8bd-6de8ca0876bc_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/42837f59-cd2b-4053-b29b-240ea3084ac4_fixed.java
index 88647d1..cb90e1a 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/92dc774e-b71a-41d5-a8bd-6de8ca0876bc_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/42837f59-cd2b-4053-b29b-240ea3084ac4_fixed.java
@@ -1,44 +1,51 @@
     /**
      * Find a zero in the given interval.
      * <p>
      * Requires that the values of the function at the endpoints have opposite
      * signs. An <code>IllegalArgumentException</code> is thrown if this is not
      * the case.</p>
      * 
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating the
      * function 
      * @throws IllegalArgumentException if min is not less than max or the
      * signs of the values of the function at the endpoints are not opposites
      */
     public double solve(double min, double max) throws MaxIterationsExceededException, 
         FunctionEvaluationException {
-        
         clearResult();
         verifyInterval(min, max);
-        
         double ret = Double.NaN;
-        
         double yMin = f.value(min);
         double yMax = f.value(max);
-        
         // Verify bracketing
         double sign = yMin * yMax;
+// buggy code
+//        if (sign >= 0) {
+//            // check if either value is close to a zero
+//                // neither value is close to zero and min and max do not bracket root.
+//                throw new IllegalArgumentException
+//                ("Function values at endpoints do not have different signs." +
+//                        "  Endpoints: [" + min + "," + max + "]" + 
+//                        "  Values: [" + yMin + "," + yMax + "]");
+//        } else {
+//            // solve using only the first endpoint as initial guess
+//            ret = solve(min, yMin, max, yMax, min, yMin);
+//            // either min or max is a root
+//        }
         if (sign >= 0) {
-            // check if either value is close to a zero
-                // neither value is close to zero and min and max do not bracket root.
             throw new IllegalArgumentException
             ("Function values at endpoints do not have different signs." +
                     "  Endpoints: [" + min + "," + max + "]" + 
                     "  Values: [" + yMin + "," + yMax + "]");
         } else {
             // solve using only the first endpoint as initial guess
             ret = solve(min, yMin, max, yMax, min, yMin);
             // either min or max is a root
-        }
 
+        }
         return ret;
     }
