diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/fb9a06ba-f052-400a-8cc0-e444792ff328_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9310018e-7766-4c58-8cd5-a268d2ed2900_fixed.java
index b4e6f03..c1d9bd6 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/fb9a06ba-f052-400a-8cc0-e444792ff328_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9310018e-7766-4c58-8cd5-a268d2ed2900_fixed.java
@@ -1,44 +1,48 @@
     /**
      * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
      * <code>&lt;img src></code>).
      * <p/>
      * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
      * <p/>
      * If the attribute value is already absolute (i.e. it starts with a protocol, like
      * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
      * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
      * absolute using that.
      * <p/>
      * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
      * <code>String absUrl = linkEl.attr("abs:href");</code>
      *
      * @param attributeKey The attribute key
      * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
      * could not be made successfully into a URL.
      * @see #attr
      * @see java.net.URL#URL(java.net.URL, String)
      */
     public String absUrl(String attributeKey) {
         Validate.notEmpty(attributeKey);
-
         String relUrl = attr(attributeKey);
         if (!hasAttr(attributeKey)) {
             return ""; // nothing to make absolute with
         } else {
             URL base;
             try {
                 try {
                     base = new URL(baseUri);
                 } catch (MalformedURLException e) {
                     // the base is unsuitable, but the attribute may be abs on its own, so try that
                     URL abs = new URL(relUrl);
                     return abs.toExternalForm();
                 }
                 // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
+// buggy code
+                if (relUrl.startsWith("/")) {
+                    relUrl = relUrl.substring(1);
+                }
+
                 URL abs = new URL(base, relUrl);
                 return abs.toExternalForm();
             } catch (MalformedURLException e) {
                 return "";
             }
         }
     }
