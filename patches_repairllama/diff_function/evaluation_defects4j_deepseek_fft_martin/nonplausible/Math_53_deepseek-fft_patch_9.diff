diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1a7637ed-cdfd-4293-9f6b-53f46dab3a54_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/5a5d12e1-d1bd-4851-9ccb-f039fc90d7b7_fixed.java
index 181b1ac..705a2b1 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1a7637ed-cdfd-4293-9f6b-53f46dab3a54_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/5a5d12e1-d1bd-4851-9ccb-f039fc90d7b7_fixed.java
@@ -1,23 +1,26 @@
     /**
      * Return the sum of this complex number and the given complex number.
      * <p>
      * Uses the definitional formula
      * <pre>
      * (a + bi) + (c + di) = (a+c) + (b+d)i
      * </pre></p>
      * <p>
      * If either this or <code>rhs</code> has a NaN value in either part,
      * {@link #NaN} is returned; otherwise Infinite and NaN values are
      * returned in the parts of the result according to the rules for
      * {@link java.lang.Double} arithmetic.</p>
      *
      * @param rhs the other complex number
      * @return the complex number sum
      * @throws NullArgumentException if <code>rhs</code> is null
      */
     public Complex add(Complex rhs)
         throws NullArgumentException {
         MathUtils.checkNotNull(rhs);
+// buggy code
+
+
         return createComplex(real + rhs.getReal(),
             imaginary + rhs.getImaginary());
     }
