diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/7782a880-9ded-455a-b9ef-cbdeac9a04bb_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/8316ab27-ba20-4f7c-9815-c6449a547924_fixed.java
index d57736b..77d2922 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/7782a880-9ded-455a-b9ef-cbdeac9a04bb_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/8316ab27-ba20-4f7c-9815-c6449a547924_fixed.java
@@ -1,39 +1,57 @@
   /**
    * Suppose X is an object with inferred properties.
    * Suppose also that X is used in a way where it would only type-check
    * correctly if some of those properties are widened.
    * Then we should be polite and automatically widen X's properties for him.
    *
    * For a concrete example, consider:
    * param x {{prop: (number|undefined)}}
    * function f(x) {}
    * f({});
    *
    * If we give the anonymous object an inferred property of (number|undefined),
    * then this code will type-check appropriately.
    */
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
-
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
+// buggy code
+//    if (constraintObj != null && constraintObj.isRecordType()) {
+//      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
+//      if (objType != null) {
+//        for (String prop : constraintObj.getOwnPropertyNames()) {
+//          JSType propType = constraintObj.getPropertyType(prop);
+//          if (!objType.isPropertyTypeDeclared(prop)) {
+//            JSType typeToInfer = propType;
+//            if (!objType.hasProperty(prop)) {
+//              typeToInfer =
+//                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+//            }
+//            objType.defineInferredProperty(prop, typeToInfer, null);
+//          }
+//        }
+//      }
+//      return;
+//    }
     if (constraintObj != null && constraintObj.isRecordType()) {
       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
       if (objType != null) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
           JSType propType = constraintObj.getPropertyType(prop);
           if (!objType.isPropertyTypeDeclared(prop)) {
             JSType typeToInfer = propType;
             if (!objType.hasProperty(prop)) {
               typeToInfer =
                   getNativeType(VOID_TYPE).getLeastSupertype(propType);
             }
             objType.defineInferredProperty(prop, typeToInfer, null);
           }
         }
       }
+
     }
   }
