diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/24b89598-e07a-49c2-a69b-b5e13adb8350_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/03f4528b-e7b4-4b33-93b8-a8be68f1aa73_fixed.java
index 5abdeb5..11133ec 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/24b89598-e07a-49c2-a69b-b5e13adb8350_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/03f4528b-e7b4-4b33-93b8-a8be68f1aa73_fixed.java
@@ -1,29 +1,37 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
-
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
-
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
+// buggy code
+//          if (n.isName() && n.getString().equals(varName) &&
+//            // We make a special exception when the entire cfgNode is a chain
+//            // of assignments, since in that case the assignment statements
+//            // will happen after the inlining of the right hand side.
+//            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
+//            //   and remove this special case.
+//              !(parent.isAssign() &&
+//               (parent.getFirstChild() == n))) {
+//              // Don't count lhs of top-level assignment chain
+//              numUsesWithinCfgNode++;
+//          }
           if (n.isName() && n.getString().equals(varName) &&
             // We make a special exception when the entire cfgNode is a chain
             // of assignments, since in that case the assignment statements
             // will happen after the inlining of the right hand side.
             // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
             //   and remove this special case.
             !(parent.isAssign() &&
              (parent.getFirstChild() == n))) {
             // Don't count lhs of top-level assignment chain
             numUsesWithinCfgNode++;
-          }
-        }
 
+        }
       };
-
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
