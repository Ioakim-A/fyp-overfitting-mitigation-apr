diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/affce4b0-b6dc-4f70-b270-f4937215c64d_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1a10465d-4b81-42e4-940c-59e5c4f04b95_fixed.java
index 0f439b3..f6bd5d0 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/affce4b0-b6dc-4f70-b270-f4937215c64d_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1a10465d-4b81-42e4-940c-59e5c4f04b95_fixed.java
@@ -1,38 +1,38 @@
     /**
      * Reads bytes from the current tar archive entry.
      *
      * This method is aware of the boundaries of the current
      * entry in the archive and will deal with them as if they
      * were this stream's start and EOF.
      *
      * @param buf The buffer into which to place bytes read.
      * @param offset The offset at which to place bytes read.
      * @param numToRead The number of bytes to read.
      * @return The number of bytes read, or -1 at EOF.
      * @throws IOException on error
      */
     @Override
     public int read(byte[] buf, int offset, int numToRead) throws IOException {
     	int totalRead = 0;
-
         if (hasHitEOF || entryOffset >= entrySize) {
             return -1;
         }
-
         if (currEntry == null) {
             throw new IllegalStateException("No current tar entry");
         }
-
         numToRead = Math.min(numToRead, available());
-        
         totalRead = is.read(buf, offset, numToRead);
-        count(totalRead);
-        
+// buggy code
+//        count(totalRead);
+//        if (totalRead == -1) {
+//            hasHitEOF = true;
+//        } else {
+        entryOffset += totalRead;
         if (totalRead == -1) {
             hasHitEOF = true;
         } else {
+
             entryOffset += totalRead;
         }
-
         return totalRead;
     }
