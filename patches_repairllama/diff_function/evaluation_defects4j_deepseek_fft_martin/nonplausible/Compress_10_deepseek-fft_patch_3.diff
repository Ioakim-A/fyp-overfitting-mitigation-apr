diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4fb17bea-a1c1-469b-8fe5-41b441b8ddba_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6ed9bc14-ca69-42ff-b284-179a4cadd837_fixed.java
index 85e6a42..566aa64 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4fb17bea-a1c1-469b-8fe5-41b441b8ddba_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6ed9bc14-ca69-42ff-b284-179a4cadd837_fixed.java
@@ -1,50 +1,57 @@
     /**
      * Walks through all recorded entries and adds the data available
      * from the local file header.
      *
      * <p>Also records the offsets for the data to read from the
      * entries.</p>
      */
     private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
                                             entriesWithoutUTF8Flag)
         throws IOException {
         // changing the name of a ZipArchiveEntry is going to change
         // the hashcode - see COMPRESS-164
         // Map needs to be reconstructed in order to keep central
         // directory order
-        for (ZipArchiveEntry ze : entries.keySet()) {
-            OffsetEntry offsetEntry = entries.get(ze);
-            long offset = offsetEntry.headerOffset;
-            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
-            byte[] b = new byte[SHORT];
-            archive.readFully(b);
-            int fileNameLen = ZipShort.getValue(b);
-            archive.readFully(b);
-            int extraFieldLen = ZipShort.getValue(b);
-            int lenToSkip = fileNameLen;
-            while (lenToSkip > 0) {
-                int skipped = archive.skipBytes(lenToSkip);
-                if (skipped <= 0) {
-                    throw new RuntimeException("failed to skip file name in"
-                                               + " local file header");
-                }
-                lenToSkip -= skipped;
-            }
-            byte[] localExtraData = new byte[extraFieldLen];
-            archive.readFully(localExtraData);
-            ze.setExtra(localExtraData);
-            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
-                + SHORT + SHORT + fileNameLen + extraFieldLen;
+// buggy code
+//        for (ZipArchiveEntry ze : entries.keySet()) {
+//            OffsetEntry offsetEntry = entries.get(ze);
+//            long offset = offsetEntry.headerOffset;
+//            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
+//            byte[] b = new byte[SHORT];
+//            archive.readFully(b);
+//            int fileNameLen = ZipShort.getValue(b);
+//            archive.readFully(b);
+//            int extraFieldLen = ZipShort.getValue(b);
+//            int lenToSkip = fileNameLen;
+//            while (lenToSkip > 0) {
+//                int skipped = archive.skipBytes(lenToSkip);
+//                if (skipped <= 0) {
+//                    throw new RuntimeException("failed to skip file name in"
+//                                               + " local file header");
+//                }
+//                lenToSkip -= skipped;
+//            }
+//            byte[] localExtraData = new byte[extraFieldLen];
+//            archive.readFully(localExtraData);
+//            ze.setExtra(localExtraData);
+//            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
+//                + SHORT + SHORT + fileNameLen + extraFieldLen;
+//            if (entriesWithoutUTF8Flag.containsKey(ze)) {
+//                String orig = ze.getName();
+//                NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
+//                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
+//                                                         nc.comment);
+//                if (!orig.equals(ze.getName())) {
+//                    nameMap.remove(orig);
+//                    nameMap.put(ze.getName(), ze);
+//                }
+//            }
+//            if (entriesWithoutUTF8Flag.containsKey(ze)) {
+//                String orig = ze.getName();
+//                NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
+//                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
+//                                                         nc.comment);
+//                if (!orig.equals(ze.getName())) {
 
-            if (entriesWithoutUTF8Flag.containsKey(ze)) {
-                String orig = ze.getName();
-                NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
-                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
-                                                         nc.comment);
-                if (!orig.equals(ze.getName())) {
-                    nameMap.remove(orig);
-                    nameMap.put(ze.getName(), ze);
-                }
-            }
         }
     }
