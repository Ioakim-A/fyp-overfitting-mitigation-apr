diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/03fc9c90-4d6f-4960-ba45-5104b16f9ec8_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a6dc2995-860a-42e8-be9a-373177e32339_fixed.java
index 3127f85..02386cb 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/03fc9c90-4d6f-4960-ba45-5104b16f9ec8_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a6dc2995-860a-42e8-be9a-373177e32339_fixed.java
@@ -1,24 +1,28 @@
     /**
      * For this distribution, {@code X}, this method returns {@code P(X < x)}.
      * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
      * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
      *
      * @param x Value at which the CDF is evaluated.
      * @return CDF evaluated at {@code x}.
      * @throws MathException if the algorithm fails to converge
      */
     public double cumulativeProbability(double x) throws MathException {
         final double dev = x - mean;
-        try {
+// buggy code
+//        try {
+//        return 0.5 * (1.0 + Erf.erf((dev) /
+//                    (standardDeviation * FastMath.sqrt(2.0))));
+//        } catch (MaxIterationsExceededException ex) {
+//            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
+//                return 0;
+//            } else if (x > (mean + 20 * standardDeviation)) {
+//                return 1;
+//            } else {
+//                throw ex;
+//            }
+//        }
         return 0.5 * (1.0 + Erf.erf((dev) /
                 (standardDeviation * FastMath.sqrt(2.0))));
-        } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
-            } else {
-                throw ex;
-            }
-        }
+
     }
