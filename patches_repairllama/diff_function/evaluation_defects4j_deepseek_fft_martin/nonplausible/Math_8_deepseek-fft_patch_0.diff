diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/5c15f9d2-3d51-4377-87ad-e84f6afbc2a5_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b381ba84-9b94-4a9a-b2e8-2902bb9c4cb6_fixed.java
index bfa2423..e779c13 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/5c15f9d2-3d51-4377-87ad-e84f6afbc2a5_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b381ba84-9b94-4a9a-b2e8-2902bb9c4cb6_fixed.java
@@ -1,23 +1,32 @@
     /**
      * Generate a random sample from the distribution.
      *
      * @param sampleSize the number of random values to generate.
      * @return an array representing the random sample.
      * @throws NotStrictlyPositiveException if {@code sampleSize} is not
      * positive.
      */
-    public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
+// buggy code
+//    public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
+//        if (sampleSize <= 0) {
+//            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
+//                    sampleSize);
+//        }
+//        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+//        for (int i = 0; i < sampleSize; i++) {
+//            out[i] = sample();
+//        }
+//        return out;
+//    }
+    public T[] sample(int sampleSize) {
         if (sampleSize <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                     sampleSize);
         }
-
         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
 
         for (int i = 0; i < sampleSize; i++) {
             out[i] = sample();
         }
-
         return out;
-
     }
