diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/79fe3956-fe61-47ab-8759-686974bd2529_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b3af92f8-7ff3-4501-aa89-239aa9300b43_fixed.java
index 42c5923..1988535 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/79fe3956-fe61-47ab-8759-686974bd2529_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b3af92f8-7ff3-4501-aa89-239aa9300b43_fixed.java
@@ -1,89 +1,101 @@
     /**
      * Parses a string to produce a {@link Fraction} object.  This method
      * expects the string to be formatted as a proper fraction.
      * <p>
      * Minus signs are only allowed in the whole number part - i.e.,
      * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
      * will result in a <code>ParseException</code>.
      * 
      * @param source the string to parse
      * @param pos input/ouput parsing parameter.
      * @return the parsed {@link Fraction} object.
      */
     public Fraction parse(String source, ParsePosition pos) {
         // try to parse improper fraction
         Fraction ret = super.parse(source, pos);
         if (ret != null) {
             return ret;
         }
-        
         int initialIndex = pos.getIndex();
-
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
-
         // parse whole
         Number whole = getWholeFormat().parse(source, pos);
         if (whole == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
-
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
-        
         // parse numerator
         Number num = getNumeratorFormat().parse(source, pos);
         if (num == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
-        
-            // minus signs should be leading, invalid expression
-
+// buggy code
+//            // minus signs should be leading, invalid expression
+//        // parse '/'
+//        int startIndex = pos.getIndex();
+//        char c = parseNextCharacter(source, pos);
+//        switch (c) {
+//        case 0 :
+//            // no '/'
+//            // return num as a fraction
+//            return new Fraction(num.intValue(), 1);
+//        case '/' :
+//            // found '/', continue parsing denominator
+//            break;
+//        default :
+//            // invalid '/'
+//            // set index back to initial, error index should be the last
+//            // character examined.
+//            pos.setIndex(initialIndex);
+//            pos.setErrorIndex(startIndex);
+//            return null;
+//        }
+//        // parse whitespace
+//        parseAndIgnoreWhitespace(source, pos);
+//        // parse denominator
+//        Number den = getDenominatorFormat().parse(source, pos);
+//        if (den == null) {
+//            // invalid integer number
+//            // set index back to initial, error index should already be set
+//            // character examined.
+//            pos.setIndex(initialIndex);
+//            return null;
+//        }
+//            // minus signs must be leading, invalid
+//        return new Fraction(num.intValue(), den.intValue());
         // parse '/'
         int startIndex = pos.getIndex();
         char c = parseNextCharacter(source, pos);
         switch (c) {
         case 0 :
             // no '/'
             // return num as a fraction
             return new Fraction(num.intValue(), 1);
         case '/' :
             // found '/', continue parsing denominator
             break;
         default :
             // invalid '/'
             // set index back to initial, error index should be the last
             // character examined.
             pos.setIndex(initialIndex);
             pos.setErrorIndex(startIndex);
             return null;
         }
-
         // parse whitespace
-        parseAndIgnoreWhitespace(source, pos);
-
-        // parse denominator
-        Number den = getDenominatorFormat().parse(source, pos);
-        if (den == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
-            pos.setIndex(initialIndex);
-            return null;
-        }
-        
-            // minus signs must be leading, invalid
-
+        parseAndIgnoreWhitespace(source
         int w = whole.intValue();
         int n = num.intValue();
         int d = den.intValue();
         return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
     }
