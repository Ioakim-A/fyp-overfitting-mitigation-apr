diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2d2281db-4682-44c0-a680-d9600f1551b2_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/cbcfc7f9-da7e-4945-9816-17e3e81f34c7_fixed.java
index 9092be9..113673b 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2d2281db-4682-44c0-a680-d9600f1551b2_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/cbcfc7f9-da7e-4945-9816-17e3e81f34c7_fixed.java
@@ -1,47 +1,60 @@
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
+// buggy code
+//         if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+//             int start = index + 2;
+//             boolean isHex = false;
+//             char firstChar = input.charAt(start);
+//             if(firstChar == 'x' || firstChar == 'X') {
+//                 start++;
+//                 isHex = true;
+//             }
+//             int end = start;
+//             while(input.charAt(end) != ';')
+//             {
+//                 end++;
+//             }
+//             int entityValue;
+//             try {
+//                 if(isHex) {
+//                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+//                 } else {
+//                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+//                 }
+//             } catch(NumberFormatException nfe) {
+//             System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+//                 return 0;
+//             }
+//             if(entityValue > 0xFFFF) {
+//                 char[] chrs = Character.toChars(entityValue);
+//                 out.write(chrs[0]);
+//                 out.write(chrs[1]);
+//             } else {
+//                 out.write(entityValue);
+//             }
+//             return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+       if(index < seqEnd) {
             if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
                 int start = index + 2;
                 boolean isHex = false;
-
                 char firstChar = input.charAt(start);
                 if(firstChar == 'x' || firstChar == 'X') {
                     start++;
                     isHex = true;
-
-                // Check there's more than just an x after the &#
                 }
-
                 int end = start;
-            // Note that this supports character codes without a ; on the end
                 while(input.charAt(end) != ';')
                 {
                     end++;
                 }
-
                 int entityValue;
                 try {
                     if(isHex) {
                         entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                     } else {
                         entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                     }
                 } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
-                return 0;
-            }
-
-            if(entityValue > 0xFFFF) {
-                char[] chrs = Character.toChars(entityValue);
-                out.write(chrs[0]);
-                out.write(chrs[1]);
-            } else {
-                out.write(entityValue);
-            }
-
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
-        }
+                    System.err.println("FAIL: " + input.subSequence        }
         return 0;
     }
