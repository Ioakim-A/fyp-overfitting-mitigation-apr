diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/83a00d86-0738-4d66-9267-d19d08b5d467_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6d82ddf4-1237-40c7-b2c3-816e4cdf07c8_fixed.java
index dde7e35..7f69bf4 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/83a00d86-0738-4d66-9267-d19d08b5d467_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6d82ddf4-1237-40c7-b2c3-816e4cdf07c8_fixed.java
@@ -1,19 +1,23 @@
   static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
       TypeToken<?> fieldType, JsonAdapter annotation) {
     Class<?> value = annotation.value();
     TypeAdapter<?> typeAdapter;
     if (TypeAdapter.class.isAssignableFrom(value)) {
       Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
     } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
       Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
           .construct()
           .create(gson, fieldType);
     } else {
       throw new IllegalArgumentException(
           "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
     }
+// buggy code
+//       typeAdapter = typeAdapter.nullSafe();
+   if (annotation.serializeNulls()) {
       typeAdapter = typeAdapter.nullSafe();
+    }
     return typeAdapter;
   }
