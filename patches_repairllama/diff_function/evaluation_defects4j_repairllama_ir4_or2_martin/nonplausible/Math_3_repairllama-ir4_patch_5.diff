diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f8e09b6e-c3e8-4796-8e96-e2140cb19d85_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/bff94f47-f4dc-433c-847c-f211c003a4d4_fixed.java
index 3a9fe05..ad4e7be 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f8e09b6e-c3e8-4796-8e96-e2140cb19d85_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/bff94f47-f4dc-433c-847c-f211c003a4d4_fixed.java
@@ -1,59 +1,50 @@
     public static double linearCombination(final double[] a, final double[] b)
         throws DimensionMismatchException {
         final int len = a.length;
         if (len != b.length) {
             throw new DimensionMismatchException(len, b.length);
+// buggy code
+// 
+       } else if (len == 0) {
+            return 0;
         }
-
-            // Revert to scalar multiplication.
-
         final double[] prodHigh = new double[len];
         double prodLowSum = 0;
-
         for (int i = 0; i < len; i++) {
             final double ai = a[i];
             final double ca = SPLIT_FACTOR * ai;
             final double aHigh = ca - (ca - ai);
             final double aLow = ai - aHigh;
-
             final double bi = b[i];
             final double cb = SPLIT_FACTOR * bi;
             final double bHigh = cb - (cb - bi);
             final double bLow = bi - bHigh;
             prodHigh[i] = ai * bi;
             final double prodLow = aLow * bLow - (((prodHigh[i] -
                                                     aHigh * bHigh) -
                                                    aLow * bHigh) -
                                                   aHigh * bLow);
             prodLowSum += prodLow;
         }
-
-
         final double prodHighCur = prodHigh[0];
         double prodHighNext = prodHigh[1];
         double sHighPrev = prodHighCur + prodHighNext;
         double sPrime = sHighPrev - prodHighNext;
         double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);
-
         final int lenMinusOne = len - 1;
         for (int i = 1; i < lenMinusOne; i++) {
             prodHighNext = prodHigh[i + 1];
             final double sHighCur = sHighPrev + prodHighNext;
             sPrime = sHighCur - prodHighNext;
             sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);
             sHighPrev = sHighCur;
         }
-
         double result = sHighPrev + (prodLowSum + sLowSum);
-
         if (Double.isNaN(result)) {
-            // either we have split infinite numbers or some coefficients were NaNs,
-            // just rely on the naive implementation and let IEEE754 handle this
             result = 0;
             for (int i = 0; i < len; ++i) {
                 result += a[i] * b[i];
             }
         }
-
         return result;
     }
