diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/efe4efda-3c0e-4bfe-9906-10a7a9c448e3_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9d4f7dfa-de18-4a7c-9ec6-ea00a73aa12a_fixed.java
index 710fcc0..f24c9da 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/efe4efda-3c0e-4bfe-9906-10a7a9c448e3_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9d4f7dfa-de18-4a7c-9ec6-ea00a73aa12a_fixed.java
@@ -1,37 +1,38 @@
     Object returnValueFor(Class<?> type) {
         if (Primitives.isPrimitiveOrWrapper(type)) {
             return Primitives.defaultValueForPrimitiveOrWrapper(type);
-            //new instances are used instead of Collections.emptyList(), etc.
-            //to avoid UnsupportedOperationException if code under test modifies returned collection
+// buggy code
+// 
+       } else if (type == Boolean.class || type == Boolean.TYPE) {
+            return false;
         } else if (type == Collection.class) {
             return new LinkedList<Object>();
         } else if (type == Set.class) {
             return new HashSet<Object>();
         } else if (type == HashSet.class) {
             return new HashSet<Object>();
         } else if (type == SortedSet.class) {
             return new TreeSet<Object>();
         } else if (type == TreeSet.class) {
             return new TreeSet<Object>();
         } else if (type == LinkedHashSet.class) {
             return new LinkedHashSet<Object>();
         } else if (type == List.class) {
             return new LinkedList<Object>();
         } else if (type == LinkedList.class) {
             return new LinkedList<Object>();
         } else if (type == ArrayList.class) {
             return new ArrayList<Object>();
         } else if (type == Map.class) {
             return new HashMap<Object, Object>();
         } else if (type == HashMap.class) {
             return new HashMap<Object, Object>();
         } else if (type == SortedMap.class) {
             return new TreeMap<Object, Object>();
         } else if (type == TreeMap.class) {
             return new TreeMap<Object, Object>();
         } else if (type == LinkedHashMap.class) {
             return new LinkedHashMap<Object, Object>();
         }
-        //Let's not care about the rest of collections.
         return null;
     }
