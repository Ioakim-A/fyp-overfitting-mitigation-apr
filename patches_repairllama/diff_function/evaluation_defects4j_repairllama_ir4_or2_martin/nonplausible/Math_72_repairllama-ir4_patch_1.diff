diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/21860b1c-9ce6-46db-864f-252006a23b0a_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/90f71475-30e4-4361-b95a-9d9cfd8411d4_fixed.java
index 2f17e18..9ab8d7b 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/21860b1c-9ce6-46db-864f-252006a23b0a_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/90f71475-30e4-4361-b95a-9d9cfd8411d4_fixed.java
@@ -1,47 +1,42 @@
     public double solve(final UnivariateRealFunction f,
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
-
         clearResult();
         verifySequence(min, initial, max);
-
-        // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
-
-        // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+// buggy code
+//             setResult(yMin, 0);
+//             return result;
+//         }
+//         if (yInitial * yMin < 0) {
+//             return solve(f, min, yMin, initial, yInitial, min, yMin);
+//         }
+//         double yMax = f.value(max);
+//         if (Math.abs(yMax) <= functionValueAccuracy) {
+//             setResult(yMax, 0);
+           setResult(min, yMin);
             return result;
         }
-
-        // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
-
-        // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            setResult(max, yMax);
             return result;
         }
-
-        // reduce interval if initial and max bracket the root
         if (yInitial * yMax < 0) {
             return solve(f, initial, yInitial, max, yMax, initial, yInitial);
         }
-
         if (yMin * yMax > 0) {
             throw MathRuntimeException.createIllegalArgumentException(
                   NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
         }
-
-        // full Brent algorithm starting with provided initial guess
         return solve(f, min, yMin, max, yMax, initial, yInitial);
-
     }
