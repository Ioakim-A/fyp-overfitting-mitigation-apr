diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2de141c4-a3ce-4424-9eaa-9d5fa66fa7c1_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d40d7aa2-4f0f-4aa3-9e71-7fe36166a674_fixed.java
index f9a9b5b..c724a3a 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2de141c4-a3ce-4424-9eaa-9d5fa66fa7c1_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d40d7aa2-4f0f-4aa3-9e71-7fe36166a674_fixed.java
@@ -1,30 +1,42 @@
     public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
         if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
             throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
         }
         Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
                 settings.getTypeToMock(),
                 settings.getExtraInterfaces()
         );
-        T mockInstance = null;
+// buggy code
+//         T mockInstance = null;
+//         try {
+//             mockInstance = classInstantiator.instantiate(mockedProxyType);
+//             MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
+//             mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
+//             return ensureMockIsAssignableToMockedType(settings, mockInstance);
+//         } catch (ClassCastException cce) {
+//             throw new MockitoException(join(
+//                     "ClassCastException occurred while creating the mockito mock :",
+//                     "  class to mock : " + describeClass(mockedProxyType),
+//                     "  created class : " + describeClass(settings.getTypeToMock()),
+//                     "  proxy instance class : " + describeClass(mockInstance),
+//                     "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
        try {
-            mockInstance = classInstantiator.instantiate(mockedProxyType);
+            T mockInstance = classInstantiator.instantiate(mockedProxyType);
             MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
             mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
-
             return ensureMockIsAssignableToMockedType(settings, mockInstance);
         } catch (ClassCastException cce) {
             throw new MockitoException(join(
                     "ClassCastException occurred while creating the mockito mock :",
                     "  class to mock : " + describeClass(mockedProxyType),
                     "  created class : " + describeClass(settings.getTypeToMock()),
-                    "  proxy instance class : " + describeClass(mockInstance),
+                    "  proxy instance class : " + describeClass(cce.getClass()),
                     "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                     "",
                     "You might experience classloading issues, please ask the mockito mailing-list.",
                     ""
             ),cce);
         } catch (org.mockito.internal.creation.instance.InstantiationException e) {
             throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
         }
     }
