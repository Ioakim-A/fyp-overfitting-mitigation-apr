diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/7fad29a8-1a23-4cab-80fb-dc756238d687_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c4848323-7c4a-4ce8-ab2a-354c12f39699_fixed.java
index b108107..93beaf9 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/7fad29a8-1a23-4cab-80fb-dc756238d687_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c4848323-7c4a-4ce8-ab2a-354c12f39699_fixed.java
@@ -1,25 +1,37 @@
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
-
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
-    if (constraintObj != null && constraintObj.isRecordType()) {
+// buggy code
+//     if (constraintObj != null && constraintObj.isRecordType()) {
+//       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
+//       if (objType != null) {
+//         for (String prop : constraintObj.getOwnPropertyNames()) {
+//           JSType propType = constraintObj.getPropertyType(prop);
+//           if (!objType.isPropertyTypeDeclared(prop)) {
+//             JSType typeToInfer = propType;
+//             if (!objType.hasProperty(prop)) {
+//               typeToInfer =
+//                   getNativeType(VOID_TYPE).getLeastSupertype(propType);
+//             }
+//             objType.defineInferredProperty(prop, typeToInfer, null);
+//           }
+//         }
+//       }
    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
-      if (objType != null) {
+    if (constraintObj != null && constraintObj.isRecordType() && objType != null) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!objType.isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
           if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);
           }
           objType.defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
-  }
