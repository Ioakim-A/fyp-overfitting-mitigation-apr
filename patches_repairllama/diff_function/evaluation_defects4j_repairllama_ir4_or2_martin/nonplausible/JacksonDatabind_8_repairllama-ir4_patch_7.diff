diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/113105ad-2609-4091-a6a3-8e7fc6db29fb_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/fee9b510-20a9-41db-9134-e2226bf6b29b_fixed.java
index c9da1b7..8fbfbe8 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/113105ad-2609-4091-a6a3-8e7fc6db29fb_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/fee9b510-20a9-41db-9134-e2226bf6b29b_fixed.java
@@ -1,33 +1,31 @@
     protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
     {
         final int mask = (1 << typeIndex);
         _hasNonDefaultCreator = true;
         AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
         if (oldOne != null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
+// buggy code
+//             if ((_explicitCreators & mask) != 0) { 
+//                 if (!explicit) {
+//                     return;
+//                 }
+//             }
+//             if (oldOne.getClass() == newOne.getClass()) {
+//                     throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
+//                             +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
+           if ((_explicitCreators & mask) != 0) {
                 if (!explicit) {
                     return;
                 }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
-            }
-
-            // one more thing: ok to override in sub-class
+            } else {
                 if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
                     throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
-                            +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
+                            +" creators: already had implicitly marked "+oldOne+", encountered explicitly "+newOne);
+                }
             }
         }
         if (explicit) {
             _explicitCreators |= mask;
         }
         _creators[typeIndex] = _fixAccess(newOne);
     }
