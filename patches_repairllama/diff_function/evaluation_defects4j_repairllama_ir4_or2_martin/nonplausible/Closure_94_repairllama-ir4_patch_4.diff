diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/ae3ce5fb-e7d0-4b47-be5a-0c7ece1d7c4d_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9b54e698-6b20-444c-8d7e-faa7b4d2846e_fixed.java
index 02afa2a..59a6b91 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/ae3ce5fb-e7d0-4b47-be5a-0c7ece1d7c4d_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9b54e698-6b20-444c-8d7e-faa7b4d2846e_fixed.java
@@ -1,28 +1,25 @@
   static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
       case Token.STRING:
       case Token.NUMBER:
       case Token.TRUE:
       case Token.FALSE:
         return true;
-
-      // Binary operators are only valid if both children are valid.
-      case Token.BITAND:
-      case Token.BITNOT:
-      case Token.BITOR:
-      case Token.BITXOR:
-
-      // Uniary operators are valid if the child is valid.
-      case Token.NOT:
-      case Token.NEG:
+// buggy code
+//       case Token.BITAND:
+//       case Token.BITNOT:
+//       case Token.BITOR:
+//       case Token.BITXOR:
+//       case Token.NOT:
+//       case Token.NEG:
+     case Token.OR:
+      case Token.AND:
         return isValidDefineValue(val.getFirstChild(), defines);
-
-      // Names are valid if and only if they are defines themselves.
       case Token.NAME:
       case Token.GETPROP:
         if (val.isQualifiedName()) {
           return defines.contains(val.getQualifiedName());
         }
     }
     return false;
   }
