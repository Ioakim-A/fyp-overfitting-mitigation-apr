diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4e5cccf1-11ae-4d51-82c6-33892efc7517_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1939d369-9272-42c3-8ac2-f7b38243e727_fixed.java
index 68990d4..5822c8a 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4e5cccf1-11ae-4d51-82c6-33892efc7517_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1939d369-9272-42c3-8ac2-f7b38243e727_fixed.java
@@ -1,42 +1,32 @@
   public String getLine(int lineNumber) {
     String js = "";
     try {
-      // NOTE(nicksantos): Right now, this is optimized for few warnings.
-      // This is probably the right trade-off, but will be slow if there
-      // are lots of warnings in one file.
       js = getCode();
     } catch (IOException e) {
       return null;
     }
-
     int pos = 0;
     int startLine = 1;
-
-    // If we've saved a previous offset and it's for a line less than the
-    // one we're searching for, then start at that point.
     if (lineNumber >= lastLine) {
       pos = lastOffset;
       startLine = lastLine;
     }
-
     for (int n = startLine; n < lineNumber; n++) {
       int nextpos = js.indexOf('\n', pos);
       if (nextpos == -1) {
         return null;
       }
       pos = nextpos + 1;
     }
-
-    // Remember this offset for the next search we do.
     lastOffset = pos;
     lastLine = lineNumber;
-
     if (js.indexOf('\n', pos) == -1) {
-      // If next new line cannot be found, there are two cases
-      // 1. pos already reaches the end of file, then null should be returned
-      // 2. otherwise, return the contents between pos and the end of file.
+// buggy code
+//         return null;
+     if (pos == 0) {
         return null;
+      }
     } else {
       return js.substring(pos, js.indexOf('\n', pos));
     }
   }
