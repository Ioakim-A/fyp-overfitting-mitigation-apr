diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/28ce0d01-6022-4fbe-9551-0b8710f85aa3_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e531d38f-a39e-4373-b27a-7bde7fe9f3af_fixed.java
index b108107..94fc1ea 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/28ce0d01-6022-4fbe-9551-0b8710f85aa3_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e531d38f-a39e-4373-b27a-7bde7fe9f3af_fixed.java
@@ -1,25 +1,25 @@
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
-
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
-    if (constraintObj != null && constraintObj.isRecordType()) {
-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
-      if (objType != null) {
-        for (String prop : constraintObj.getOwnPropertyNames()) {
-          JSType propType = constraintObj.getPropertyType(prop);
-          if (!objType.isPropertyTypeDeclared(prop)) {
-            JSType typeToInfer = propType;
-            if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
-            }
-            objType.defineInferredProperty(prop, typeToInfer, null);
-          }
-        }
-      }
+// buggy code
+//     if (constraintObj != null && constraintObj.isRecordType()) {
+//       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
+//       if (objType != null) {
+//         for (String prop : constraintObj.getOwnPropertyNames()) {
+//           JSType propType = constraintObj.getPropertyType(prop);
+//           if (!objType.isPropertyTypeDeclared(prop)) {
+//             JSType typeToInfer = propType;
+//             if (!objType.hasProperty(prop)) {
+//               typeToInfer =
+//                   getNativeType(VOID_TYPE).getLeastSupertype(propType);
+//             }
+//             objType.defineInferredProperty(prop, typeToInfer, null);
+//           }
+//         }
+//       }
     }
   }
