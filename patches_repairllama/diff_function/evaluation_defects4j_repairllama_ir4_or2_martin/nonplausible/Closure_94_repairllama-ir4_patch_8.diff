diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/89a85157-6541-46fe-82bc-4f92fa6648e1_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/91b52629-6b5b-4c31-94ad-28760fcec363_fixed.java
index 02afa2a..9738ffe 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/89a85157-6541-46fe-82bc-4f92fa6648e1_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/91b52629-6b5b-4c31-94ad-28760fcec363_fixed.java
@@ -1,28 +1,26 @@
   static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
       case Token.STRING:
       case Token.NUMBER:
       case Token.TRUE:
       case Token.FALSE:
         return true;
-
-      // Binary operators are only valid if both children are valid.
-      case Token.BITAND:
-      case Token.BITNOT:
-      case Token.BITOR:
-      case Token.BITXOR:
-
-      // Uniary operators are valid if the child is valid.
+// buggy code
+//       case Token.BITAND:
+//       case Token.BITNOT:
+//       case Token.BITOR:
+//       case Token.BITXOR:
+//       case Token.NOT:
+//       case Token.NEG:
+     case Token.AND:
       case Token.NOT:
       case Token.NEG:
         return isValidDefineValue(val.getFirstChild(), defines);
-
-      // Names are valid if and only if they are defines themselves.
       case Token.NAME:
       case Token.GETPROP:
         if (val.isQualifiedName()) {
           return defines.contains(val.getQualifiedName());
         }
     }
     return false;
   }
