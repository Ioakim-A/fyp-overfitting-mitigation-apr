diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f430bec9-dab7-4b57-8878-150cb565fbe9_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/10ceb83b-e71e-420f-84ec-29dff35b3ade_fixed.java
index 19fd63e..20f2ed5 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f430bec9-dab7-4b57-8878-150cb565fbe9_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/10ceb83b-e71e-420f-84ec-29dff35b3ade_fixed.java
@@ -1,24 +1,27 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
+// buggy code
+//          // IE has a bug where event handlers behave differently when
+//          // their return value is used vs. when their return value is in
+//          // an EXPR_RESULT. It's pretty freaking weird. See:
+//          // http://code.google.com/p/closure-compiler/issues/detail?id=291
+//          // We try to detect this case, and not fold EXPR_RESULTs
+//          // into other expressions.
+//            // We only have to worry about methods with an implicit 'this'
+//            // param, or this doesn't happen.
+//          return NodeUtil.isExpressionNode(maybeExpr);
+        if (maybeExpr.getType() == Token.EXPR_RESULT) {
+          return NodeUtil.isExpressionNode(maybeExpr.getFirstChild());
+        }
         return NodeUtil.isExpressionNode(maybeExpr);
-      }
-    }
 
+      }
+    }
     return false;
   }
