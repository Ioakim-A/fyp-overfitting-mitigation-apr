diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/387aa704-6b1c-40dd-acc3-ca4e2f72f2b9_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6c8157da-acce-4a26-ad19-a7caa546d9fb_fixed.java
index eea9e73..1762f93 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/387aa704-6b1c-40dd-acc3-ca4e2f72f2b9_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6c8157da-acce-4a26-ad19-a7caa546d9fb_fixed.java
@@ -1,41 +1,49 @@
     /**
      * <p>Checks if the CharSequence contains any character in the given
      * set of characters.</p>
      *
      * <p>A <code>null</code> CharSequence will return <code>false</code>.
      * A <code>null</code> or zero length search array will return <code>false</code>.</p>
      *
      * <pre>
      * StringUtils.containsAny(null, *)                = false
      * StringUtils.containsAny("", *)                  = false
      * StringUtils.containsAny(*, null)                = false
      * StringUtils.containsAny(*, [])                  = false
      * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
      * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
      * StringUtils.containsAny("aba", ['z'])           = false
      * </pre>
      *
      * @param cs  the CharSequence to check, may be null
      * @param searchChars  the chars to search for, may be null
      * @return the <code>true</code> if any of the chars are found,
      * <code>false</code> if no match or null input
      * @since 2.4
      */
 	public static boolean containsAny(CharSequence cs, char[] searchChars) {
 		if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
 			return false;
 		}
 		int csLength = cs.length();
 		int searchLength = searchChars.length;
+// buggy code
+//		for (int i = 0; i < csLength; i++) {
+//			char ch = cs.charAt(i);
+//			for (int j = 0; j < searchLength; j++) {
+//				if (searchChars[j] == ch) {
+//						// ch is a supplementary character
+//						// ch is in the Basic Multilingual Plane
+//						return true;
 			for (int i = 0; i < csLength; i++) {
 				char ch = cs.charAt(i);
 				for (int j = 0; j < searchLength; j++) {
 					if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
 						return true;
 					}
+
+				}
 			}
 		}
 		return false;
 	}
