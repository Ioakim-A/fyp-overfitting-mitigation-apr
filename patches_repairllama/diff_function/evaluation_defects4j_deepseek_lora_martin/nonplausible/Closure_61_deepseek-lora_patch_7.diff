diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/db302da1-6757-4060-9de9-c85ae6bb0bbb_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4c9512bc-f432-44a3-9143-595865457232_fixed.java
index b36c3f0..b7a9598 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/db302da1-6757-4060-9de9-c85ae6bb0bbb_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4c9512bc-f432-44a3-9143-595865457232_fixed.java
@@ -1,58 +1,56 @@
   /**
    * Returns true if calls to this function have side effects.
    *
    * @param callNode The call node to inspected.
    * @param compiler A compiler object to provide program state changing
    *     context information. Can be null.
    */
   static boolean functionCallHasSideEffects(
       Node callNode, @Nullable AbstractCompiler compiler) {
     if (callNode.getType() != Token.CALL) {
       throw new IllegalStateException(
           "Expected CALL node, got " + Token.name(callNode.getType()));
     }
-
     if (callNode.isNoSideEffectsCall()) {
       return false;
     }
-
     Node nameNode = callNode.getFirstChild();
-
     // Built-in functions with no side effects.
     if (nameNode.getType() == Token.NAME) {
       String name = nameNode.getString();
       if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
         return false;
       }
     } else if (nameNode.getType() == Token.GETPROP) {
       if (callNode.hasOneChild()
           && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
                 nameNode.getLastChild().getString())) {
         return false;
       }
-
       if (callNode.isOnlyModifiesThisCall()
           && evaluatesToLocalValue(nameNode.getFirstChild())) {
         return false;
       }
-
       // Functions in the "Math" namespace have no side effects.
+// buggy code
+      if (nameNode.getFirstChild().getString().equals("Math")) {
+        return false;
+      }
 
       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
         if (nameNode.getFirstChild().getType() == Token.REGEXP
             && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
           return false;
         } else if (nameNode.getFirstChild().getType() == Token.STRING
             && STRING_REGEXP_METHODS.contains(
                 nameNode.getLastChild().getString())) {
           Node param = nameNode.getNext();
           if (param != null &&
               (param.getType() == Token.STRING
                   || param.getType() == Token.REGEXP))
           return false;
         }
       }
     }
-
     return true;
   }
