diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f26bf844-2dc2-426f-9141-a465d04f321f_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/cb912c9c-84e1-49e3-8160-54bc4f2a63a9_fixed.java
index 388771b..56f441b 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f26bf844-2dc2-426f-9141-a465d04f321f_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/cb912c9c-84e1-49e3-8160-54bc4f2a63a9_fixed.java
@@ -1,37 +1,40 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the index of the first time period to copy.
      * @param end  the index of the last time period to copy.
      *
      * @return A series containing a copy of this times series from start until
      *         end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
     public TimeSeries createCopy(int start, int end)
             throws CloneNotSupportedException {
         if (start < 0) {
             throw new IllegalArgumentException("Requires start >= 0.");
         }
         if (end < start) {
             throw new IllegalArgumentException("Requires start <= end.");
         }
         TimeSeries copy = (TimeSeries) super.clone();
+// buggy code
+        end = Math.min(end, this.data.size() - 1);
+
         copy.data = new java.util.ArrayList();
         if (this.data.size() > 0) {
             for (int index = start; index <= end; index++) {
                 TimeSeriesDataItem item
                         = (TimeSeriesDataItem) this.data.get(index);
                 TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
                 try {
                     copy.add(clone);
                 }
                 catch (SeriesException e) {
                     e.printStackTrace();
                 }
             }
         }
         return copy;
     }
