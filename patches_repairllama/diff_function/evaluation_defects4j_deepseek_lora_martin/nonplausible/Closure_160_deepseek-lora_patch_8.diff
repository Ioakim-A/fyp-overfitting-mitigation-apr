diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c3187ebb-a07d-4175-94d3-9a4911f4ea85_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/ddf48e40-d500-4224-9a40-72c13206b920_fixed.java
index b05b859..0af1d1c 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c3187ebb-a07d-4175-94d3-9a4911f4ea85_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/ddf48e40-d500-4224-9a40-72c13206b920_fixed.java
@@ -1,61 +1,59 @@
   /**
    * Initialize the compiler options. Only necessary if you're not doing
    * a normal compile() job.
    */
   public void initOptions(CompilerOptions options) {
     this.options = options;
     if (errorManager == null) {
       if (outStream == null) {
         setErrorManager(
             new LoggerErrorManager(createMessageFormatter(), logger));
       } else {
         PrintStreamErrorManager printer =
             new PrintStreamErrorManager(createMessageFormatter(), outStream);
         printer.setSummaryDetailLevel(options.summaryDetailLevel);
         setErrorManager(printer);
       }
     }
-
     // DiagnosticGroups override the plain checkTypes option.
     if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = true;
     } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = false;
     } else if (!options.checkTypes) {
       // If DiagnosticGroups did not override the plain checkTypes
       // option, and checkTypes is enabled, then turn off the
       // parser type warnings.
       options.setWarningLevel(
           DiagnosticGroup.forType(
               RhinoErrorReporter.TYPE_PARSE_ERROR),
           CheckLevel.OFF);
     }
-
     if (options.checkGlobalThisLevel.isOn()) {
       options.setWarningLevel(
           DiagnosticGroups.GLOBAL_THIS,
           options.checkGlobalThisLevel);
     }
-
     // Initialize the warnings guard.
     List<WarningsGuard> guards = Lists.newArrayList();
     guards.add(
         new SuppressDocWarningsGuard(
             getDiagnosticGroups().getRegisteredGroups()));
     guards.add(options.getWarningsGuard());
-
-
-    // All passes must run the variable check. This synthesizes
-    // variables later so that the compiler doesn't crash. It also
-    // checks the externs file for validity. If you don't want to warn
-    // about missing variable declarations, we shut that specific
-    // error off.
-    if (!options.checkSymbols &&
-        (warningsGuard == null || !warningsGuard.disables(
-            DiagnosticGroups.CHECK_VARIABLES))) {
-      guards.add(new DiagnosticGroupWarningsGuard(
-          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
-    }
-
+// buggy code
+//    // All passes must run the variable check. This synthesizes
+//    // variables later so that the compiler doesn't crash. It also
+//    // checks the externs file for validity. If you don't want to warn
+//    // about missing variable declarations, we shut that specific
+//    // error off.
+//    if (!options.checkSymbols &&
+//        (warningsGuard == null || !warningsGuard.disables(
+//            DiagnosticGroups.CHECK_VARIABLES))) {
+//      guards.add(new DiagnosticGroupWarningsGuard(
+//          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
+//    }
+//    this.warningsGuard = new ComposeWarningsGuard(guards);
     this.warningsGuard = new ComposeWarningsGuard(guards);
+    this.warningsGuard.init(options);
+
   }
