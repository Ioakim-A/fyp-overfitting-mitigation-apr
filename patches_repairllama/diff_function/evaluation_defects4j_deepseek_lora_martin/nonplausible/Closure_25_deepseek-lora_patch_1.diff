diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e0ea3d70-ccf2-478b-b7e9-52bd818235bb_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/dd3792eb-f7f9-4666-9207-f404cb03d88f_fixed.java
index b98f0a7..90521bf 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e0ea3d70-ccf2-478b-b7e9-52bd818235bb_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/dd3792eb-f7f9-4666-9207-f404cb03d88f_fixed.java
@@ -1,29 +1,54 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
-
-    Node constructor = n.getFirstChild();
-    scope = traverse(constructor, scope);
-    JSType constructorType = constructor.getJSType();
+// buggy code
+//    Node constructor = n.getFirstChild();
+//    scope = traverse(constructor, scope);
+//    JSType constructorType = constructor.getJSType();
+//    JSType type = null;
+//    if (constructorType != null) {
+//      constructorType = constructorType.restrictByNotNullOrUndefined();
+//      if (constructorType.isUnknownType()) {
+//        type = getNativeType(UNKNOWN_TYPE);
+//      } else {
+//        FunctionType ct = constructorType.toMaybeFunctionType();
+//        if (ct == null && constructorType instanceof FunctionType) {
+//          // If constructorType is a NoObjectType, then toMaybeFunctionType will
+//          // return null. But NoObjectType implements the FunctionType
+//          // interface, precisely because it can validly construct objects.
+//          ct = (FunctionType) constructorType;
+//        }
+//        if (ct != null && ct.isConstructor()) {
+//          type = ct.getInstanceType();
+//        }
+//      }
+//    }
+//    n.setJSType(type);
+//    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+//      scope = traverse(arg, scope);
+//    }
+    scope = traverse(n.getFirstChild(), scope);
+    JSType constructorType = n.getFirstChild().getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
     n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+    for (Node arg = n.getFirstChild().getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
+
     return scope;
   }
