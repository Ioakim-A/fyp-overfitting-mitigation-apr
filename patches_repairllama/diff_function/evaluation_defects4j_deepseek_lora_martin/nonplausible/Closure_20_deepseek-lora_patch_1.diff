diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/76e80f9c-e03e-4fc3-a55b-999c9687a4ef_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/fdd77221-b00e-45d5-8c8f-01c0667628b8_fixed.java
index d4e6d48..f0c3755 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/76e80f9c-e03e-4fc3-a55b-999c9687a4ef_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/fdd77221-b00e-45d5-8c8f-01c0667628b8_fixed.java
@@ -1,23 +1,26 @@
   private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
     if (callTarget != null && callTarget.isName() &&
           callTarget.getString().equals("String")) {
       // Fold String(a) to '' + (a) on immutable literals,
       // which allows further optimizations
       //
       // We can't do this in the general case, because String(a) has
       // slightly different semantics than '' + (a). See
       // http://code.google.com/p/closure-compiler/issues/detail?id=759
       Node value = callTarget.getNext();
-      if (value != null) {
+// buggy code
+//      if (value != null) {
+      if (value != null && value.isConstant()) {
+
         Node addition = IR.add(
             IR.string("").srcref(callTarget),
             value.detachFromParent());
         n.getParent().replaceChild(n, addition);
         reportCodeChange();
         return addition;
       }
     }
     return n;
   }
