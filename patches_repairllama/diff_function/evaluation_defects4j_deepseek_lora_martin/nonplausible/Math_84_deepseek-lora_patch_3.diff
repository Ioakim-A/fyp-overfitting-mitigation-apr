diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b5576484-d24c-46ab-83a9-a37d0bfa4aea_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/49ca935c-861a-4697-93b6-b4faa36f0039_fixed.java
index 5f1dcf2..82e458a 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b5576484-d24c-46ab-83a9-a37d0bfa4aea_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/49ca935c-861a-4697-93b6-b4faa36f0039_fixed.java
@@ -1,41 +1,34 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
-
-        while (true) {
-
-            incrementIterationsCounter();
-
-            // save the original vertex
-            final RealPointValuePair[] original = simplex;
-            final RealPointValuePair best = original[0];
-
-            // perform a reflection step
-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
-            if (comparator.compare(reflected, best) < 0) {
-
-                // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
-                    simplex = reflectedSimplex;
-                }
-
-                return;
-
-            }
-
-            // compute the contracted simplex
-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
+// buggy code
+//        while (true) {
+//            incrementIterationsCounter();
+//            // save the original vertex
+//            final RealPointValuePair[] original = simplex;
+//            final RealPointValuePair best = original[0];
+//            // perform a reflection step
+//            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
+//            if (comparator.compare(reflected, best) < 0) {
+//                // compute the expanded simplex
+//                final RealPointValuePair[] reflectedSimplex = simplex;
+//                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
+//                if (comparator.compare(reflected, expanded) <= 0) {
+//                    // accept the reflected simplex
+//                    simplex = reflectedSimplex;
+//                }
+//                return;
+//            }
+//            // compute the contracted simplex
+//            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
+//            if (comparator.compare(contracted, best) < 0) {
+//                // accept the contracted simplex
+//            // check convergence
+//            if (comparator.compare(contracted, best) < 0) {
                 if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
 
-            // check convergence
                 return;
             }
-
         }
-
     }
