diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2a1193a7-ba39-4536-8112-e412f1bd5ca0_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9d0ea78d-4427-4a29-a3dd-5200e0d81d21_fixed.java
index d6a560a..9b88f6c 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2a1193a7-ba39-4536-8112-e412f1bd5ca0_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9d0ea78d-4427-4a29-a3dd-5200e0d81d21_fixed.java
@@ -1,33 +1,40 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
     // TODO(user): Investigate whether it is really necessary to keep two
     // different mechanisms for resolving named types, and if so, which order
     // makes more sense. Now, resolution via registry is first in order to
     // avoid triggering the warnings built into the resolution via properties.
     boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
+// buggy code
+//    if (detectImplicitPrototypeCycle()) {
+//      handleTypeCycle(t);
+//    }
+//    if (resolved) {
+//      super.resolveInternal(t, enclosing);
+//      finishPropertyContinuations();
+//      return registry.isLastGeneration() ?
+//          getReferencedType() : this;
+//    }
+//    resolveViaProperties(t, enclosing);
+//    if (detectImplicitPrototypeCycle()) {
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
-
     resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
+
       handleTypeCycle(t);
     }
-
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
