diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/05a461c1-c15e-408c-9d5c-1d01f7a52870_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/7049e700-868a-4283-83db-f1396c7954bc_fixed.java
index cfdcd9c..6e2148d 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/05a461c1-c15e-408c-9d5c-1d01f7a52870_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/7049e700-868a-4283-83db-f1396c7954bc_fixed.java
@@ -1,51 +1,49 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
     if (isAssignmentTarget(n)) {
       return n;
     }
-
     if (!right.isNumber()) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
-
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
-
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
-
     Node current = left.getFirstChild();
     Node elem = null;
-    for (int i = 0; current != null && i < intIndex; i++) {
+// buggy code
+//    for (int i = 0; current != null && i < intIndex; i++) {
+//        elem = current;
+    int i = 0;
+    while (current != null && i < intIndex) {
       elem = current;
+      i++;
 
       current = current.getNext();
     }
-
     if (elem == null) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
-
     if (elem.isEmpty()) {
       elem = NodeUtil.newUndefinedNode(elem);
     } else {
       left.removeChild(elem);
     }
-
     // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
   }
