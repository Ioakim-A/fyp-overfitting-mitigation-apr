diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f943994f-348b-4b98-a9c7-aefb2503fac0_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/109fff3e-304b-4aaa-a408-de226c86607b_fixed.java
index 51ebfca..6f9ea2f 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f943994f-348b-4b98-a9c7-aefb2503fac0_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/109fff3e-304b-4aaa-a408-de226c86607b_fixed.java
@@ -1,32 +1,33 @@
     /**
      * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.
      * 
      * @param binaryData
      *            Array containing binary data to encode.
      * @param isChunked
      *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks
      * @param urlSafe
      *            if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.
      * @param maxResultSize
      *            The maximum result size to accept.
      * @return Base64-encoded data.
      * @throws IllegalArgumentException
      *             Thrown when the input array needs an output array bigger than maxResultSize
      * @since 1.4
      */
     public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {
         if (binaryData == null || binaryData.length == 0) {
             return binaryData;
         }
+// buggy code
+//        long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
+        long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE);
 
-        long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
             throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
         }
-                
         Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);
         return b64.encode(binaryData);
     }
