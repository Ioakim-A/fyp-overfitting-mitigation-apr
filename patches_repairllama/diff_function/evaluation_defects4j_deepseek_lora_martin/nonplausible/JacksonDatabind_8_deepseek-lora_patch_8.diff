diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f3e3edff-6bf4-4a5d-bad8-77043e959a27_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c92143dc-adc0-49c4-bb61-4157018874c0_fixed.java
index c9da1b7..d7dd21c 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f3e3edff-6bf4-4a5d-bad8-77043e959a27_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c92143dc-adc0-49c4-bb61-4157018874c0_fixed.java
@@ -1,33 +1,42 @@
     protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
     {
         final int mask = (1 << typeIndex);
         _hasNonDefaultCreator = true;
         AnnotatedWithParams oldOne = _creators[typeIndex];
         // already had an explicitly marked one?
         if (oldOne != null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
+// buggy code
+//            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
+//                // but skip, if new one not annotated
+//                if (!explicit) {
+//                    return;
+//                }
+//                // both explicit: verify
+//                // otherwise only verify if neither explicitly annotated.
+//            }
+//            // one more thing: ok to override in sub-class
+//            if (oldOne.getClass() == newOne.getClass()) {
+//                // [databind#667]: avoid one particular class of bogus problems
+//                    throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
+//                            +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
+//                // otherwise, which one to choose?
+//                    // new type more generic, use old
                 if (!explicit) {
                     return;
                 }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
             }
-
-            // one more thing: ok to override in sub-class
             if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
                 throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                         +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
+            }
+        } else {
+            if (explicit) {
+
                 // new type more specific, use it
             }
         }
         if (explicit) {
             _explicitCreators |= mask;
         }
         _creators[typeIndex] = _fixAccess(newOne);
     }
