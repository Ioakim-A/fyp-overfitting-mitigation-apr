diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/af6029d6-fddb-48de-9394-c4d1cbaaf0ac_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a0e84f8a-33a2-41e4-b13a-a68a380b46f6_fixed.java
index 5f1dcf2..fafdedb 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/af6029d6-fddb-48de-9394-c4d1cbaaf0ac_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a0e84f8a-33a2-41e4-b13a-a68a380b46f6_fixed.java
@@ -1,41 +1,35 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
-
-        while (true) {
-
-            incrementIterationsCounter();
-
-            // save the original vertex
-            final RealPointValuePair[] original = simplex;
-            final RealPointValuePair best = original[0];
-
-            // perform a reflection step
-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
-            if (comparator.compare(reflected, best) < 0) {
-
-                // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
-                    simplex = reflectedSimplex;
-                }
+// buggy code
+//        while (true) {
+//            incrementIterationsCounter();
+//            // save the original vertex
+//            final RealPointValuePair[] original = simplex;
+//            final RealPointValuePair best = original[0];
+//            // perform a reflection step
+//            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
+//            if (comparator.compare(reflected, best) < 0) {
+//                // compute the expanded simplex
+//                final RealPointValuePair[] reflectedSimplex = simplex;
+//                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
+//                if (comparator.compare(reflected, expanded) <= 0) {
+//                    // accept the reflected simplex
+//                    simplex = reflectedSimplex;
+//                }
+//                return;
+//            }
+//            // compute the contracted simplex
+//            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
+//            if (comparator.compare(contracted, best) < 0) {
+//                // accept the contracted simplex
+//            // check convergence
+//            checkConvergence();
+//            incrementIterationsCounter();
+//            // save the original vertex
 
                 return;
-
             }
-
-            // compute the contracted simplex
-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
-                return;
         }
-
-        }
-
     }
