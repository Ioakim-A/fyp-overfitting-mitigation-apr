diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/461ef907-6728-4ff7-9c5a-89fb9d280399_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a1b4b371-88cf-45d2-a31b-58e466df2555_fixed.java
index 233a867..30735ad 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/461ef907-6728-4ff7-9c5a-89fb9d280399_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a1b4b371-88cf-45d2-a31b-58e466df2555_fixed.java
@@ -1,73 +1,67 @@
   /**
    * Determines whether a function can be inlined at a particular call site.
    * There are several criteria that the function and reference must hold in
    * order for the functions to be inlined:
    * 1) If a call's arguments have side effects,
    * the corresponding argument in the function must only be referenced once.
    * For instance, this will not be inlined:
    * <pre>
    *     function foo(a) { return a + a }
    *     x = foo(i++);
    * </pre>
    */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
-
     Node block = fnNode.getLastChild();
-
-
-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]
-    Node cArg = callNode.getFirstChild().getNext();
-
-    // Functions called via 'call' and 'apply' have a this-object as
-    // the first parameter, but this is not part of the called function's
-    // parameter list.
-    if (!callNode.getFirstChild().isName()) {
-      if (NodeUtil.isFunctionObjectCall(callNode)) {
-        // TODO(johnlenz): Support replace this with a value.
-        if (cArg == null || !cArg.isThis()) {
-          return CanInlineResult.NO;
-        }
-        cArg = cArg.getNext();
-      } else {
-        // ".apply" call should be filtered before this.
-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
-      }
-    }
-
-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
-    while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
-      if (fnParam != null) {
-        if (cArg != null) {
+// buggy code
+//    // CALL NODE: [ NAME, ARG1, ARG2, ... ]
+//    Node cArg = callNode.getFirstChild().getNext();
+//    // Functions called via 'call' and 'apply' have a this-object as
+//    // the first parameter, but this is not part of the called function's
+//    // parameter list.
+//    if (!callNode.getFirstChild().isName()) {
+//      if (NodeUtil.isFunctionObjectCall(callNode)) {
+//        // TODO(johnlenz): Support replace this with a value.
+//        if (cArg == null || !cArg.isThis()) {
+//          return CanInlineResult.NO;
+//        }
+//        cArg = cArg.getNext();
+//      } else {
+//        // ".apply" call should be filtered before this.
+//        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
+//      }
+//    }
+//    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
+//    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
+//    while (cArg != null || fnParam != null) {
+//      // For each named parameter check if a mutable argument use more than one.
+//      if (fnParam != null) {
+//        if (cArg != null) {
+//        if (cArg.isThis()) {
 
           // Check for arguments that are evaluated more than once.
           // Note: Unlike block inlining, there it is not possible that a
           // parameter reference will be in a loop.
           if (NodeUtil.mayEffectMutableState(cArg, compiler)
               && NodeUtil.getNameReferenceCount(
                   block, fnParam.getString()) > 1) {
             return CanInlineResult.NO;
           }
         }
-
         // Move to the next name.
         fnParam = fnParam.getNext();
       }
-
       // For every call argument check for side-effects, even if there
       // isn't a named parameter to match.
       if (cArg != null) {
         if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       }
     }
-
     return CanInlineResult.YES;
   }
