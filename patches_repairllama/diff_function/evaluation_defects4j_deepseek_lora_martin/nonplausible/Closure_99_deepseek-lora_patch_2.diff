diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2d33b079-b656-4eb1-95b2-28bb9c21250d_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/24b95057-2c3a-4294-99b0-8868fea692d0_fixed.java
index 86553f4..3b2cae8 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2d33b079-b656-4eb1-95b2-28bb9c21250d_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/24b95057-2c3a-4294-99b0-8868fea692d0_fixed.java
@@ -1,57 +1,91 @@
   /**
    * Since this pass reports errors only when a global {@code this} keyword
    * is encountered, there is no reason to traverse non global contexts.
    */
   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
-
     if (n.getType() == Token.FUNCTION) {
       // Don't traverse functions that are constructors or have the @this
       // or @override annotation.
       JSDocInfo jsDoc = getFunctionJsDocInfo(n);
       if (jsDoc != null &&
           (jsDoc.isConstructor() ||
+// buggy code
+//           jsDoc.hasThisType() ||
+//           jsDoc.isOverride())) {
+//        return false;
+//      }
+//      // Don't traverse functions unless they would normally
+//      // be able to have a @this annotation associated with them. e.g.,
+//      // var a = function() { }; // or
+//      // function a() {} // or
+//      // a.x = function() {};
+//      int pType = parent.getType();
+//      if (!(pType == Token.BLOCK ||
+//            pType == Token.SCRIPT ||
+//            pType == Token.NAME ||
+//            pType == Token.ASSIGN)) {
+//        return false;
+//      }
+//    }
+//    if (parent != null && parent.getType() == Token.ASSIGN) {
+//      Node lhs = parent.getFirstChild();
+//      Node rhs = lhs.getNext();
+//      if (n == lhs) {
+//        // Always traverse the left side of the assignment. To handle
+//        // nested assignments properly (e.g., (a = this).property = c;),
+//        // assignLhsChild should not be overridden.
+//        if (assignLhsChild == null) {
+//          assignLhsChild = lhs;
+//        }
+//      } else {
+//        // Only traverse the right side if it's not an assignment to a prototype
+//        // property or subproperty.
+//          if (lhs.getType() == Token.GETPROP &&
+//              lhs.getLastChild().getString().equals("prototype")) {
+//            return false;
+//          }
+//          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
+//            return false;
+//          }
           jsDoc.hasThisType() ||
           jsDoc.isOverride())) {
         return false;
       }
-
       // Don't traverse functions unless they would normally
       // be able to have a @this annotation associated with them. e.g.,
       // var a = function() { }; // or
       // function a() {} // or
       // a.x = function() {};
       int pType = parent.getType();
       if (!(pType == Token.BLOCK ||
             pType == Token.SCRIPT ||
             pType == Token.NAME ||
             pType == Token.ASSIGN)) {
         return false;
       }
     }
-
     if (parent != null && parent.getType() == Token.ASSIGN) {
       Node lhs = parent.getFirstChild();
       Node rhs = lhs.getNext();
-      
       if (n == lhs) {
         // Always traverse the left side of the assignment. To handle
         // nested assignments properly (e.g., (a = this).property = c;),
         // assignLhsChild should not be overridden.
         if (assignLhsChild == null) {
           assignLhsChild = lhs;
         }
       } else {
         // Only traverse the right side if it's not an assignment to a prototype
         // property or subproperty.
         if (lhs.getType() == Token.GETPROP &&
             lhs.getLastChild().getString().equals("prototype")) {
           return false;
         }
         if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
           return false;
         }
-      }
-    }
 
+      }
+    }
     return true;
   }
