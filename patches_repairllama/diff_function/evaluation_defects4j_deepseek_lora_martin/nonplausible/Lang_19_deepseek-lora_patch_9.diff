diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c9168625-3c57-4f45-b2ad-cb707644b631_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a3a78323-4b20-4062-8a50-11b5fa11e8ee_fixed.java
index 72a422c..4fb9793 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c9168625-3c57-4f45-b2ad-cb707644b631_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a3a78323-4b20-4062-8a50-11b5fa11e8ee_fixed.java
@@ -1,51 +1,80 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
         // Uses -2 to ensure there is something after the &#
+// buggy code
+//        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+//            int start = index + 2;
+//            boolean isHex = false;
+//            char firstChar = input.charAt(start);
+//            if(firstChar == 'x' || firstChar == 'X') {
+//                start++;
+//                isHex = true;
+//                // Check there's more than just an x after the &#
+//            }
+//            int end = start;
+//            // Note that this supports character codes without a ; on the end
+//            while(input.charAt(end) != ';')
+//            {
+//                end++;
+//            }
+//            int entityValue;
+//            try {
+//                if(isHex) {
+//                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+//                } else {
+//                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+//                }
+//            } catch(NumberFormatException nfe) {
+//            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+//                return 0;
+//            }
+//            if(entityValue > 0xFFFF) {
+//                char[] chrs = Character.toChars(entityValue);
+//                out.write(chrs[0]);
+//                out.write(chrs[1]);
+//            } else {
+//                out.write(entityValue);
+//            }
+//            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
             if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
                 int start = index + 2;
                 boolean isHex = false;
-
                 char firstChar = input.charAt(start);
                 if(firstChar == 'x' || firstChar == 'X') {
                     start++;
                     isHex = true;
-
                     // Check there's more than just an x after the &#
                 }
-
                 int end = start;
                 // Note that this supports character codes without a ; on the end
                 while(input.charAt(end) != ';')
                 {
                     end++;
                 }
-
                 int entityValue;
                 try {
                     if(isHex) {
                         entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                     } else {
                         entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                     }
                 } catch(NumberFormatException nfe) {
                 System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
                     return 0;
                 }
-
                 if(entityValue > 0xFFFF) {
                     char[] chrs = Character.toChars(entityValue);
                     out.write(chrs[0]);
                     out.write(chrs[1]);
                 } else {
                     out.write(entityValue);
                 }
+                return end - index;
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
         }
         return 0;
     }
