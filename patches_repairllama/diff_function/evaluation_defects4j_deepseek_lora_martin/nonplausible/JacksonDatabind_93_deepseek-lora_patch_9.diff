diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/44fedb9b-6092-4d86-8dc5-e410f1e9855e_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/5c61bc6a-c698-4b59-a92c-870c81bdbc45_fixed.java
index 2d9cf24..1b0fd7f 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/44fedb9b-6092-4d86-8dc5-e410f1e9855e_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/5c61bc6a-c698-4b59-a92c-870c81bdbc45_fixed.java
@@ -1,33 +1,37 @@
     public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException
     {
         // There are certain nasty classes that could cause problems, mostly
         // via default typing -- catch them here.
         final Class<?> raw = type.getRawClass();
         String full = raw.getName();
-
         main_check:
         do {
             if (_cfgIllegalClassNames.contains(full)) {
                 break;
             }
-
             // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling
             //    for some Spring framework types
             // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces
-            if (full.startsWith(PREFIX_STRING)) {
+// buggy code
+//            if (full.startsWith(PREFIX_STRING)) {
+//                for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {
+            if (raw.isClass()) {
                 for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {
+                    if (!cls.isClass()) {
+                        break;
+                    }
+
                     String name = cls.getSimpleName();
                     // looking for "AbstractBeanFactoryPointcutAdvisor" but no point to allow any is there?
                     if ("AbstractPointcutAdvisor".equals(name)
                             // ditto  for "FileSystemXmlApplicationContext": block all ApplicationContexts
                             || "AbstractApplicationContext".equals(name)) {
                         break main_check;
                     }
                 }
             }
             return;
         } while (false);
-
         throw JsonMappingException.from(ctxt,
                 String.format("Illegal type (%s) to deserialize: prevented for security reasons", full));
     }
