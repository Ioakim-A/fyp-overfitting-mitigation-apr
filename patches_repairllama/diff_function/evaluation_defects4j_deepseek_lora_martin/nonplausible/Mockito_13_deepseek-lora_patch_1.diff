diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/5879be3e-5640-4dc1-a384-65f0d9bf50f9_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4842b414-58c3-4a01-874d-db9fb0c04cde_fixed.java
index 5481b94..83ff735 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/5879be3e-5640-4dc1-a384-65f0d9bf50f9_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4842b414-58c3-4a01-874d-db9fb0c04cde_fixed.java
@@ -1,49 +1,49 @@
     public Object handle(Invocation invocation) throws Throwable {
         if (invocationContainerImpl.hasAnswersForStubbing()) {
             // stubbing voids with stubVoid() or doAnswer() style
             InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress
                             .getArgumentMatcherStorage(), invocation);
             invocationContainerImpl.setMethodForStubbing(invocationMatcher);
             return null;
         }
         VerificationMode verificationMode = mockingProgress.pullVerificationMode();
-
         InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),
                         invocation);
-
         mockingProgress.validateState();
-
         //if verificationMode is not null then someone is doing verify()        
         if (verificationMode != null) {
             //We need to check if verification was started on the correct mock 
             // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
-            if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {
+// buggy code
+//            if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {
+//                VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);            
+//                verificationMode.verify(data);
+//                return null;
+//                // this means there is an invocation on a different mock. Re-adding verification mode 
+//                // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
+            if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock().equals(invocation.getMock())) {
                 VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);            
                 verificationMode.verify(data);
                 return null;
                 // this means there is an invocation on a different mock. Re-adding verification mode 
-                // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
-            }
-        }
                
+            }
+        }
         invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);
         OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);
         mockingProgress.reportOngoingStubbing(ongoingStubbing);
-
         StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);
-
         if (stubbedInvocation != null) {
             stubbedInvocation.captureArgumentsFrom(invocation);
             return stubbedInvocation.answer(invocation);
         } else {
             Object ret = mockSettings.getDefaultAnswer().answer(invocation);
-
             // redo setting invocation for potential stubbing in case of partial
             // mocks / spies.
             // Without it, the real method inside 'when' might have delegated
             // to other self method and overwrite the intended stubbed method
             // with a different one. The reset is required to avoid runtime exception that validates return type with stubbed method signature.
             invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);
             return ret;
         }
     }
