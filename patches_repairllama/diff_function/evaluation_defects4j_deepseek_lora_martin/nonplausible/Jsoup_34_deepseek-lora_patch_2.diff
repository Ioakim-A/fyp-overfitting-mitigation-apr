diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/552666da-dcac-444d-a94d-6d442386fc15_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c971b94b-e9e1-4d8b-ac84-7fb3d2f2cbf7_fixed.java
index 21f64c6..e163231 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/552666da-dcac-444d-a94d-6d442386fc15_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c971b94b-e9e1-4d8b-ac84-7fb3d2f2cbf7_fixed.java
@@ -1,23 +1,26 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
         // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
         for (int offset = pos; offset < length; offset++) {
             // scan to first instance of startchar:
             if (startChar != input[offset])
                 while(++offset < length && startChar != input[offset]);
             int i = offset + 1;
             int last = i + seq.length()-1;
-            if (offset < length) {
+// buggy code
+//            if (offset < length) {
+            if (i < length) {
+
                 for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
                 if (i == last) // found full sequence
                     return offset - pos;
             }
         }
         return -1;
     }
