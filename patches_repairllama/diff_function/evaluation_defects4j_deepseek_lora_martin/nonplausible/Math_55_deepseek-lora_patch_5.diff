diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e551242e-f57f-467f-b38c-b334231c03c1_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/892cb34a-401b-4d66-8164-e1b693099984_fixed.java
index 1478ee1..b2ebc42 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e551242e-f57f-467f-b38c-b334231c03c1_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/892cb34a-401b-4d66-8164-e1b693099984_fixed.java
@@ -1,24 +1,23 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
-
-
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+// buggy code
+//      // rescale both vectors without losing precision,
+//      // to ensure their norm are the same order of magnitude
+//      // we reduce cancellation errors by preconditioning,
+//      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
+//      // v3 without loss of precision. See Kahan lecture
+//      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
+//      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+//      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+//      // compute cross product from v3 and v2 instead of v1 and v2
+//      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    final double norm1 = v1.norm();
+    final double norm2 = v2.norm();
+    return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x)
+        .scale(norm1 * norm2);
 
   }
