diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e9dcb31c-e63f-42e6-96cd-51547a6b69c5_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/ce4e017e-affc-4a7c-a02e-837576a07cda_fixed.java
index 1c53d31..e8c75be 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e9dcb31c-e63f-42e6-96cd-51547a6b69c5_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/ce4e017e-affc-4a7c-a02e-837576a07cda_fixed.java
@@ -1,20 +1,23 @@
   @SuppressWarnings("unchecked") // Casts guarded by conditionals.
   static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
       TypeToken<?> fieldType, JsonAdapter annotation) {
     Class<?> value = annotation.value();
     TypeAdapter<?> typeAdapter;
     if (TypeAdapter.class.isAssignableFrom(value)) {
       Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
     } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
       Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
           .construct()
           .create(gson, fieldType);
     } else {
       throw new IllegalArgumentException(
           "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
     }
-      typeAdapter = typeAdapter.nullSafe();
+// buggy code
+//      typeAdapter = typeAdapter.nullSafe();
+    if (typeAdapter != null) typeAdapter = typeAdapter.nullSafe();
+
     return typeAdapter;
   }
