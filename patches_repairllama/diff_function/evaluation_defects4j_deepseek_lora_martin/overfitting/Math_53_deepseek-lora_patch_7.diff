diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/18102bcf-e098-4d22-84a0-1045aaea419b_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/268a1da9-52f4-4fe6-b849-d629e8734bff_fixed.java
index 181b1ac..70c1b68 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/18102bcf-e098-4d22-84a0-1045aaea419b_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/268a1da9-52f4-4fe6-b849-d629e8734bff_fixed.java
@@ -1,23 +1,28 @@
     /**
      * Return the sum of this complex number and the given complex number.
      * <p>
      * Uses the definitional formula
      * <pre>
      * (a + bi) + (c + di) = (a+c) + (b+d)i
      * </pre></p>
      * <p>
      * If either this or <code>rhs</code> has a NaN value in either part,
      * {@link #NaN} is returned; otherwise Infinite and NaN values are
      * returned in the parts of the result according to the rules for
      * {@link java.lang.Double} arithmetic.</p>
      *
      * @param rhs the other complex number
      * @return the complex number sum
      * @throws NullArgumentException if <code>rhs</code> is null
      */
     public Complex add(Complex rhs)
         throws NullArgumentException {
         MathUtils.checkNotNull(rhs);
+// buggy code
+        if (rhs.isNaN()) {
+            return NaN;
+        }
+
         return createComplex(real + rhs.getReal(),
             imaginary + rhs.getImaginary());
     }
