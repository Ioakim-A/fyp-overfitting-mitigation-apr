diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e505639f-09ab-4b95-9457-88c9eb2dfb0f_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/8b098d9e-b7e5-4279-a7ae-91325f3c633b_fixed.java
index d907b39..5972264 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e505639f-09ab-4b95-9457-88c9eb2dfb0f_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/8b098d9e-b7e5-4279-a7ae-91325f3c633b_fixed.java
@@ -1,56 +1,25 @@
    public int read(byte[] buffer, int start, int length) throws IOException {
         if (closed) {
             throw new IOException("The stream is closed");
         }
-        if (inf.finished() || current == null) {
+        if (current == null) {
             return -1;
         }
-
-        // avoid int overflow, check null buffer
         if (start <= buffer.length && length >= 0 && start >= 0
             && buffer.length - start >= length) {
             if (current.getMethod() == ZipArchiveOutputStream.STORED) {
                 int csize = (int) current.getSize();
                 if (readBytesOfEntry >= csize) {
                     return -1;
                 }
                 if (offsetInBuffer >= lengthOfLastRead) {
                     offsetInBuffer = 0;
                     if ((lengthOfLastRead = in.read(buf)) == -1) {
                         return -1;
                     }
                     count(lengthOfLastRead);
                     bytesReadFromStream += lengthOfLastRead;
                 }
                 int toRead = length > lengthOfLastRead
                     ? lengthOfLastRead - offsetInBuffer
-                    : length;
-                if ((csize - readBytesOfEntry) < toRead) {
-                    toRead = csize - readBytesOfEntry;
-                }
-                System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);
-                offsetInBuffer += toRead;
-                readBytesOfEntry += toRead;
-                crc.update(buffer, start, toRead);
-                return toRead;
-            }
-            if (inf.needsInput()) {
-                fill();
-                if (lengthOfLastRead > 0) {
-                    bytesReadFromStream += lengthOfLastRead;
-                }
-            }
-            int read = 0;
-            try {
-                read = inf.inflate(buffer, start, length);
-            } catch (DataFormatException e) {
-                throw new ZipException(e.getMessage());
-            }
-            if (read == 0 && inf.finished()) {
-                return -1;
-            }
-            crc.update(buffer, start, read);
-            return read;
-        }
-        throw new ArrayIndexOutOfBoundsException();
-    }
+                    :
\ No newline at end of file
