diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/325fa6be-2ddf-4c31-af5a-295f41bc2f64_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a6da4788-e3fd-4a1b-b478-a3956011d367_fixed.java
index 9d42346..17fed25 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/325fa6be-2ddf-4c31-af5a-295f41bc2f64_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a6da4788-e3fd-4a1b-b478-a3956011d367_fixed.java
@@ -1,37 +1,19 @@
 private ReflectiveTypeAdapterFactory.BoundField createBoundField(
     final Gson context, final Field field, final String name,
     final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
   final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
-    // special casing primitives here saves ~5% on Android...
   JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
   TypeAdapter<?> mapped = null;
   if (annotation != null) {
     mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);
   }
   final boolean jsonAdapterPresent = mapped != null;
   if (mapped == null) mapped = context.getAdapter(fieldType);
-
   final TypeAdapter<?> typeAdapter = mapped;
   return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
-      @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
+    @SuppressWarnings({"unchecked", "rawtypes"}) 
     @Override void write(JsonWriter writer, Object value)
         throws IOException, IllegalAccessException {
       Object fieldValue = field.get(value);
       TypeAdapter t =
-          new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
-        t.write(writer, fieldValue);
-      }
-      @Override void read(JsonReader reader, Object value)
-          throws IOException, IllegalAccessException {
-        Object fieldValue = typeAdapter.read(reader);
-        if (fieldValue != null || !isPrimitive) {
-          field.set(value, fieldValue);
-        }
-      }
-      @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
-        if (!serialized) return false;
-        Object fieldValue = field.get(value);
-        return fieldValue != value; // avoid recursion for example for Throwable.cause
-      }
-    };
-  }
+        new
\ No newline at end of file
