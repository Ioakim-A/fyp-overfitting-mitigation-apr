diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/5525d7e8-a23b-415f-a97e-b852251e3b3d_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/33370b9b-5942-4b17-9bda-d13ea089e807_fixed.java
index a0eee42..b399b45 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/5525d7e8-a23b-415f-a97e-b852251e3b3d_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/33370b9b-5942-4b17-9bda-d13ea089e807_fixed.java
@@ -1,25 +1,15 @@
    private void getNumUseInUseCfgNode(final Node cfgNode) {
-
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
-
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
           if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
               !(parent.isAssign() &&
                (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
               numUsesWithinCfgNode++;
           }
         }
-
       };
-
-      NodeTraversal.traverse(compiler, cfgNode, gatherCb);
+      NodeTraversal.traverse(compiler, cfgNode, gatherCb, false);
     }
