diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d8a76dad-53d8-437f-9981-bfd4dc1b4180_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/bfdc0fb9-d75c-4048-ae23-b4a28a4cfde2_fixed.java
index 602226b..d76c313 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d8a76dad-53d8-437f-9981-bfd4dc1b4180_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/bfdc0fb9-d75c-4048-ae23-b4a28a4cfde2_fixed.java
@@ -1,26 +1,21 @@
    private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
         if (parent.isVar()) {
           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
             String name = n.getString();
             Var aliasVar = scope.getVar(name);
+            if (aliasVar != null) {
               aliases.put(name, aliasVar);
-
               String qualifiedName =
                   aliasVar.getInitialValue().getQualifiedName();
               transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
             } else {
-          // TODO(robbyw): Support using locals for private variables.
               report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
             }
-        }
-      }
-    }
+          } else {
+            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+         
\ No newline at end of file
