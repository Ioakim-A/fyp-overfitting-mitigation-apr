diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a9d22e6b-af30-48bf-bd8b-62ec77fdbe33_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/20e26d58-df61-41b2-a1ea-0058bf57fb3c_fixed.java
index 01c7c46..f76c95c 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a9d22e6b-af30-48bf-bd8b-62ec77fdbe33_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/20e26d58-df61-41b2-a1ea-0058bf57fb3c_fixed.java
@@ -1,27 +1,21 @@
    protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,
             TokenBuffer tb) throws IOException
     {
-        // As per [JACKSON-614], may have default implementation to use
         JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
         if (deser != null) {
             if (tb != null) {
                 tb.writeEndObject();
                 p = tb.asParser(p);
-                // must move to point to the first token:
                 p.nextToken();
             }
-            return deser.deserialize(p, ctxt);
+            return deser.deserializeWithType(p, ctxt, _baseType);
         }
-        // or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
         Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);
         if (result != null) {
             return result;
         }
-        // or, something for which "as-property" won't work, changed into "wrapper-array" type:
         if (p.getCurrentToken() == JsonToken.START_ARRAY) {
             return super.deserializeTypedFromAny(p, ctxt);
         }
         ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
-                "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
-        return null;
-    }
+                "missing property '"+_typePropertyName+"' that is to
\ No newline at end of file
