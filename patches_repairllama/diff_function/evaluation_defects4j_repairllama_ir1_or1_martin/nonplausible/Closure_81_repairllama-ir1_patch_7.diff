diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/29f6d376-912e-496d-9ef8-75a948cbf556_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a9d8d25b-271b-4745-81dd-f36404fd2c55_fixed.java
index 93ca1a6..0756464 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/29f6d376-912e-496d-9ef8-75a948cbf556_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a9d8d25b-271b-4745-81dd-f36404fd2c55_fixed.java
@@ -1,50 +1,24 @@
 Node processFunctionNode(FunctionNode functionNode) {
       Name name = functionNode.getFunctionName();
       Boolean isUnnamedFunction = false;
       if (name == null) {
         name = new Name();
         name.setIdentifier("");
         isUnnamedFunction = true;
       }
       Node node = newNode(Token.FUNCTION);
-      Node newName = transform(name);
+      Name newName = transform(name);
       if (isUnnamedFunction) {
-        // Old Rhino tagged the empty name node with the line number of the
-        // declaration.
         newName.setLineno(functionNode.getLineno());
-        // TODO(bowdidge) Mark line number of paren correctly.
-        // Same problem as below - the left paren might not be on the
-        // same line as the function keyword.
         int lpColumn = functionNode.getAbsolutePosition() +
             functionNode.getLp();
         newName.setCharno(position2charno(lpColumn));
       }
-
       node.addChildToBack(newName);
       Node lp = newNode(Token.LP);
-      // The left paren's complicated because it's not represented by an
-      // AstNode, so there's nothing that has the actual line number that it
-      // appeared on.  We know the paren has to appear on the same line as the
-      // function name (or else a semicolon will be inserted.)  If there's no
-      // function name, assume the paren was on the same line as the function.
-      // TODO(bowdidge): Mark line number of paren correctly.
       Name fnName = functionNode.getFunctionName();
       if (fnName != null) {
         lp.setLineno(fnName.getLineno());
       } else {
         lp.setLineno(functionNode.getLineno());
-      }
-      int lparenCharno = functionNode.getLp() +
-          functionNode.getAbsolutePosition();
      
\ No newline at end of file
-      lp.setCharno(position2charno(lparenCharno));
-      for (AstNode param : functionNode.getParams()) {
-        lp.addChildToBack(transform(param));
-      }
-      node.addChildToBack(lp);
-
-      Node bodyNode = transform(functionNode.getBody());
-      parseDirectives(bodyNode);
-      node.addChildToBack(bodyNode);
-     return node;
-    }
