diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e3e8bf02-6693-43fd-84ea-b4001bda57a9_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/68811b23-103e-4595-a52b-63fa13a698a0_fixed.java
index b98f0a7..715d777 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e3e8bf02-6693-43fd-84ea-b4001bda57a9_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/68811b23-103e-4595-a52b-63fa13a698a0_fixed.java
@@ -1,29 +1,22 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
-        if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
-          ct = (FunctionType) constructorType;
-        }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
