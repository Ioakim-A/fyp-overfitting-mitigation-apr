diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/46d3c875-40eb-4e55-bf66-37a2956c0fba_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f329e618-7124-42cc-9fd5-0218b4db4bf4_fixed.java
index b2a9c74..b224d78 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/46d3c875-40eb-4e55-bf66-37a2956c0fba_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f329e618-7124-42cc-9fd5-0218b4db4bf4_fixed.java
@@ -1,63 +1,25 @@
  public void initOptions(CompilerOptions options) {
     this.options = options;
     if (errorManager == null) {
       if (outStream == null) {
         setErrorManager(
             new LoggerErrorManager(createMessageFormatter(), logger));
       } else {
         PrintStreamErrorManager printer =
             new PrintStreamErrorManager(createMessageFormatter(), outStream);
         printer.setSummaryDetailLevel(options.summaryDetailLevel);
         setErrorManager(printer);
       }
     }
-
-    // DiagnosticGroups override the plain checkTypes option.
     if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = true;
     } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = false;
     } else if (!options.checkTypes) {
-      // If DiagnosticGroups did not override the plain checkTypes
-      // option, and checkTypes is enabled, then turn off the
-      // parser type warnings.
       options.setWarningLevel(
-          DiagnosticGroup.forType(
-              RhinoErrorReporter.TYPE_PARSE_ERROR),
+          DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),
           CheckLevel.OFF);
     }
-
     if (options.checkGlobalThisLevel.isOn()) {
       options.setWarningLevel(
-          DiagnosticGroups.GLOBAL_THIS,
-          options.checkGlobalThisLevel);
-    }
          
\ No newline at end of file
-    if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {
-      options.setWarningLevel(
-          DiagnosticGroups.ES5_STRICT,
-          CheckLevel.ERROR);
-    }
-
-    // Initialize the warnings guard.
-    List<WarningsGuard> guards = Lists.newArrayList();
-    guards.add(
-        new SuppressDocWarningsGuard(
-            getDiagnosticGroups().getRegisteredGroups()));
-    guards.add(options.getWarningsGuard());
-
-    ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);
-
-    // All passes must run the variable check. This synthesizes
-    // variables later so that the compiler doesn't crash. It also
-    // checks the externs file for validity. If you don't want to warn
-    // about missing variable declarations, we shut that specific
-    // error off.
-    if (!options.checkSymbols &&
-        !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {
-      composedGuards.addGuard(new DiagnosticGroupWarningsGuard(
-          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
-    }
-
-    this.warningsGuard = composedGuards;
-  }
