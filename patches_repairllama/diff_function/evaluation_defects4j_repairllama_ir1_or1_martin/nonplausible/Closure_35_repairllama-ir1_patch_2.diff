diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/72d9cf34-9909-4e4b-9580-3ba91f1cc89b_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6e654381-7498-4330-88ad-cd3e16cfb069_fixed.java
index b108107..7220efb 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/72d9cf34-9909-4e4b-9580-3ba91f1cc89b_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6e654381-7498-4330-88ad-cd3e16cfb069_fixed.java
@@ -1,25 +1,23 @@
 private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
-
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
       if (objType != null) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
           JSType propType = constraintObj.getPropertyType(prop);
           if (!objType.isPropertyTypeDeclared(prop)) {
             JSType typeToInfer = propType;
             if (!objType.hasProperty(prop)) {
               typeToInfer =
                   getNativeType(VOID_TYPE).getLeastSupertype(propType);
             }
             objType.defineInferredProperty(prop, typeToInfer, null);
           }
         }
       }
     }
\ No newline at end of file
-  }
