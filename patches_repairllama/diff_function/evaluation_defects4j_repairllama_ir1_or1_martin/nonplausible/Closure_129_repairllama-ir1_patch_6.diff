diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/3191bf73-ab2a-4959-8e75-b0817fd51fb3_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a0d1ae2f-1ea0-406a-9e31-24fc6d14fded_fixed.java
index 9f14d90..d5fe632 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/3191bf73-ab2a-4959-8e75-b0817fd51fb3_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a0d1ae2f-1ea0-406a-9e31-24fc6d14fded_fixed.java
@@ -1,20 +1,10 @@
    private void annotateCalls(Node n) {
       Preconditions.checkState(n.isCall());
-
-      // Keep track of of the "this" context of a call.  A call without an
-      // explicit "this" is a free call.
       Node first = n.getFirstChild();
-
-      // ignore cast nodes.
-
       if (!NodeUtil.isGet(first)) {
         n.putBooleanProp(Node.FREE_CALL, true);
       }
-
-      // Keep track of the context in which eval is called. It is important
-      // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
+      if (first.isName() && "eval".equals(first.getString())) {
         first.putBooleanProp(Node.DIRECT_EVAL, true);
       }
     }
