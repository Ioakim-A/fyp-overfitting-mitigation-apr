diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/5c9aeb67-4d8f-44e9-925e-9fac3e613c2d_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/50f59f62-63a3-4dbc-9247-ca826e5641b1_fixed.java
index 5aa01c2..fae68bb 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/5c9aeb67-4d8f-44e9-925e-9fac3e613c2d_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/50f59f62-63a3-4dbc-9247-ca826e5641b1_fixed.java
@@ -1,29 +1,23 @@
    public long readBits(final int count) throws IOException {
         if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
             throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
         }
         while (bitsCachedSize < count) {
             final long nextByte = in.read();
             if (nextByte < 0) {
                 return nextByte;
             }
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsCached |= (nextByte << bitsCachedSize);
-            } else {
                 bitsCached <<= 8;
                 bitsCached |= nextByte;
+            } else {
+                bitsCached |= (nextByte << bitsCachedSize);
             }
             bitsCachedSize += 8;
         }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
-        
         final long bitsOut;
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
                 bitsOut = (bitsCached & MASKS[count]);
                 bitsCached >>>= count;
             } else {
-                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
-            }
-            bitsCachedSize -= count;
-        return bitsOut;
-    }
+                bitsOut = (bitsCached >> (
\ No newline at end of file
