diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/73096733-1b90-4d64-a33b-5e7aef758790_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/951a3df1-f814-48cf-ae14-29d2035090ba_fixed.java
index b3c4273..2d7c58f 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/73096733-1b90-4d64-a33b-5e7aef758790_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/951a3df1-f814-48cf-ae14-29d2035090ba_fixed.java
@@ -1,62 +1,29 @@
    private boolean canInline(
         Reference declaration,
         Reference initialization,
         Reference reference) {
       if (!isValidDeclaration(declaration)
           || !isValidInitialization(initialization)
           || !isValidReference(reference)) {
         return false;
       }
-
-      // If the value is read more than once, skip it.
-      // VAR declarations and EXPR_RESULT don't need the value, but other
-      // ASSIGN expressions parents do.
       if (declaration != initialization &&
           !initialization.getGrandparent().isExprResult()) {
         return false;
       }
-
-      // Be very conservative and do no cross control structures or
-      // scope boundaries
       if (declaration.getBasicBlock() != initialization.getBasicBlock()
           || declaration.getBasicBlock() != reference.getBasicBlock()) {
         return false;
       }
-
-      // Do not inline into a call node. This would change
-      // the context in which it was being called. For example,
-      //   var a = b.c;
-      //   a();
-      // should not be inlined, because it calls a in the context of b
-      // rather than the context of the window.
-      //   var a = b.c;
-      //   f(a)
-      // is ok.
       Node value = initialization.getAssignedValue();
-      Preconditions.checkState(value != null);
+      if (value == null) {
+        return false;
+      }
       if (value.isGetProp()
           && reference.getParent().isCall()
           && reference.getParent().getFirstChild() == reference.getNode()) {
         return false;
       }
-
       if (value.isFunction()) {
         Node callNode = reference.getParent();
         if (reference.getParent().isCall()) {
\ No newline at end of file
-          CodingConvention convention = compiler.getCodingConvention();
-          // Bug 2388531: Don't inline subclass definitions into class defining
-          // calls as this confused class removing logic.
-          SubclassRelationship relationship =
-              convention.getClassesDefinedByCall(callNode);
-          if (relationship != null) {
-            return false;
-          }
-
-          // issue 668: Don't inline singleton getter methods
-          // calls as this confused class removing logic.
-        }
-      }
-
-      return canMoveAggressively(value) ||
-          canMoveModerately(initialization, reference);
-    }
