diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e9870d1b-9b3c-4758-8046-7369a50a73de_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6991ea55-0f35-4811-9f6b-6d6614805ab9_fixed.java
index d2dd743..7bb1fca 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e9870d1b-9b3c-4758-8046-7369a50a73de_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6991ea55-0f35-4811-9f6b-6d6614805ab9_fixed.java
@@ -1,51 +1,22 @@
  static boolean functionCallHasSideEffects(
       Node callNode, @Nullable AbstractCompiler compiler) {
     if (callNode.getType() != Token.CALL) {
       throw new IllegalStateException(
           "Expected CALL node, got " + Token.name(callNode.getType()));
     }
-
     if (callNode.isNoSideEffectsCall()) {
       return false;
     }
-
     Node nameNode = callNode.getFirstChild();
-
-    // Built-in functions with no side effects.
     if (nameNode.getType() == Token.NAME) {
       String name = nameNode.getString();
       if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
         return false;
       }
     } else if (nameNode.getType() == Token.GETPROP) {
       if (callNode.hasOneChild()
           && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
                 nameNode.getLastChild().getString())) {
         return false;
       }
-
-      if (callNode.isOnlyModifiesThisCall()
-          && evaluatesToLocalValue(nameNode.getFirstChild())) {
-        return false;
-      }
-
-      // Functions in the "Math" namespace have no side effects.
-
-      if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
-        if (nameNode.getFirstChild().getType() == Token.REGEXP
-            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
-          return false;
-        } else if (nameNode.getFirstChild().getType() == Token.STRING
-            && STRING_REGEXP_METHODS.contains(
-                nameNode.getLastChild().getString())) {
-          Node param = nameNode.getNext();
-          if (param != null &&
-              (param.getType() == Token.STRING
-                  || param.getType() == Token.REGEXP))
-          return false;
-        }
-      }
-    }
-
-    return true;
-  }
+      if (!
\ No newline at end of file
