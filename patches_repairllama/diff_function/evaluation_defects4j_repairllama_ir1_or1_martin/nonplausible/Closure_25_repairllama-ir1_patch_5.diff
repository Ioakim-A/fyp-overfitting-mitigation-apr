diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/afd2451a-8a33-46ff-ad15-99daffd63d62_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b9356f46-fb42-4174-a10c-029ddc89fff8_fixed.java
index b98f0a7..9728e16 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/afd2451a-8a33-46ff-ad15-99daffd63d62_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b9356f46-fb42-4174-a10c-029ddc89fff8_fixed.java
@@ -1,29 +1,24 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
+    if (type == null) {
+      type = getNativeType(UNKNOWN_TYPE);
+    }
     n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
-      scope = traverse(arg, scope);
-    }
-    return scope;
-  }
+    for (Node arg = constructor.getNext(); arg != null; arg = arg.get
\ No newline at end of file
