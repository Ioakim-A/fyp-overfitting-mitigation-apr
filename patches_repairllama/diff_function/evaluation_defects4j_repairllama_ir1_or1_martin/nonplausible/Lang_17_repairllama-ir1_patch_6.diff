diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e4e2f3cb-bbf7-49db-bbcb-81cfea336675_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4a061f08-d696-43fc-8b03-378588a95dc5_fixed.java
index 8cbef3b..c387ec8 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e4e2f3cb-bbf7-49db-bbcb-81cfea336675_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4a061f08-d696-43fc-8b03-378588a95dc5_fixed.java
@@ -1,30 +1,27 @@
    public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
         int len = Character.codePointCount(input, 0, input.length());
         while (pos < len) {
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
                 char[] c = Character.toChars(Character.codePointAt(input, pos));
                 out.write(c);
             }
             else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
             for (int pt = 0; pt < consumed; pt++) {
                     if (pos < len - 2) {
                 pos += Character.charCount(Character.codePointAt(input, pos));
                     } else {
                         pos++;
                     }
                 }
-                pos--;
             }
             pos++;
         }
     }
