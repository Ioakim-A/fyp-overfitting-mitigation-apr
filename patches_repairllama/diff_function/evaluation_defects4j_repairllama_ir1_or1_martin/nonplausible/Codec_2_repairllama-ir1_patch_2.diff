diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/afd1b289-28f8-4fd3-996d-76afad8d2c46_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/93a70ab5-4c0f-44df-9ca4-cc3107e255ba_fixed.java
index 4433921..953ea65 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/afd1b289-28f8-4fd3-996d-76afad8d2c46_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/93a70ab5-4c0f-44df-9ca4-cc3107e255ba_fixed.java
@@ -1,60 +1,21 @@
    void encode(byte[] in, int inPos, int inAvail) {
         if (eof) {
             return;
         }
-        // inAvail < 0 is how we're informed of EOF in the underlying data we're
-        // encoding.
         if (inAvail < 0) {
             eof = true;
             if (buf == null || buf.length - pos < encodeSize) {
                 resizeBuf();
             }
             switch (modulus) {
-                case 1:
+                case 0:
                     buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
                     buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];
-                    // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buf[pos++] = PAD;
                         buf[pos++] = PAD;
                     }
                     break;
-
-                case 2:
+                case 1:
                     buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
-                    buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];
-                    // URL-SAFE skips the padding to further reduce size.
-                    if (encodeTable == STANDARD_ENCODE_TABLE) {
-                        buf[pos++] = PAD;
-                    }
-                    break;
-            }
-            if (lineLength > 0) {
-                System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);
-                pos += lineSeparator.length;
-            }
-        } else {
-            for (int i = 0; i < inAvail; i++) {
-                if (buf == null || buf.length - pos < encodeSize) {
-                    resizeBuf();
-                }
-                modulus = (++modulus) % 3;
-                int b = in[inPos++];
-                if (b < 0) { b += 256; }
-                x = (x << 8) + b;
-                if (0 == modulus) {
-                    buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
-                    buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
-                    buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS];
-                    buf[pos++] = encodeTable[x & MASK_6BITS];
-                    currentLinePos += 4;
-                    if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
-                        currentLinePos = 0;
-                    }
-                }
-            }
-        }
-    }
