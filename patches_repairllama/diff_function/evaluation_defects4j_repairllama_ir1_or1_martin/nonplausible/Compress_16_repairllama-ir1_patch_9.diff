diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/5f5e5a08-4b6d-4757-bd81-370eefcbe483_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a15960a0-4716-4db5-9677-714d5e72660b_fixed.java
index 1449592..74db13f 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/5f5e5a08-4b6d-4757-bd81-370eefcbe483_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a15960a0-4716-4db5-9677-714d5e72660b_fixed.java
@@ -1,62 +1,22 @@
    public ArchiveInputStream createArchiveInputStream(final InputStream in)
             throws ArchiveException {
         if (in == null) {
             throw new IllegalArgumentException("Stream must not be null.");
         }
-
         if (!in.markSupported()) {
             throw new IllegalArgumentException("Mark is not supported.");
         }
-
         final byte[] signature = new byte[12];
         in.mark(signature.length);
+        int signatureLength = 0;
         try {
-            int signatureLength = in.read(signature);
+            signatureLength = in.read(signature);
             in.reset();
             if (ZipArchiveInputStream.matches(signature, signatureLength)) {
                 return new ZipArchiveInputStream(in);
             } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
                 return new JarArchiveInputStream(in);
             } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
                 return new ArArchiveInputStream(in);
             } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
                 return new CpioArchiveInputStream(in);
\ No newline at end of file
-            }
-
-            // Dump needs a bigger buffer to check the signature;
-            final byte[] dumpsig = new byte[32];
-            in.mark(dumpsig.length);
-            signatureLength = in.read(dumpsig);
-            in.reset();
-            if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
-                return new DumpArchiveInputStream(in);
-            }
-
-            // Tar needs an even bigger buffer to check the signature; read the first block
-            final byte[] tarheader = new byte[512];
-            in.mark(tarheader.length);
-            signatureLength = in.read(tarheader);
-            in.reset();
-            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
-                return new TarArchiveInputStream(in);
-            }
-            // COMPRESS-117 - improve auto-recognition
-            if (signatureLength >= 512) {
-                try {
-                    TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-                    // COMPRESS-191 - verify the header checksum
-                    tais.getNextEntry();
-                        return new TarArchiveInputStream(in);
-                } catch (Exception e) { // NOPMD
-                    // can generate IllegalArgumentException as well
-                    // as IOException
-                    // autodetection, simply not a TAR
-                    // ignored
-                }
-            }
-        } catch (IOException e) {
-            throw new ArchiveException("Could not use reset and mark operations.", e);
-        }
-
-        throw new ArchiveException("No Archiver found for the stream signature");
-    }
