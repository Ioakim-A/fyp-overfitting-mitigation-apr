diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/75f86978-7fef-4934-b6db-adcfb60b332f_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/baefa94a-0806-4e2f-8ad5-7cdbc2bafdde_fixed.java
index 710fcc0..b8e517b 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/75f86978-7fef-4934-b6db-adcfb60b332f_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/baefa94a-0806-4e2f-8ad5-7cdbc2bafdde_fixed.java
@@ -1,37 +1,53 @@
     Object returnValueFor(Class<?> type) {
         if (Primitives.isPrimitiveOrWrapper(type)) {
             return Primitives.defaultValueForPrimitiveOrWrapper(type);
-            //new instances are used instead of Collections.emptyList(), etc.
-            //to avoid UnsupportedOperationException if code under test modifies returned collection
+// buggy code
+       } else if (type == String.class) {
+            return "";
+        } else if (type == Boolean.class) {
+            return false;
+        } else if (type == Character.class) {
+            return '\0';
+        } else if (type == Byte.class) {
+            return (byte) 0;
+        } else if (type == Short.class) {
+            return (short) 0;
+        } else if (type == Integer.class) {
+            return 0;
+        } else if (type == Long.class) {
+            return 0L;
+        } else if (type == Float.class) {
+            return 0.0f;
+        } else if (type == Double.class) {
+            return 0.0d;
         } else if (type == Collection.class) {
             return new LinkedList<Object>();
         } else if (type == Set.class) {
             return new HashSet<Object>();
         } else if (type == HashSet.class) {
             return new HashSet<Object>();
         } else if (type == SortedSet.class) {
             return new TreeSet<Object>();
         } else if (type == TreeSet.class) {
             return new TreeSet<Object>();
         } else if (type == LinkedHashSet.class) {
             return new LinkedHashSet<Object>();
         } else if (type == List.class) {
             return new LinkedList<Object>();
         } else if (type == LinkedList.class) {
             return new LinkedList<Object>();
         } else if (type == ArrayList.class) {
             return new ArrayList<Object>();
         } else if (type == Map.class) {
             return new HashMap<Object, Object>();
         } else if (type == HashMap.class) {
             return new HashMap<Object, Object>();
         } else if (type == SortedMap.class) {
             return new TreeMap<Object, Object>();
         } else if (type == TreeMap.class) {
             return new TreeMap<Object, Object>();
         } else if (type == LinkedHashMap.class) {
             return new LinkedHashMap<Object, Object>();
         }
-        //Let's not care about the rest of collections.
         return null;
     }
