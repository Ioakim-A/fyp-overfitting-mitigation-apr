diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/66f420d4-a2c9-4a9f-92dd-3e05ab51dd3f_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6f5a4394-d244-4ffe-bbd0-d64528dfea72_fixed.java
index dc93be3..abbb374 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/66f420d4-a2c9-4a9f-92dd-3e05ab51dd3f_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6f5a4394-d244-4ffe-bbd0-d64528dfea72_fixed.java
@@ -1,14 +1,25 @@
     Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
         if (startTag.isSelfClosing()) {
             Element el = insertEmpty(startTag);
             stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+// buggy code
+//            tokeniser.emit(new Token.EndTag(el.tagName()));  
+            return el;
+        }
+        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
+        insert(el);
+        stack.add(el);
         return el;
     }
 
+    Element insert(Token.StartTag startTag) {
+        if (startTag.isSelfClosing()) {
+            Element el = insertEmpty(startTag);
+// buggy code
+            tokeniser.emit(new Token.EndTag(el.tagName()));  
+            return el;
+        }
         Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
         insert(el);
         return el;
     }
