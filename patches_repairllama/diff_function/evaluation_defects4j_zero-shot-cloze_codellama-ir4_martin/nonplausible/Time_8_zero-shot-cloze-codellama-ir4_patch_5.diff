diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/8323a4aa-6f7f-42fc-bc9a-2831f2468879_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/bfa5a0ad-6d99-4dd4-b4c2-f1eb8c4de9b0_fixed.java
index ab7017e..d07812b 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/8323a4aa-6f7f-42fc-bc9a-2831f2468879_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/bfa5a0ad-6d99-4dd4-b4c2-f1eb8c4de9b0_fixed.java
@@ -1,24 +1,38 @@
     public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {
         if (hoursOffset == 0 && minutesOffset == 0) {
             return DateTimeZone.UTC;
         }
         if (hoursOffset < -23 || hoursOffset > 23) {
             throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
         }
-        if (minutesOffset < 0 || minutesOffset > 59) {
-            throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);
-        }
+// buggy code
+//        if (minutesOffset < 0 || minutesOffset > 59) {
+//            throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);
+//        }
+//        int offset = 0;
+//        try {
+//            int hoursInMinutes = hoursOffset * 60;
+//            if (hoursInMinutes < 0) {
+//                minutesOffset = hoursInMinutes - minutesOffset;
+//            } else {
+//                minutesOffset = hoursInMinutes + minutesOffset;
+//            }
+//            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
+//        } catch (ArithmeticException ex) {
+//            throw new IllegalArgumentException("Offset is too large");
+//        }
+//        return forOffsetMillis(offset);
         int offset = 0;
         try {
             int hoursInMinutes = hoursOffset * 60;
             if (hoursInMinutes < 0) {
                 minutesOffset = hoursInMinutes - minutesOffset;
             } else {
                 minutesOffset = hoursInMinutes + minutesOffset;
             }
             offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
         } catch (ArithmeticException ex) {
             throw new IllegalArgumentException("Offset is too large");
         }
         return forOffsetMillis(offset);
     }
