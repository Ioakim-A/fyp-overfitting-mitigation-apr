diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2a7dbe9f-63fe-4c90-a827-4a3b1320a8c6_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/09e9d359-055b-45c5-91f0-d78f91363a1a_fixed.java
index 6dd359b..11229b7 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2a7dbe9f-63fe-4c90-a827-4a3b1320a8c6_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/09e9d359-055b-45c5-91f0-d78f91363a1a_fixed.java
@@ -1,125 +1,125 @@
     public void collect(JSModule module, Scope scope, Node n) {
       Node parent = n.getParent();
-
       String name;
       boolean isSet = false;
       Name.Type type = Name.Type.OTHER;
       boolean isPropAssign = false;
-
       switch (n.getType()) {
         case Token.GETTER_DEF:
         case Token.SETTER_DEF:
         case Token.STRING_KEY:
-          // This may be a key in an object literal declaration.
           name = null;
           if (parent != null && parent.isObjectLit()) {
             name = getNameForObjLitKey(n);
           }
           if (name == null) {
             return;
           }
           isSet = true;
           switch (n.getType()) {
             case Token.STRING_KEY:
               type = getValueType(n.getFirstChild());
               break;
             case Token.GETTER_DEF:
               type = Name.Type.GET;
               break;
             case Token.SETTER_DEF:
               type = Name.Type.SET;
               break;
             default:
               throw new IllegalStateException("unexpected:" + n);
           }
           break;
         case Token.NAME:
-          // This may be a variable get or set.
           if (parent != null) {
             switch (parent.getType()) {
               case Token.VAR:
                 isSet = true;
                 Node rvalue = n.getFirstChild();
                 type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);
                 break;
               case Token.ASSIGN:
                 if (parent.getFirstChild() == n) {
                   isSet = true;
                   type = getValueType(n.getNext());
                 }
                 break;
               case Token.GETPROP:
                 return;
               case Token.FUNCTION:
                 Node gramps = parent.getParent();
                 if (gramps == null || NodeUtil.isFunctionExpression(parent)) {
                   return;
                 }
                 isSet = true;
                 type = Name.Type.FUNCTION;
                 break;
+// buggy code
+//              case Token.ASSIGN:
+//                if (parent.getFirstChild() == n) {
+//                  isSet = true;
+//                  type = getValueType(n.getNext());
+//                  isPropAssign = true;
+//                }
+//                break;
               case Token.INC:
               case Token.DEC:
                 isSet = true;
                 type = Name.Type.OTHER;
                 break;
               default:
                 if (NodeUtil.isAssignmentOp(parent) &&
                     parent.getFirstChild() == n) {
                   isSet = true;
                   type = Name.Type.OTHER;
                 }
             }
           }
           name = n.getString();
           break;
         case Token.GETPROP:
-          // This may be a namespaced name get or set.
           if (parent != null) {
             switch (parent.getType()) {
               case Token.ASSIGN:
                 if (parent.getFirstChild() == n) {
                   isSet = true;
                   type = getValueType(n.getNext());
                   isPropAssign = true;
                 }
                 break;
               case Token.INC:
               case Token.DEC:
                 isSet = true;
                 type = Name.Type.OTHER;
                 break;
               case Token.GETPROP:
                 return;
               default:
                 if (NodeUtil.isAssignmentOp(parent) &&
                     parent.getFirstChild() == n) {
                   isSet = true;
                   type = Name.Type.OTHER;
                 }
             }
           }
           name = n.getQualifiedName();
           if (name == null) {
             return;
           }
           break;
         default:
           return;
       }
-
-      // We are only interested in global names.
       if (!isGlobalNameReference(name, scope)) {
         return;
       }
-
       if (isSet) {
         if (isGlobalScope(scope)) {
           handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);
         } else {
           handleSetFromLocal(module, scope, n, parent, name);
         }
       } else {
         handleGet(module, scope, n, parent, name);
       }
     }
