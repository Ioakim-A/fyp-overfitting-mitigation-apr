diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/3c662df5-6cf3-4192-aa21-6aebc742229b_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c643fc4b-b747-45fe-b71b-54e6e6026ea4_fixed.java
index b98f0a7..5680bbc 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/3c662df5-6cf3-4192-aa21-6aebc742229b_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c643fc4b-b747-45fe-b71b-54e6e6026ea4_fixed.java
@@ -1,29 +1,31 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
+// buggy code
+//    Node constructor = n.getFirstChild();
+//    scope = traverse(constructor, scope);
+//    JSType constructorType = constructor.getJSType();
+//    JSType type = null;
+//    if (constructorType != null) {
+//      constructorType = constructorType.restrictByNotNullOrUndefined();
+//      if (constructorType.isUnknownType()) {
+//        type = getNativeType(UNKNOWN_TYPE);
+//      } else {
+//        FunctionType ct = constructorType.toMaybeFunctionType();
+//        if (ct == null && constructorType instanceof FunctionType) {
+//          ct = (FunctionType) constructorType;
+//        }
+//        if (ct != null && ct.isConstructor()) {
+//          type = ct.getInstanceType();
+//        }
+//      }
+//    }
+//    n.setJSType(type);
+//    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+//      scope = traverse(arg, scope);
+//    }
+//    return scope;
+//  }
 
-    Node constructor = n.getFirstChild();
-    scope = traverse(constructor, scope);
-    JSType constructorType = constructor.getJSType();
-    JSType type = null;
-    if (constructorType != null) {
-      constructorType = constructorType.restrictByNotNullOrUndefined();
-      if (constructorType.isUnknownType()) {
-        type = getNativeType(UNKNOWN_TYPE);
-      } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
-        if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
-          ct = (FunctionType) constructorType;
-        }
-        if (ct != null && ct.isConstructor()) {
-          type = ct.getInstanceType();
-        }
-      }
-    }
-    n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
-      scope = traverse(arg, scope);
-    }
+  private FlowScope traverseNew(Node n, FlowScope scope) {
+    scope = traverseChildren(n, scope);
     return scope;
   }
