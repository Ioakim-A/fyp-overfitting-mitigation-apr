diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e86f3ca1-26be-45fe-a52e-3f760f47cb9d_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/342a2af3-5451-4c1c-9704-d126ceb599c4_fixed.java
index b98f0a7..22bcdc1 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e86f3ca1-26be-45fe-a52e-3f760f47cb9d_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/342a2af3-5451-4c1c-9704-d126ceb599c4_fixed.java
@@ -1,29 +1,27 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
-
-    Node constructor = n.getFirstChild();
-    scope = traverse(constructor, scope);
-    JSType constructorType = constructor.getJSType();
-    JSType type = null;
-    if (constructorType != null) {
-      constructorType = constructorType.restrictByNotNullOrUndefined();
-      if (constructorType.isUnknownType()) {
-        type = getNativeType(UNKNOWN_TYPE);
-      } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
-        if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
-          ct = (FunctionType) constructorType;
-        }
-        if (ct != null && ct.isConstructor()) {
-          type = ct.getInstanceType();
-        }
-      }
-    }
-    n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
-      scope = traverse(arg, scope);
-    }
+// buggy code
+//    Node constructor = n.getFirstChild();
+//    scope = traverse(constructor, scope);
+//    JSType constructorType = constructor.getJSType();
+//    JSType type = null;
+//    if (constructorType != null) {
+//      constructorType = constructorType.restrictByNotNullOrUndefined();
+//      if (constructorType.isUnknownType()) {
+//        type = getNativeType(UNKNOWN_TYPE);
+//      } else {
+//        FunctionType ct = constructorType.toMaybeFunctionType();
+//        if (ct == null && constructorType instanceof FunctionType) {
+//          ct = (FunctionType) constructorType;
+//        }
+//        if (ct != null && ct.isConstructor()) {
+//          type = ct.getInstanceType();
+//        }
+//      }
+//    }
+//    n.setJSType(type);
+//    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+//      scope = traverse(arg, scope);
+//    }
+//
     return scope;
   }
