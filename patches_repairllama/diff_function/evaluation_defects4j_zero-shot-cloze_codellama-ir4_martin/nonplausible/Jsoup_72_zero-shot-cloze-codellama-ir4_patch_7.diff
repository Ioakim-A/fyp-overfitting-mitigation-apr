diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/afbb6227-f233-4291-858b-2051432abd11_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/eaca6647-48c0-4a0c-b60a-7654d9081cb1_fixed.java
index 7b4f703..f469d81 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/afbb6227-f233-4291-858b-2051432abd11_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/eaca6647-48c0-4a0c-b60a-7654d9081cb1_fixed.java
@@ -1,29 +1,27 @@
     private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {
-        // limit (no cache):
         if (count > maxStringCacheLen)
             return new String(charBuf, start, count);
-
-        // calculate hash:
+// buggy code
+       if (stringCache == null)
+            return new String(charBuf, start, count);
+// buggy code
         int hash = 0;
         int offset = start;
         for (int i = 0; i < count; i++) {
             hash = 31 * hash + charBuf[offset++];
         }
-
-        // get from cache
         final int index = hash & stringCache.length - 1;
         String cached = stringCache[index];
-
-        if (cached == null) { // miss, add
+        if (cached == null) { 
             cached = new String(charBuf, start, count);
             stringCache[index] = cached;
-        } else { // hashcode hit, check equality
-            if (rangeEquals(charBuf, start, count, cached)) { // hit
+        } else { 
+            if (rangeEquals(charBuf, start, count, cached)) { 
                 return cached;
-            } else { // hashcode conflict
+            } else { 
                 cached = new String(charBuf, start, count);
-                stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again
+                stringCache[index] = cached; 
             }
         }
         return cached;
     }
