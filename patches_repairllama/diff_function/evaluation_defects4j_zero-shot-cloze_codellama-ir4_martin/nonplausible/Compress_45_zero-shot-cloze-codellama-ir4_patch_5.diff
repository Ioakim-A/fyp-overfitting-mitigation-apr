diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/644c9d50-ffdc-410a-bd12-b34f8ee543b5_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/37caac55-d25e-4045-bad0-487c06190e47_fixed.java
index 6dd46bd..a527794 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/644c9d50-ffdc-410a-bd12-b34f8ee543b5_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/37caac55-d25e-4045-bad0-487c06190e47_fixed.java
@@ -1,19 +1,28 @@
     public static int formatLongOctalOrBinaryBytes(
         final long value, final byte[] buf, final int offset, final int length) {
-
-        // Check whether we are dealing with UID/GID or SIZE field
         final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
-
         final boolean negative = value < 0;
-        if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
+        if (!negative && value <= maxAsOctalChar) { 
             return formatLongOctalBytes(value, buf, offset, length);
         }
-
         if (length < 9) {
             formatLongBinary(value, buf, offset, length, negative);
+// buggy code
+//        }
+//        formatBigIntegerBinary(value, buf, offset, length, negative);
+       return offset + length;
     }
-        formatBigIntegerBinary(value, buf, offset, length, negative);
 
+    public static int formatLongOctalBytes(
+        final long value, final byte[] buf, final int offset, final int length) {
+        final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
+        final boolean negative = value < 0;
+        if (!negative && value <= maxAsOctalChar) { 
+            return formatLongOctalBytes(value, buf, offset, length);
+        }
+        if (length < 9) {
+            formatLongBinary(value, buf, offset, length, negative);
+        }
         buf[offset] = (byte) (negative ? 0xff : 0x80);
         return offset + length;
     }
