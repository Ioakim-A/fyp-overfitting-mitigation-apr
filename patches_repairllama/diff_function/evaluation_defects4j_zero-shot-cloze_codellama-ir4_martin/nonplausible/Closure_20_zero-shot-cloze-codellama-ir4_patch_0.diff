diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/904d8dd0-8800-46ca-8682-2cef771f3020_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/5df8075f-8627-48c1-b467-26e871dcc290_fixed.java
index d4e6d48..15ef094 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/904d8dd0-8800-46ca-8682-2cef771f3020_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/5df8075f-8627-48c1-b467-26e871dcc290_fixed.java
@@ -1,23 +1,19 @@
   private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
     if (callTarget != null && callTarget.isName() &&
           callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
       Node value = callTarget.getNext();
-      if (value != null) {
+// buggy code
+//      if (value != null) {
+       if (value.isString()) {
         Node addition = IR.add(
             IR.string("").srcref(callTarget),
             value.detachFromParent());
         n.getParent().replaceChild(n, addition);
         reportCodeChange();
         return addition;
       }
     }
     return n;
   }
