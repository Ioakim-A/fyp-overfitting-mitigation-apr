diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d39d52a4-6bd3-4a6d-9e9e-ab345d536b4b_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f3715933-62b5-49c1-a1e2-4a51eace3087_fixed.java
index af634a5..ae03a28 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d39d52a4-6bd3-4a6d-9e9e-ab345d536b4b_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f3715933-62b5-49c1-a1e2-4a51eace3087_fixed.java
@@ -1,39 +1,49 @@
     public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                             boolean hasCompressedSize,
                                             boolean hasRelativeHeaderOffset,
                                             boolean hasDiskStart)
         throws ZipException {
         if (rawCentralDirectoryData != null) {
             int expectedLength = (hasUncompressedSize ? DWORD : 0)
                 + (hasCompressedSize ? DWORD : 0)
                 + (hasRelativeHeaderOffset ? DWORD : 0)
                 + (hasDiskStart ? WORD : 0);
+// buggy code
+//            if (rawCentralDirectoryData.length != expectedLength) {
+//                throw new ZipException("central directory zip64 extended"
+//                                       + " information extra field's length"
+//                                       + " doesn't match central directory"
+//                                       + " data.  Expected length "
+//                                       + expectedLength + " but is "
+//                                       + rawCentralDirectoryData.length);
+//            }
+
             if (rawCentralDirectoryData.length != expectedLength) {
                 throw new ZipException("central directory zip64 extended"
                                        + " information extra field's length"
                                        + " doesn't match central directory"
                                        + " data.  Expected length "
                                        + expectedLength + " but is "
                                        + rawCentralDirectoryData.length);
             }
             int offset = 0;
             if (hasUncompressedSize) {
                 size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
                 offset += DWORD;
             }
             if (hasCompressedSize) {
                 compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
                                                          offset);
                 offset += DWORD;
             }
             if (hasRelativeHeaderOffset) {
                 relativeHeaderOffset =
                     new ZipEightByteInteger(rawCentralDirectoryData, offset);
                 offset += DWORD;
             }
             if (hasDiskStart) {
                 diskStart = new ZipLong(rawCentralDirectoryData, offset);
                 offset += WORD;
             }
         }
     }
