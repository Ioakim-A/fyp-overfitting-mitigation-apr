diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/5a3e7c07-421c-40b7-a7a1-425794f7c7b3_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6c5dcdd6-e57e-455a-8db0-caca19ebb93b_fixed.java
index f274c45..5f13a8c 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/5a3e7c07-421c-40b7-a7a1-425794f7c7b3_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6c5dcdd6-e57e-455a-8db0-caca19ebb93b_fixed.java
@@ -1,43 +1,41 @@
     public EqualsBuilder append(Object lhs, Object rhs) {
         if (isEquals == false) {
             return this;
         }
         if (lhs == rhs) {
             return this;
         }
         if (lhs == null || rhs == null) {
             this.setEquals(false);
             return this;
         }
         Class lhsClass = lhs.getClass();
         if (!lhsClass.isArray()) {
-                // The simple case, not an array, just test the element
+// buggy code
+//                isEquals = lhs.equals(rhs);
            isEquals = lhs.equals(rhs);
+            return this;
         } else if (lhs.getClass() != rhs.getClass()) {
-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] 
             this.setEquals(false);
         }
-        // 'Switch' on type of array, to dispatch to the correct handler
-        // This handles multi dimensional arrays of the same depth
         else if (lhs instanceof long[]) {
             append((long[]) lhs, (long[]) rhs);
         } else if (lhs instanceof int[]) {
             append((int[]) lhs, (int[]) rhs);
         } else if (lhs instanceof short[]) {
             append((short[]) lhs, (short[]) rhs);
         } else if (lhs instanceof char[]) {
             append((char[]) lhs, (char[]) rhs);
         } else if (lhs instanceof byte[]) {
             append((byte[]) lhs, (byte[]) rhs);
         } else if (lhs instanceof double[]) {
             append((double[]) lhs, (double[]) rhs);
         } else if (lhs instanceof float[]) {
             append((float[]) lhs, (float[]) rhs);
         } else if (lhs instanceof boolean[]) {
             append((boolean[]) lhs, (boolean[]) rhs);
         } else {
-            // Not an array of primitives
             append((Object[]) lhs, (Object[]) rhs);
         }
         return this;
     }
