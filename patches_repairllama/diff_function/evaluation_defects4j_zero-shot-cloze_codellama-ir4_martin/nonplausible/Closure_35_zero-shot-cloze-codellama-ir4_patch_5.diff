diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f55c020c-d005-4240-a7e8-0df5329de021_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a10dd524-a1fb-4d05-96a4-3c536f287fb7_fixed.java
index b108107..aca928a 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f55c020c-d005-4240-a7e8-0df5329de021_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a10dd524-a1fb-4d05-96a4-3c536f287fb7_fixed.java
@@ -1,25 +1,26 @@
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
-
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
-    if (constraintObj != null && constraintObj.isRecordType()) {
-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
-      if (objType != null) {
-        for (String prop : constraintObj.getOwnPropertyNames()) {
-          JSType propType = constraintObj.getPropertyType(prop);
-          if (!objType.isPropertyTypeDeclared(prop)) {
-            JSType typeToInfer = propType;
-            if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
-            }
-            objType.defineInferredProperty(prop, typeToInfer, null);
-          }
-        }
-      }
+// buggy code
+//    if (constraintObj != null && constraintObj.isRecordType()) {
+//      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
+//      if (objType != null) {
+//        for (String prop : constraintObj.getOwnPropertyNames()) {
+//          JSType propType = constraintObj.getPropertyType(prop);
+//          if (!objType.isPropertyTypeDeclared(prop)) {
+//            JSType typeToInfer = propType;
+//            if (!objType.hasProperty(prop)) {
+//              typeToInfer =
+//                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+//            }
+//            objType.defineInferredProperty(prop, typeToInfer, null);
+//          }
+//        }
+//      }
+//
     }
   }
