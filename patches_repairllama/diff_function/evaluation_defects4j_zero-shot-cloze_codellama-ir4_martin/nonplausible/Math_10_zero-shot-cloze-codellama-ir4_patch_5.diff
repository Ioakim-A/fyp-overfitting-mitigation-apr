diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/84e165a2-09b7-440f-8238-0887f8dccaab_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/62e2e7a5-e326-4b1a-ac06-f1f375e89101_fixed.java
index be053eb..16c2aef 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/84e165a2-09b7-440f-8238-0887f8dccaab_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/62e2e7a5-e326-4b1a-ac06-f1f375e89101_fixed.java
@@ -1,39 +1,43 @@
     public void atan2(final double[] y, final int yOffset,
                       final double[] x, final int xOffset,
                       final double[] result, final int resultOffset) {
-
-        // compute r = sqrt(x^2+y^2)
         double[] tmp1 = new double[getSize()];
-        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2
+        multiply(x, xOffset, x, xOffset, tmp1, 0);      
         double[] tmp2 = new double[getSize()];
-        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2
-        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
-        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
-
+        multiply(y, yOffset, y, yOffset, tmp2, 0);      
+        add(tmp1, 0, tmp2, 0, tmp2, 0);                 
+        rootN(tmp2, 0, 2, tmp1, 0);                     
         if (x[xOffset] >= 0) {
-
-            // compute atan2(y, x) = 2 atan(y / (r + x))
-            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)
-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
+            add(tmp1, 0, x, xOffset, tmp2, 0);          
+            divide(y, yOffset, tmp2, 0, tmp1, 0);       
+            atan(tmp1, 0, tmp2, 0);                     
             for (int i = 0; i < tmp2.length; ++i) {
-                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
+                result[resultOffset + i] = 2 * tmp2[i]; 
             }
-
         } else {
-
-            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
-            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x
-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)
-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))
+            subtract(tmp1, 0, x, xOffset, tmp2, 0);     
+            divide(y, yOffset, tmp2, 0, tmp1, 0);       
+            atan(tmp1, 0, tmp2, 0);                     
             result[resultOffset] =
-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
+                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; 
             for (int i = 1; i < tmp2.length; ++i) {
-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
+                result[resultOffset + i] = -2 * tmp2[i]; 
             }
-
         }
-
-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
-
+// buggy code
+//        double[] tmp1 = new double[getSize()];
+//        multiply(x, xOffset, x, xOffset, tmp1, 0);
+//        double[] tmp2 = new double[getSize()];
+//        multiply(y, yOffset, y, yOffset, tmp2, 0);
+//        add(tmp1, 0, tmp2, 0, tmp2, 0);
+//        rootN(tmp2, 0, 2, tmp1, 0);
+//        if (x[xOffset] >= 0) {
+//            add(tmp1, 0, x, xOffset, tmp2, 0);
+//            divide(y, yOffset, tmp2, 0, tmp1, 0);
+//            atan(tmp1, 0, tmp2, 0);
+//            for (int i = 0; i < tmp2.length; ++i) {
+//                result[resultOffset + i] = 2 * tmp2[i];
+//            }
+//        } else {
+//            subtract(tmp1, 0, x,
     }
