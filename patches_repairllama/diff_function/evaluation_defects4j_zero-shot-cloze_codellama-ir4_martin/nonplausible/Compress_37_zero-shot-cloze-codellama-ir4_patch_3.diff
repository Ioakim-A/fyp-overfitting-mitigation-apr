diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c5b0c33f-10ec-4ce8-9bf7-9d9445c344ea_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/3f2a0fa4-1d29-4f37-adb1-f2f036954b51_fixed.java
index 17814ec..52c1df9 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c5b0c33f-10ec-4ce8-9bf7-9d9445c344ea_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/3f2a0fa4-1d29-4f37-adb1-f2f036954b51_fixed.java
@@ -1,51 +1,69 @@
     Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
         final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
-        // Format is "length keyword=value\n";
-        while(true){ // get length
+        while(true){ 
             int ch;
             int len = 0;
             int read = 0;
             while((ch = i.read()) != -1) {
                 read++;
-                if (ch == ' '){
-                    // Get keyword
+// buggy code
+//                if (ch == ' '){
+//                    final String keyword = coll.toString(CharsetNames.UTF_8);
+//                    final int restLen = len - read;
+//                    if (restLen == 1) { 
+//                        headers.remove(keyword);
+//                    } else {
+//                        final byte[] rest = new byte[restLen];
+//                        final int got = IOUtils.readFully(i, rest);
+//                        if (got != restLen) {
+//                            throw new IOException("Failed to read "
+//                                                  + "Paxheader. Expected "
+//                                                  + restLen
+//                                                  + " bytes, read "
+//                                                  + got);
+//                        }
+//                        final String value = new String(rest, 0,
+//                                                  restLen - 1, CharsetNames.UTF_8);
+//                        headers.put(keyword, value);
+//                    }
+//                    break;
+//                }
+                if (ch == '\n'){ 
                     final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                     while((ch = i.read()) != -1) {
                         read++;
-                        if (ch == '='){ // end of keyword
+                        if (ch == '='){ 
                             final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
                             final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+                            if (restLen == 1) { 
                                 headers.remove(keyword);
                             } else {
                                 final byte[] rest = new byte[restLen];
                                 final int got = IOUtils.readFully(i, rest);
                                 if (got != restLen) {
                                     throw new IOException("Failed to read "
                                                           + "Paxheader. Expected "
                                                           + restLen
                                                           + " bytes, read "
                                                           + got);
                                 }
-                                // Drop trailing NL
                                 final String value = new String(rest, 0,
                                                           restLen - 1, CharsetNames.UTF_8);
                                 headers.put(keyword, value);
                             }
                             break;
                         }
                         coll.write((byte) ch);
                     }
-                    break; // Processed single header
+                    break; 
                 }
                 len *= 10;
                 len += ch - '0';
             }
-            if (ch == -1){ // EOF
+            if (ch == -1){ 
                 break;
             }
         }
         return headers;
     }
