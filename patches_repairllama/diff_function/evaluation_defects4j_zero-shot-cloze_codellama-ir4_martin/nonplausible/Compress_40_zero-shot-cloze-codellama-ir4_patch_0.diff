diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/cdd09a34-dba8-4116-9b29-0c10617790e7_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f0ae359a-d952-4895-974d-d3d5d47f224b_fixed.java
index 5aa01c2..da30de8 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/cdd09a34-dba8-4116-9b29-0c10617790e7_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f0ae359a-d952-4895-974d-d3d5d47f224b_fixed.java
@@ -1,29 +1,29 @@
     public long readBits(final int count) throws IOException {
         if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
             throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
         }
-        while (bitsCachedSize < count) {
-            final long nextByte = in.read();
-            if (nextByte < 0) {
-                return nextByte;
-            }
-            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsCached |= (nextByte << bitsCachedSize);
-            } else {
-                bitsCached <<= 8;
-                bitsCached |= nextByte;
-            }
-            bitsCachedSize += 8;
-        }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
-        
-        final long bitsOut;
-            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsOut = (bitsCached & MASKS[count]);
-                bitsCached >>>= count;
-            } else {
-                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
-            }
-            bitsCachedSize -= count;
+// buggy code
+//        while (bitsCachedSize < count) {
+//            final long nextByte = in.read();
+//            if (nextByte < 0) {
+//                return nextByte;
+//            }
+//            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+//                bitsCached |= (nextByte << bitsCachedSize);
+//            } else {
+//                bitsCached <<= 8;
+//                bitsCached |= nextByte;
+//            }
+//            bitsCachedSize += 8;
+//        }
+//        final long bitsOut;
+//            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+//                bitsOut = (bitsCached & MASKS[count]);
+//                bitsCached >>>= count;
+//            } else {
+//                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+//            }
+//            bitsCachedSize -= count;
+//        return bitsOut;
         return bitsOut;
     }
