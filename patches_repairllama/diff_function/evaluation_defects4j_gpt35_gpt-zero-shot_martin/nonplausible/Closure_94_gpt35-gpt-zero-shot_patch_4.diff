diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0043fa53-56b8-4517-9bdf-0a166884f2a6_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/953ed852-4fde-4259-bf0a-bba8e60a07f1_fixed.java
index 02afa2a..fd1ae9b 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0043fa53-56b8-4517-9bdf-0a166884f2a6_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/953ed852-4fde-4259-bf0a-bba8e60a07f1_fixed.java
@@ -1,28 +1,20 @@
   static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
       case Token.STRING:
       case Token.NUMBER:
       case Token.TRUE:
       case Token.FALSE:
         return true;
-
-      // Binary operators are only valid if both children are valid.
       case Token.BITAND:
       case Token.BITNOT:
       case Token.BITOR:
       case Token.BITXOR:
-
-      // Uniary operators are valid if the child is valid.
       case Token.NOT:
       case Token.NEG:
-        return isValidDefineValue(val.getFirstChild(), defines);
-
-      // Names are valid if and only if they are defines themselves.
+      case Token.BLOCK:
       case Token.NAME:
       case Token.GETPROP:
-        if (val.isQualifiedName()) {
-          return defines.contains(val.getQualifiedName());
-        }
+        return isValidDefineValue(val.getFirstChild(), defines);
     }
     return false;
   }
\ No newline at end of file
