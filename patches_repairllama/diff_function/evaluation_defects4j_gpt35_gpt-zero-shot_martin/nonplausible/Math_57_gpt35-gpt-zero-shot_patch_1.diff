diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/273fb69b-2630-4588-ba98-ad2b705f6e22_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e0749062-8a9b-4457-b88a-c6fb96f0a9d0_fixed.java
index f85e117..7d27554 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/273fb69b-2630-4588-ba98-ad2b705f6e22_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e0749062-8a9b-4457-b88a-c6fb96f0a9d0_fixed.java
@@ -1,38 +1,27 @@
 private static <T extends Clusterable<T>> List<Cluster<T>>
     chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
-
     final List<T> pointSet = new ArrayList<T>(points);
     final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
-
-        // Choose one center uniformly at random from among the data points.
     final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
     resultSet.add(new Cluster<T>(firstPoint));
-
     final double[] dx2 = new double[pointSet.size()];
-        while (resultSet.size() < k) {
-            // For each data point x, compute D(x), the distance between x and
-            // the nearest center that has already been chosen.
-            int sum = 0;
+    double sum = 0; // Fix: Initialize sum to 0
     for (int i = 0; i < pointSet.size(); i++) {
         final T p = pointSet.get(i);
         final Cluster<T> nearest = getNearestCluster(resultSet, p);
         final double d = p.distanceFrom(nearest.getCenter());
         sum += d * d;
         dx2[i] = sum;
     }
-
-            // Add one new data point as a center. Each point x is chosen with
-            // probability proportional to D(x)2
+    while (resultSet.size() < k) {
         final double r = random.nextDouble() * sum;
         for (int i = 0 ; i < dx2.length; i++) {
             if (dx2[i] >= r) {
                 final T p = pointSet.remove(i);
                 resultSet.add(new Cluster<T>(p));
                 break;
             }
         }
     }
-
     return resultSet;
-
 }
\ No newline at end of file
