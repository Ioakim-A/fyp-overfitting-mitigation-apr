diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/aa96d5be-a914-465f-96f9-7f8cf0764560_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/863a5d77-6455-41c8-8e26-b032cf197600_fixed.java
index c50b3cc..532f12e 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/aa96d5be-a914-465f-96f9-7f8cf0764560_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/863a5d77-6455-41c8-8e26-b032cf197600_fixed.java
@@ -1,23 +1,23 @@
 public Period normalizedStandard(PeriodType type) {
     type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
+    long millis = getMillis();  
     millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
     millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
     millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
     millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
     millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
     Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
     int years = getYears();
     int months = getMonths();
     if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
+        years += months / 12;
         months = months % 12;
         if (years != 0) {
             result = result.withYears(years);
         }
         if (months != 0) {
             result = result.withMonths(months);
         }
     }
     return result;
 }
\ No newline at end of file
