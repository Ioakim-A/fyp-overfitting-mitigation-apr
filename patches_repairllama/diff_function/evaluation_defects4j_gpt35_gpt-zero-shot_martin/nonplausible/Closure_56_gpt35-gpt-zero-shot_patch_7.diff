diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/fa65d5b3-5a83-49b3-ae21-5cc5f9b8345a_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/bfd79ad9-8fb3-4390-a9f0-cf3aa830dd14_fixed.java
index 68990d4..f25300b 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/fa65d5b3-5a83-49b3-ae21-5cc5f9b8345a_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/bfd79ad9-8fb3-4390-a9f0-cf3aa830dd14_fixed.java
@@ -1,42 +1,29 @@
 public String getLine(int lineNumber) {
   String js = "";
   try {
-      // NOTE(nicksantos): Right now, this is optimized for few warnings.
-      // This is probably the right trade-off, but will be slow if there
-      // are lots of warnings in one file.
     js = getCode();
   } catch (IOException e) {
     return null;
   }
-
   int pos = 0;
   int startLine = 1;
-
-    // If we've saved a previous offset and it's for a line less than the
-    // one we're searching for, then start at that point.
   if (lineNumber >= lastLine) {
     pos = lastOffset;
     startLine = lastLine;
   }
-
   for (int n = startLine; n < lineNumber; n++) {
     int nextpos = js.indexOf('\n', pos);
     if (nextpos == -1) {
       return null;
     }
     pos = nextpos + 1;
   }
-
-    // Remember this offset for the next search we do.
   lastOffset = pos;
   lastLine = lineNumber;
-
-    if (js.indexOf('\n', pos) == -1) {
-      // If next new line cannot be found, there are two cases
-      // 1. pos already reaches the end of file, then null should be returned
-      // 2. otherwise, return the contents between pos and the end of file.
-        return null;
+  int nextpos = js.indexOf('\n', pos);
+  if (nextpos == -1) {
+    return js.substring(pos);
   } else {
-      return js.substring(pos, js.indexOf('\n', pos));
+    return js.substring(pos, nextpos);
   }
 }
\ No newline at end of file
