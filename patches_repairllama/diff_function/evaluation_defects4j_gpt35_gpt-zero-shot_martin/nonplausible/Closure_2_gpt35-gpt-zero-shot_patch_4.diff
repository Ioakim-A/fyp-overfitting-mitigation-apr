diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/98e4ef50-9455-4b00-96d5-87ccbbe2bf66_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/8f03ead0-fda0-4047-98fc-075e11f41f00_fixed.java
index 9a8827e..0ea3030 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/98e4ef50-9455-4b00-96d5-87ccbbe2bf66_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/8f03ead0-fda0-4047-98fc-075e11f41f00_fixed.java
@@ -1,27 +1,25 @@
     private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
         String functionName, HashMap<String, ObjectType> properties,
         HashMap<String, ObjectType> currentProperties,
         ObjectType interfaceType) {
       ObjectType implicitProto = interfaceType.getImplicitPrototype();
       Set<String> currentPropertyNames;
-      // This can be the case if interfaceType is proxy to a non-existent
-      // object (which is a bad type annotation, but shouldn't crash).
-      currentPropertyNames = implicitProto.getOwnPropertyNames();
+      currentPropertyNames = implicitProto.getAllPropertyNames();
       for (String name : currentPropertyNames) {
         ObjectType oType = properties.get(name);
         if (oType != null) {
           if (!interfaceType.getPropertyType(name).isEquivalentTo(
               oType.getPropertyType(name))) {
             compiler.report(
                 t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
                     functionName, name, oType.toString(),
                     interfaceType.toString()));
           }
         }
         currentProperties.put(name, interfaceType);
       }
       for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
         checkInterfaceConflictProperties(t, n, functionName, properties,
             currentProperties, iType);
       }
     }
\ No newline at end of file
