diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/032bb651-d125-4bf4-8787-eba3dc6af716_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b90c291b-a021-4872-9be0-d291f1e57c83_fixed.java
index 7e6373a..5721fc6 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/032bb651-d125-4bf4-8787-eba3dc6af716_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b90c291b-a021-4872-9be0-d291f1e57c83_fixed.java
@@ -1,63 +1,32 @@
-    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
-    {
+protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {
     init();
     this.options = options;
-
-        // an iterator for the command line tokens
-        Iterator iter = Arrays.asList(arguments).iterator();
-
-        // process each command line token
-        while (iter.hasNext())
-        {
-            // get the next command line token
-            String token = (String) iter.next();
-
-            // handle long option --foo or --foo=bar
-            if (token.startsWith("--"))
-            {
-                if (token.indexOf('=') != -1)
-                {
+    Iterator<String> iter = Arrays.asList(arguments).iterator();
+    while (iter.hasNext()) {
+        String token = iter.next();
+        if (token.startsWith("--")) {
+            if (token.indexOf('=') != -1) {
                 tokens.add(token.substring(0, token.indexOf('=')));
-                    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));
-                }
-                else
-                {
+                tokens.add(token.substring(token.indexOf('=') + 1));
+            } else {
                 tokens.add(token);
             }
-            }
-
-            // single hyphen
-            else if ("-".equals(token))
-            {
+        } else if ("-".equals(token)) {
             tokens.add(token);
-            }
-            else if (token.startsWith("-"))
-            {
-                if (token.length() == 2)
-                {
+        } else if (token.startsWith("-")) {
+            if (token.length() == 2) {
                 processOptionToken(token, stopAtNonOption);
-                }
-                else if (options.hasOption(token))
-                {
+            } else if (options.hasOption(token)) {
                 tokens.add(token);
-                }
-                // requires bursting
-                else
-                {
+            } else {
                 burstToken(token, stopAtNonOption);
             }
-            }
-            else if (stopAtNonOption)
-            {
+        } else if (stopAtNonOption) {
             process(token);
-            }
-            else
-            {
+        } else {
             tokens.add(token);
         }
-
         gobble(iter);
     }
-
-        return (String[]) tokens.toArray(new String[tokens.size()]);
+    return tokens.toArray(new String[tokens.size()]);
 }
\ No newline at end of file
