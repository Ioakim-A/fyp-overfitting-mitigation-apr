diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/8a67b8b6-5421-497b-bf41-43bf6c4d4763_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/8f763488-90d4-47a2-b77e-117adf1a1ab3_fixed.java
index d4e6d48..a929a1a 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/8a67b8b6-5421-497b-bf41-43bf6c4d4763_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/8f763488-90d4-47a2-b77e-117adf1a1ab3_fixed.java
@@ -1,23 +1,22 @@
   private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
     if (callTarget != null && callTarget.isName() &&
           callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
       Node value = callTarget.getNext();
       if (value != null) {
         Node addition = IR.add(
             IR.string("").srcref(callTarget),
             value.detachFromParent());
         n.getParent().replaceChild(n, addition);
         reportCodeChange();
         return addition;
+      } else {
+        Node emptyString = IR.string("");
+        n.getParent().replaceChild(n, emptyString);
+        reportCodeChange();
+        return emptyString;
       }
     }
     return n;
   }
\ No newline at end of file
