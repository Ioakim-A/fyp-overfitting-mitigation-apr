diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c5e9c57d-9517-41c7-8da8-fc6d9cfd4fa6_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/34efc02f-779a-40f6-a487-18f923f64aef_fixed.java
index d7800f4..14f01ea 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c5e9c57d-9517-41c7-8da8-fc6d9cfd4fa6_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/34efc02f-779a-40f6-a487-18f923f64aef_fixed.java
@@ -1,31 +1 @@
-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
-    setResolvedTypeInternal(this);
-
-    call = (ArrowType) safeResolve(call, t, scope);
-    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
-
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
-
-    boolean changed = false;
-    ImmutableList.Builder<ObjectType> resolvedInterfaces =
-        ImmutableList.builder();
-    for (ObjectType iface : implementedInterfaces) {
-      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
-      resolvedInterfaces.add(resolvedIface);
-      changed |= (resolvedIface != iface);
-    }
-    if (changed) {
-      implementedInterfaces = resolvedInterfaces.build();
-    }
-
-    if (subTypes != null) {
-      for (int i = 0; i < subTypes.size(); i++) {
-        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
-      }
-    }
-
-    return super.resolveInternal(t, scope);
-  }
+typeOfThis = (ObjectType) typeOfThis.resolve(t, scope);
\ No newline at end of file
