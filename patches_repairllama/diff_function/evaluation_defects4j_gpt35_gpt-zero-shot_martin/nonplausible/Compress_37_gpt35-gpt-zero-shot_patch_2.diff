diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/bbda01d4-9c56-4c1d-a01f-63a964a6367c_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/ce070bda-9f99-4d1d-8dc1-77e5190d8b16_fixed.java
index 17814ec..87f29f4 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/bbda01d4-9c56-4c1d-a01f-63a964a6367c_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/ce070bda-9f99-4d1d-8dc1-77e5190d8b16_fixed.java
@@ -1,51 +1,48 @@
 Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
-        // Format is "length keyword=value\n";
-        while(true){ // get length
+    while(true){ 
         int ch;
         int len = 0;
         int read = 0;
         while((ch = i.read()) != -1) {
             read++;
             if (ch == ' '){
-                    // Get keyword
                 final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                 while((ch = i.read()) != -1) {
                     read++;
-                        if (ch == '='){ // end of keyword
+                    if (ch == '='){ 
                         final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
                         final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+                        if (restLen == 1) { 
                             headers.remove(keyword);
                         } else {
                             final byte[] rest = new byte[restLen];
                             final int got = IOUtils.readFully(i, rest);
                             if (got != restLen) {
                                 throw new IOException("Failed to read "
                                                       + "Paxheader. Expected "
                                                       + restLen
                                                       + " bytes, read "
                                                       + got);
                             }
-                                // Drop trailing NL
                             final String value = new String(rest, 0,
                                                       restLen - 1, CharsetNames.UTF_8);
                             headers.put(keyword, value);
                         }
                         break;
                     }
                     coll.write((byte) ch);
                 }
-                    break; // Processed single header
-                }
+                break; 
+            } else if (Character.isDigit(ch)) { // Fixing the bug here
                 len *= 10;
                 len += ch - '0';
             }
-            if (ch == -1){ // EOF
+        }
+        if (ch == -1){ 
             break;
         }
     }
     return headers;
 }
\ No newline at end of file
