diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/cbba759c-9ff9-4020-992d-adc2318aa544_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/be627857-9360-405c-a3f7-88138b0b3f90_fixed.java
index 2f17e18..41011dd 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/cbba759c-9ff9-4020-992d-adc2318aa544_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/be627857-9360-405c-a3f7-88138b0b3f90_fixed.java
@@ -1,47 +1,82 @@
 public double solve(final UnivariateRealFunction f,
                     final double min, final double max, final double initial)
     throws MaxIterationsExceededException, FunctionEvaluationException {
-
     clearResult();
     verifySequence(min, initial, max);
-
-        // return the initial guess if it is good enough
     double yInitial = f.value(initial);
     if (Math.abs(yInitial) <= functionValueAccuracy) {
         setResult(initial, 0);
         return result;
     }
-
-        // return the first endpoint if it is good enough
     double yMin = f.value(min);
     if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+        setResult(min, 0);
         return result;
     }
-
-        // reduce interval if min and initial bracket the root
     if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
+        return solve(f, min, initial, yMin);
     }
-
-        // return the second endpoint if it is good enough
     double yMax = f.value(max);
     if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+        setResult(max, 0);
         return result;
     }
-
-        // reduce interval if initial and max bracket the root
     if (yInitial * yMax < 0) {
-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);
+        return solve(f, initial, max, yMax);
     }
-
     if (yMin * yMax > 0) {
         throw MathRuntimeException.createIllegalArgumentException(
               NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
     }
+    return solve(f, min, max, min, yMin, max, yMax, initial, yInitial);
+}
 
-        // full Brent algorithm starting with provided initial guess
-        return solve(f, min, yMin, max, yMax, initial, yInitial);
-
+private double solve(final UnivariateRealFunction f,
+                     final double min, final double initial, final double yMin)
+    throws MaxIterationsExceededException, FunctionEvaluationException {
+    double max = initial;
+    double yMax = yMin;
+    double oldY = yMin;
+    double x0 = min;
+    double y0 = yMin;
+    double x1 = initial;
+    double y1 = yMax;
+    while (true) {
+        double x2 = x1 + 1.618033988749895 * (x1 - x0);
+        double y2 = f.value(x2);
+        if (Math.abs(y2) <= functionValueAccuracy) {
+            setResult(x2, 0);
+            return result;
+        }
+        if (y2 * y0 < 0) {
+            max = x1;
+            yMax = y1;
+        } else {
+            min = x1;
+            yMin = y1;
+        }
+        if ((max - min) <= absoluteAccuracy || Math.abs(y2) <= relativeAccuracy) {
+            setResult(x2, 0);
+            return result;
+        }
+        if ((yMax * yMin) > 0.0) {
+            throw MathRuntimeException.createIllegalArgumentException(
+                    NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
+        }
+        double x0a = x1;
+        double y0a = y1;
+        double x1a = x2;
+        double y1a = y2;
+        if (y0a * y1a <= 0) {
+            x0 = x0a;
+            y0 = y0a;
+            x1 = x1a;
+            y1 = y1a;
+        } else {
+            x0 = x1a;
+            y0 = y1a;
+            x1 = x0a;
+            y1 = y0a;
+        }
+    }
 }
\ No newline at end of file
