diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b5ee1acc-0d36-43aa-8df1-088999560bca_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/eb4a154a-6911-4b20-9f31-5c476424975f_fixed.java
index 5280b92..006921e 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b5ee1acc-0d36-43aa-8df1-088999560bca_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/eb4a154a-6911-4b20-9f31-5c476424975f_fixed.java
@@ -1,50 +1,12 @@
-    void decode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
-            return;
-        }
-        if (inAvail < 0) {
-            eof = true;
-        }
-        for (int i = 0; i < inAvail; i++) {
-            if (buffer == null || buffer.length - pos < decodeSize) {
-                resizeBuffer();
-            }
-            byte b = in[inPos++];
-            if (b == PAD) {
-                // We're done.
-                eof = true;
-                break;
-            } else {
-                if (b >= 0 && b < DECODE_TABLE.length) {
-                    int result = DECODE_TABLE[b];
-                    if (result >= 0) {
-                        modulus = (++modulus) % 4;
-                        x = (x << 6) + result;
-                        if (modulus == 0) {
-                            buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
-                            buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
-                            buffer[pos++] = (byte) (x & MASK_8BITS);
-                        }
-                    }
-                }
-            }
-        }
-
-        // Two forms of EOF as far as base64 decoder is concerned: actual
-        // EOF (-1) and first time '=' character is encountered in stream.
-        // This approach makes the '=' padding characters completely optional.
 if (eof && modulus != 0) {
-            
     x = x << 6;
     switch (modulus) {
         case 2 :
-                    x = x << 6;
             buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
             break;
         case 3 :
             buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
             buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
             break;
     }
 }
\ No newline at end of file
-    }
