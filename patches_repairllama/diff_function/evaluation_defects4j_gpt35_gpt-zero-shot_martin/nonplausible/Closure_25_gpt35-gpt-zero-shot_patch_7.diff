diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f5bc9579-584e-4af4-886c-f07f3fcf2c99_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/868a5c09-3612-4034-b67e-c10df447fb77_fixed.java
index b98f0a7..5a107d8 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f5bc9579-584e-4af4-886c-f07f3fcf2c99_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/868a5c09-3612-4034-b67e-c10df447fb77_fixed.java
@@ -1,29 +1,25 @@
  private FlowScope traverseNew(Node n, FlowScope scope) {
-
      Node constructor = n.getFirstChild();
      scope = traverse(constructor, scope);
      JSType constructorType = constructor.getJSType();
      JSType type = null;
      if (constructorType != null) {
        constructorType = constructorType.restrictByNotNullOrUndefined();
        if (constructorType.isUnknownType()) {
          type = getNativeType(UNKNOWN_TYPE);
        } else {
          FunctionType ct = constructorType.toMaybeFunctionType();
          if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
            ct = (FunctionType) constructorType;
          }
          if (ct != null && ct.isConstructor()) {
            type = ct.getInstanceType();
          }
        }
      }
      n.setJSType(type);
      for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
        scope = traverse(arg, scope);
      }
      return scope;
  }
\ No newline at end of file
