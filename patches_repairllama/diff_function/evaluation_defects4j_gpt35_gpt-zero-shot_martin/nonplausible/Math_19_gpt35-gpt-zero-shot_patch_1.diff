diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/84644cdf-098e-4df0-bbdf-bf347851893a_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6d63ea1d-9254-4f35-93fc-a64d6b079cd1_fixed.java
index 248f3ee..28a9d10 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/84644cdf-098e-4df0-bbdf-bf347851893a_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6d63ea1d-9254-4f35-93fc-a64d6b079cd1_fixed.java
@@ -1,58 +1,49 @@
 private void checkParameters() {
     final double[] init = getStartPoint();
     final double[] lB = getLowerBound();
     final double[] uB = getUpperBound();
-
-        // Checks whether there is at least one finite bound value.
     boolean hasFiniteBounds = false;
     for (int i = 0; i < lB.length; i++) {
         if (!Double.isInfinite(lB[i]) ||
             !Double.isInfinite(uB[i])) {
             hasFiniteBounds = true;
             break;
         }
     }
-        // Checks whether there is at least one infinite bound value.
     boolean hasInfiniteBounds = false;
     if (hasFiniteBounds) {
         for (int i = 0; i < lB.length; i++) {
             if (Double.isInfinite(lB[i]) ||
                 Double.isInfinite(uB[i])) {
                 hasInfiniteBounds = true;
                 break;
             }
         }
-
         if (hasInfiniteBounds) {
-                // If there is at least one finite bound, none can be infinite,
-                // because mixed cases are not supported by the current code.
             throw new MathUnsupportedOperationException();
         } else {
-                // Convert API to internal handling of boundaries.
             boundaries = new double[2][];
             boundaries[0] = lB;
             boundaries[1] = uB;
-
-                // Abort early if the normalization will overflow (cf. "encode" method).
+            // Fix: Initialize the inputSigma array with the same length as the init array
+            inputSigma = new double[init.length];
         }
     } else {
-            // Convert API to internal handling of boundaries.
         boundaries = null;
     }
-
     if (inputSigma != null) {
         if (inputSigma.length != init.length) {
             throw new DimensionMismatchException(inputSigma.length, init.length);
         }
         for (int i = 0; i < init.length; i++) {
             if (inputSigma[i] < 0) {
                 throw new NotPositiveException(inputSigma[i]);
             }
             if (boundaries != null) {
                 if (inputSigma[i] > boundaries[1][i] - boundaries[0][i]) {
                     throw new OutOfRangeException(inputSigma[i], 0, boundaries[1][i] - boundaries[0][i]);
                 }
             }
         }
     }
 }
\ No newline at end of file
