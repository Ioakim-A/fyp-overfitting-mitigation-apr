diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/fc2f2e4e-ad72-4eb5-bab4-dda0dd1f0e3e_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c426736d-e9e9-4ab2-9b22-a5b80aefb835_fixed.java
index b2db1d6..19ddd07 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/fc2f2e4e-ad72-4eb5-bab4-dda0dd1f0e3e_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c426736d-e9e9-4ab2-9b22-a5b80aefb835_fixed.java
@@ -1,29 +1,20 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
         Class<?> mixInCls, AnnotatedMethodMap mixIns)
 {
     List<Class<?>> parents = new ArrayList<Class<?>>();
     parents.add(mixInCls);
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
     for (Class<?> mixin : parents) {
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
-                /* Do we already have a method to augment (from sub-class
-                 * that will mask this mixIn)? If so, add if visible
-                 * without masking (no such annotation)
-                 */
             if (am != null) {
                 _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
             } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
-                        mixIns.add(_constructMethod(m));
+                mixIns.add(_constructMethod(m, mixin));
             }
         }
     }
 }
\ No newline at end of file
