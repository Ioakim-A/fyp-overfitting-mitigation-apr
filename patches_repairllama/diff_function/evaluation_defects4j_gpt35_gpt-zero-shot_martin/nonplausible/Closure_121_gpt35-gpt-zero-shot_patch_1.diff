diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/929d3169-1e5a-4afc-9317-3d8afe0915ac_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6395b560-0ecb-4137-b365-c9e754f5981a_fixed.java
index 3a790cb..b4624b0 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/929d3169-1e5a-4afc-9317-3d8afe0915ac_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6395b560-0ecb-4137-b365-c9e754f5981a_fixed.java
@@ -1,74 +1,48 @@
-    private void inlineNonConstants(
-        Var v, ReferenceCollection referenceInfo,
-        boolean maybeModifiedArguments) {
+private void inlineNonConstants(Var v, ReferenceCollection referenceInfo, boolean maybeModifiedArguments) {
     int refCount = referenceInfo.references.size();
     Reference declaration = referenceInfo.references.get(0);
     Reference init = referenceInfo.getInitializingReference();
     int firstRefAfterInit = (declaration == init) ? 2 : 3;
-
-      if (refCount > 1 &&
-          isImmutableAndWellDefinedVariable(v, referenceInfo)) {
-        // if the variable is referenced more than once, we can only
-        // inline it if it's immutable and never defined before referenced.
+    if (refCount > 1 && isImmutableAndWellDefinedVariable(v, referenceInfo)) {
         Node value;
         if (init != null) {
             value = init.getAssignedValue();
         } else {
-          // Create a new node for variable that is never initialized.
             Node srcLocation = declaration.getNode();
             value = NodeUtil.newUndefinedNode(srcLocation);
         }
         Preconditions.checkNotNull(value);
         inlineWellDefinedVariable(v, value, referenceInfo.references);
         staleVars.add(v);
     } else if (refCount == firstRefAfterInit) {
-        // The variable likely only read once, try some more
-        // complex inlining heuristics.
-        Reference reference = referenceInfo.references.get(
-            firstRefAfterInit - 1);
+        Reference reference = referenceInfo.references.get(firstRefAfterInit - 1);
         if (canInline(declaration, init, reference)) {
             inline(v, declaration, init, reference);
             staleVars.add(v);
         }
     } else if (declaration != init && refCount == 2) {
         if (isValidDeclaration(declaration) && isValidInitialization(init)) {
-          // The only reference is the initialization, remove the assignment and
-          // the variable declaration.
             Node value = init.getAssignedValue();
             Preconditions.checkNotNull(value);
             inlineWellDefinedVariable(v, value, referenceInfo.references);
             staleVars.add(v);
         }
     }
-
-      // If this variable was not inlined normally, check if we can
-      // inline an alias of it. (If the variable was inlined, then the
-      // reference data is out of sync. We're better off just waiting for
-      // the next pass.)
-      if (!maybeModifiedArguments &&
-          !staleVars.contains(v) &&
-          referenceInfo.isWellDefined() &&
-          referenceInfo.isAssignedOnceInLifetime()) {
-          // Inlining the variable based solely on well-defined and assigned
-          // once is *NOT* correct. We relax the correctness requirement if
-          // the variable is declared constant.
+    if (!maybeModifiedArguments && !staleVars.contains(v) && referenceInfo.isWellDefined() && referenceInfo.isAssignedOnceInLifetime()) {
         List<Reference> refs = referenceInfo.references;
-        for (int i = 1 /* start from a read */; i < refs.size(); i++) {
+        for (int i = 1 ; i < refs.size(); i++) {
             Node nameNode = refs.get(i).getNode();
             if (aliasCandidates.containsKey(nameNode)) {
                 AliasCandidate candidate = aliasCandidates.get(nameNode);
-            if (!staleVars.contains(candidate.alias) &&
-                !isVarInlineForbidden(candidate.alias)) {
+                if (!staleVars.contains(candidate.alias) && !isVarInlineForbidden(candidate.alias)) {
                     Reference aliasInit;
                     aliasInit = candidate.refInfo.getInitializingReference();
                     Node value = aliasInit.getAssignedValue();
                     Preconditions.checkNotNull(value);
-              inlineWellDefinedVariable(candidate.alias,
-                  value,
-                  candidate.refInfo.references);
+                    inlineWellDefinedVariable(candidate.alias, value, candidate.refInfo.references);
                     staleVars.add(candidate.alias);
                 }
             }
         }
     }
 }
\ No newline at end of file
