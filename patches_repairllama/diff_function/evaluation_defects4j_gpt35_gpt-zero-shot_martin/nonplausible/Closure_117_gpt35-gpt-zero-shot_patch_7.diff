diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6be76353-3b2e-483f-a729-7c3e2c9df376_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/33dbad5e-a5b3-4101-85b6-4969abedf1a6_fixed.java
index dfceb86..e9f0b4f 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6be76353-3b2e-483f-a729-7c3e2c9df376_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/33dbad5e-a5b3-4101-85b6-4969abedf1a6_fixed.java
@@ -1,54 +1,22 @@
 String getReadableJSTypeName(Node n, boolean dereference) {
-
-    // The best type name is the actual type name.
-
-    // If we're analyzing a GETPROP, the property may be inherited by the
-    // prototype chain. So climb the prototype chain and find out where
-    // the property was originally defined.
-    if (n.isGetProp()) {
-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();
-      if (objectType != null) {
-        String propName = n.getLastChild().getString();
-        if (objectType.getConstructor() != null &&
-            objectType.getConstructor().isInterface()) {
-          objectType = FunctionType.getTopDefiningInterface(
-              objectType, propName);
-        } else {
-          // classes
-          while (objectType != null && !objectType.hasOwnProperty(propName)) {
-            objectType = objectType.getImplicitPrototype();
-          }
-        }
-
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
-        if (objectType != null &&
-            (objectType.getConstructor() != null ||
-             objectType.isFunctionPrototypeType())) {
-          return objectType.toString() + "." + propName;
-        }
-      }
-    }
-
     JSType type = getJSType(n);
     if (dereference) {
         ObjectType dereferenced = type.dereference();
         if (dereferenced != null) {
             type = dereferenced;
         }
     }
-    if (type.isFunctionPrototypeType() ||
-        (type.toObjectType() != null &&
-         type.toObjectType().getConstructor() != null)) {
-      return type.toString();
-    }
+    if (type.isFunctionType()) {
+        return "function";
+    } else {
         String qualifiedName = n.getQualifiedName();
         if (qualifiedName != null) {
             return qualifiedName;
-    } else if (type.isFunctionType()) {
-      // Don't show complex function names.
-      return "function";
+        } else if (type.toObjectType() != null &&
+            type.toObjectType().getConstructor() != null) {
+            return type.toString();
         } else {
             return type.toString();
         }
     }
+}
\ No newline at end of file
