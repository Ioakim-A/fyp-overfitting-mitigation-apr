diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/50e3cb9a-ac80-4fb3-bffb-e1ad901b7f22_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e126fb46-6167-4273-884d-0c6056fbd133_fixed.java
index 5aa01c2..a013d39 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/50e3cb9a-ac80-4fb3-bffb-e1ad901b7f22_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e126fb46-6167-4273-884d-0c6056fbd133_fixed.java
@@ -1,29 +1,28 @@
 public long readBits(final int count) throws IOException {
     if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
         throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
     }
     while (bitsCachedSize < count) {
         final long nextByte = in.read();
         if (nextByte < 0) {
             return nextByte;
         }
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
             bitsCached |= (nextByte << bitsCachedSize);
         } else {
             bitsCached <<= 8;
             bitsCached |= nextByte;
         }
         bitsCachedSize += 8;
     }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
-        
     final long bitsOut;
     if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
         bitsOut = (bitsCached & MASKS[count]);
         bitsCached >>>= count;
     } else {
         bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+        bitsCached <<= count;
     }
     bitsCachedSize -= count;
     return bitsOut;
 }
\ No newline at end of file
