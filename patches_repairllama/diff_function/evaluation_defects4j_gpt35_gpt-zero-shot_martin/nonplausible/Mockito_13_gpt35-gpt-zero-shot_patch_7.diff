diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4ea743ce-6bef-4278-8c8c-5f4baddeba85_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d54071a8-7854-4d80-b120-0b7976b0f83a_fixed.java
index 5481b94..67b5d30 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4ea743ce-6bef-4278-8c8c-5f4baddeba85_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d54071a8-7854-4d80-b120-0b7976b0f83a_fixed.java
@@ -1,49 +1,34 @@
 public Object handle(Invocation invocation) throws Throwable {
     if (invocationContainerImpl.hasAnswersForStubbing()) {
-            // stubbing voids with stubVoid() or doAnswer() style
         InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress
                         .getArgumentMatcherStorage(), invocation);
         invocationContainerImpl.setMethodForStubbing(invocationMatcher);
         return null;
     }
     VerificationMode verificationMode = mockingProgress.pullVerificationMode();
-
     InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),
                     invocation);
-
     mockingProgress.validateState();
-
-        //if verificationMode is not null then someone is doing verify()        
     if (verificationMode != null) {
-            //We need to check if verification was started on the correct mock 
-            // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
         if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {
             VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);            
             verificationMode.verify(data);
             return null;
-                // this means there is an invocation on a different mock. Re-adding verification mode 
-                // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
+        } else {
+            verificationMode.verify(new VerificationDataImpl(invocationContainerImpl, invocationMatcher));
+            return null;
         }
     }
-        
     invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);
     OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);
     mockingProgress.reportOngoingStubbing(ongoingStubbing);
-
     StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);
-
     if (stubbedInvocation != null) {
         stubbedInvocation.captureArgumentsFrom(invocation);
         return stubbedInvocation.answer(invocation);
     } else {
         Object ret = mockSettings.getDefaultAnswer().answer(invocation);
-
-            // redo setting invocation for potential stubbing in case of partial
-            // mocks / spies.
-            // Without it, the real method inside 'when' might have delegated
-            // to other self method and overwrite the intended stubbed method
-            // with a different one. The reset is required to avoid runtime exception that validates return type with stubbed method signature.
         invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);
         return ret;
     }
 }
\ No newline at end of file
