diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b1531e86-315e-4934-8c93-f35128ac86e5_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/ef6cc245-0af7-401d-ba18-c8802f9262b1_fixed.java
index c4e5233..154a8cd 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b1531e86-315e-4934-8c93-f35128ac86e5_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/ef6cc245-0af7-401d-ba18-c8802f9262b1_fixed.java
@@ -1,43 +1,13 @@
-    public double solve(final UnivariateRealFunction f,
-                        final double min, final double max, final double initial)
-        throws MaxIterationsExceededException, FunctionEvaluationException {
-
-        clearResult();
-        verifySequence(min, initial, max);
-
-        // return the initial guess if it is good enough
-        double yInitial = f.value(initial);
-        if (Math.abs(yInitial) <= functionValueAccuracy) {
-            setResult(initial, 0);
+double x = (min + max) / 2;
+double y = f.value(x);
+if (Math.abs(y) <= functionValueAccuracy || Math.abs(max - min) <= absoluteAccuracy) {
+    setResult(x, 0);
     return result;
 }
-
-        // return the first endpoint if it is good enough
-        double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
-
-        // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
-        }
-
-        // return the second endpoint if it is good enough
-        double yMax = f.value(max);
-        if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
-            return result;
-        }
-
-        // reduce interval if initial and max bracket the root
-        if (yInitial * yMax < 0) {
-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);
-        }
-
-
-        // full Brent algorithm starting with provided initial guess
-        return solve(f, min, yMin, max, yMax, initial, yInitial);
-
+if (y * yMin < 0) {
+    return solve(f, min, yMin, x, y, min, yMin);
+} else if (y * yMax < 0) {
+    return solve(f, x, y, max, yMax, x, y);
+} else {
+    throw new FunctionEvaluationException("No bracketing interval found");
 }
\ No newline at end of file
