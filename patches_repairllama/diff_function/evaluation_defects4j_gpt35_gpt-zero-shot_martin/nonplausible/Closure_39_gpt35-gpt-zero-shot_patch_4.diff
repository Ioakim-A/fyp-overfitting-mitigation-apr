diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/887ffa29-f4e4-4a98-9fb4-f1a178843601_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0e21d32d-6ced-4a31-8be2-c8f8e5a3bfe7_fixed.java
index 25b1dac..85ef90e 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/887ffa29-f4e4-4a98-9fb4-f1a178843601_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0e21d32d-6ced-4a31-8be2-c8f8e5a3bfe7_fixed.java
@@ -1,44 +1,35 @@
 String toStringHelper(boolean forAnnotations) {
   if (hasReferenceName()) {
     return getReferenceName();
   } else if (prettyPrint) {
-      // Don't pretty print recursively.
     prettyPrint = false;
-
-      // Use a tree set so that the properties are sorted.
     Set<String> propertyNames = Sets.newTreeSet();
     for (ObjectType current = this;
          current != null && !current.isNativeObjectType() &&
              propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
          current = current.getImplicitPrototype()) {
       propertyNames.addAll(current.getOwnPropertyNames());
     }
-
     StringBuilder sb = new StringBuilder();
     sb.append("{");
-
     int i = 0;
     for (String property : propertyNames) {
       if (i > 0) {
         sb.append(", ");
       }
-
       sb.append(property);
       sb.append(": ");
       sb.append(getPropertyType(property).toString());
-
       ++i;
       if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
         sb.append(", ...");
         break;
       }
     }
-
     sb.append("}");
-
     prettyPrint = true;
     return sb.toString();
   } else {
     return "{...}";
   }
 }
\ No newline at end of file
