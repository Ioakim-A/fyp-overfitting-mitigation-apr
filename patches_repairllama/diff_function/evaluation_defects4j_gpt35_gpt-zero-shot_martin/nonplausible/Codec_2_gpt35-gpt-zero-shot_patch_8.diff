diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/7b9e83ac-79f7-4928-a381-ba95f9fc02ce_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/dd6a6af5-4486-449f-8366-9f3e2b157683_fixed.java
index 4433921..8dab997 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/7b9e83ac-79f7-4928-a381-ba95f9fc02ce_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/dd6a6af5-4486-449f-8366-9f3e2b157683_fixed.java
@@ -1,60 +1,5 @@
-    void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
-            return;
-        }
-        // inAvail < 0 is how we're informed of EOF in the underlying data we're
-        // encoding.
-        if (inAvail < 0) {
-            eof = true;
-            if (buf == null || buf.length - pos < encodeSize) {
-                resizeBuf();
-            }
-            switch (modulus) {
-                case 1:
-                    buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];
-                    // URL-SAFE skips the padding to further reduce size.
-                    if (encodeTable == STANDARD_ENCODE_TABLE) {
-                        buf[pos++] = PAD;
-                        buf[pos++] = PAD;
-                    }
-                    break;
-
-                case 2:
-                    buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
-                    buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
-                    buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];
-                    // URL-SAFE skips the padding to further reduce size.
-                    if (encodeTable == STANDARD_ENCODE_TABLE) {
-                        buf[pos++] = PAD;
-                    }
-                    break;
-            }
-            if (lineLength > 0) {
-                System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);
-                pos += lineSeparator.length;
-            }
-        } else {
-            for (int i = 0; i < inAvail; i++) {
-                if (buf == null || buf.length - pos < encodeSize) {
-                    resizeBuf();
-                }
-                modulus = (++modulus) % 3;
-                int b = in[inPos++];
-                if (b < 0) { b += 256; }
-                x = (x << 8) + b;
-                if (0 == modulus) {
-                    buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
-                    buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
-                    buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS];
-                    buf[pos++] = encodeTable[x & MASK_6BITS];
-                    currentLinePos += 4;
-                    if (lineLength > 0 && lineLength <= currentLinePos) {
+if (lineLength > 0 && pos >= lineLength) {
     System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);
     pos += lineSeparator.length;
     currentLinePos = 0;
 }
\ No newline at end of file
-                }
-            }
-        }
-    }
