diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2db72b35-33c6-4c03-b178-79f893fb55df_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/42f03bc4-b731-460b-b9e9-ee5d4cb06570_fixed.java
index 25b1dac..af2fd40 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2db72b35-33c6-4c03-b178-79f893fb55df_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/42f03bc4-b731-460b-b9e9-ee5d4cb06570_fixed.java
@@ -1,44 +1,33 @@
 String toStringHelper(boolean forAnnotations) {
   if (hasReferenceName()) {
     return getReferenceName();
   } else if (prettyPrint) {
-      // Don't pretty print recursively.
     prettyPrint = false;
-
-      // Use a tree set so that the properties are sorted.
     Set<String> propertyNames = Sets.newTreeSet();
+    int i = 0;
     for (ObjectType current = this;
          current != null && !current.isNativeObjectType() &&
              propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
          current = current.getImplicitPrototype()) {
       propertyNames.addAll(current.getOwnPropertyNames());
-      }
-
-      StringBuilder sb = new StringBuilder();
-      sb.append("{");
-
-      int i = 0;
       for (String property : propertyNames) {
         if (i > 0) {
           sb.append(", ");
         }
-
         sb.append(property);
         sb.append(": ");
         sb.append(getPropertyType(property).toString());
-
         ++i;
         if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
           sb.append(", ...");
           break;
         }
       }
-
       sb.append("}");
-
       prettyPrint = true;
       return sb.toString();
+    }
   } else {
     return "{...}";
   }
 }
\ No newline at end of file
