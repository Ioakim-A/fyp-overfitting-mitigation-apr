diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c2e39cf6-56a6-422b-bcd3-4bcd97b1797c_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/71574f10-0a9f-4547-a557-6363baae604b_fixed.java
index 5280b92..daff0e1 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c2e39cf6-56a6-422b-bcd3-4bcd97b1797c_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/71574f10-0a9f-4547-a557-6363baae604b_fixed.java
@@ -1,50 +1,46 @@
 void decode(byte[] in, int inPos, int inAvail) {
     if (eof) {
         return;
     }
     if (inAvail < 0) {
         eof = true;
     }
     for (int i = 0; i < inAvail; i++) {
         if (buffer == null || buffer.length - pos < decodeSize) {
             resizeBuffer();
         }
         byte b = in[inPos++];
         if (b == PAD) {
-                // We're done.
             eof = true;
             break;
         } else {
             if (b >= 0 && b < DECODE_TABLE.length) {
                 int result = DECODE_TABLE[b];
                 if (result >= 0) {
                     modulus = (++modulus) % 4;
                     x = (x << 6) + result;
                     if (modulus == 0) {
                         buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
                         buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
                         buffer[pos++] = (byte) (x & MASK_8BITS);
                     }
                 }
             }
         }
     }
-
-        // Two forms of EOF as far as base64 decoder is concerned: actual
-        // EOF (-1) and first time '=' character is encountered in stream.
-        // This approach makes the '=' padding characters completely optional.
     if (eof && modulus != 0) {
-            
         x = x << 6;
         switch (modulus) {
             case 2 :
                 x = x << 6;
                 buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
                 break;
             case 3 :
                 buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
                 buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+                buffer[pos++] = (byte) (x & MASK_8BITS);
                 break;
         }
     }
 }
\ No newline at end of file
