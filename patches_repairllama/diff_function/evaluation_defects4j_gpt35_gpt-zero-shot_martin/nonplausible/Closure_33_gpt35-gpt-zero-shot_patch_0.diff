diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e7850dcd-634c-4c3d-bd03-7e6de14c3b72_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c1d04304-0b61-4c0f-9075-be4f150d7ce5_fixed.java
index 370507c..d16b8a0 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e7850dcd-634c-4c3d-bd03-7e6de14c3b72_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c1d04304-0b61-4c0f-9075-be4f150d7ce5_fixed.java
@@ -1,26 +1,8 @@
-  public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
-
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraintObj.isRecordType()) {
-      for (String prop : constraintObj.getOwnPropertyNames()) {
-        JSType propType = constraintObj.getPropertyType(prop);
-        if (!isPropertyTypeDeclared(prop)) {
-          JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
-          }
-          defineInferredProperty(prop, typeToInfer, null);
-        }
+if (constraintObj.isFunctionType()) {
+    for (String param : constraintObj.getParameters()) {
+        JSType paramType = constraintObj.getParameterType(param);
+        if (!isParameterTypeDeclared(param)) {
+            defineInferredParameter(param, paramType);
         }
     }
 }
\ No newline at end of file
