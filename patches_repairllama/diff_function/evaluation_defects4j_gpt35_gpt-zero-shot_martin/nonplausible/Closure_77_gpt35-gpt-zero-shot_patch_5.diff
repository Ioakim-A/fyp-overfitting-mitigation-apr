diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/cde98284-b55b-47dd-8dd6-afa41a35f3ee_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/57b21397-51ab-4f18-9b3e-3af8e6671c3f_fixed.java
index a428a68..1df685b 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/cde98284-b55b-47dd-8dd6-afa41a35f3ee_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/57b21397-51ab-4f18-9b3e-3af8e6671c3f_fixed.java
@@ -1,70 +1,29 @@
-  static String strEscape(String s, char quote,
-                          String doublequoteEscape,
-                          String singlequoteEscape,
-                          String backslashEscape,
-                          CharsetEncoder outputCharsetEncoder) {
-    StringBuilder sb = new StringBuilder(s.length() + 2);
-    sb.append(quote);
-    for (int i = 0; i < s.length(); i++) {
-      char c = s.charAt(i);
-      switch (c) {
+<FILL_ME>
 case '\n': sb.append("\\n"); break;
 case '\r': sb.append("\\r"); break;
 case '\t': sb.append("\\t"); break;
 case '\\': sb.append(backslashEscape); break;
 case '\"': sb.append(doublequoteEscape); break;
 case '\'': sb.append(singlequoteEscape); break;
-        case '>':                       // Break --> into --\> or ]]> into ]]\>
+case '>':
   if (i >= 2 &&
       ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||
        (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {
     sb.append("\\>");
   } else {
     sb.append(c);
   }
   break;
 case '<':
-          // Break </script into <\/script
   final String END_SCRIPT = "/script";
-
-          // Break <!-- into <\!--
   final String START_COMMENT = "!--";
-
   if (s.regionMatches(true, i + 1, END_SCRIPT, 0,
                       END_SCRIPT.length())) {
-            sb.append("<\\");
+    sb.append("<\\\\");
   } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,
                              START_COMMENT.length())) {
-            sb.append("<\\");
+    sb.append("<\\\\");
   } else {
     sb.append(c);
   }
   break;
\ No newline at end of file
-        default:
-          // If we're given an outputCharsetEncoder, then check if the
-          //  character can be represented in this character set.
-          if (outputCharsetEncoder != null) {
-            if (outputCharsetEncoder.canEncode(c)) {
-              sb.append(c);
-            } else {
-              // Unicode-escape the character.
-              appendHexJavaScriptRepresentation(sb, c);
-            }
-          } else {
-            // No charsetEncoder provided - pass straight latin characters
-            // through, and escape the rest.  Doing the explicit character
-            // check is measurably faster than using the CharsetEncoder.
-            if (c > 0x1f && c <= 0x7f) {
-              sb.append(c);
-            } else {
-              // Other characters can be misinterpreted by some js parsers,
-              // or perhaps mangled by proxies along the way,
-              // so we play it safe and unicode escape them.
-              appendHexJavaScriptRepresentation(sb, c);
-            }
-          }
-      }
-    }
-    sb.append(quote);
-    return sb.toString();
-  }
