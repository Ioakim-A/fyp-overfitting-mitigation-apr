diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/67ec0da2-ee75-404b-a3de-63ccb6611b5c_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e699ac03-e112-4227-9b97-4b5ba25d47a8_fixed.java
index a0eee42..9c534ac 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/67ec0da2-ee75-404b-a3de-63ccb6611b5c_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e699ac03-e112-4227-9b97-4b5ba25d47a8_fixed.java
@@ -1,25 +1,14 @@
 private void getNumUseInUseCfgNode(final Node cfgNode) {
-
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
-
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
       if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          !(parent.isAssign() && parent.getFirstChild() == n)) {
           numUsesWithinCfgNode++;
       }
     }
-
   };
-
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
