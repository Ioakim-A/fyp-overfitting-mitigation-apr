diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/347b09ee-6dd1-4c30-9ea1-cc28511f21b5_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/dd1dda36-1987-4a06-a755-104fb4f88e52_fixed.java
index 86c65ca..05d407f 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/347b09ee-6dd1-4c30-9ea1-cc28511f21b5_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/dd1dda36-1987-4a06-a755-104fb4f88e52_fixed.java
@@ -1,95 +1,70 @@
 private static void modify(Calendar val, int field, boolean round) {
     if (val.get(Calendar.YEAR) > 280000000) {
         throw new ArithmeticException("Calendar value too large for accurate calculations");
     }
-        
-
-        // ----------------- Fix for LANG-59 ---------------------- START ---------------
-        // see http://issues.apache.org/jira/browse/LANG-59
-        //
-        // Manually truncate milliseconds, seconds and minutes, rather than using
-        // Calendar methods.
-
-
-        // truncate milliseconds
-
-        // truncate seconds
-
-        // truncate minutes
-
-        // reset time
-        // ----------------- Fix for LANG-59 ----------------------- END ----------------
-
     boolean roundUp = false;
-        for (int i = 0; i < fields.length; i++) {
-            for (int j = 0; j < fields[i].length; j++) {
-                if (fields[i][j] == field) {
-                    //This is our field... we stop looping
+    int[][] fields = {
+        {Calendar.MILLISECOND},
+        {Calendar.SECOND},
+        {Calendar.MINUTE},
+        {Calendar.HOUR_OF_DAY, Calendar.HOUR},
+        {Calendar.DATE, Calendar.DAY_OF_MONTH, Calendar.AM_PM},
+        {Calendar.MONTH},
+        {Calendar.YEAR},
+        {Calendar.ERA}
+    };
+    for (int[] fieldArr : fields) {
+        for (int f : fieldArr) {
+            if (f == field) {
                 if (round && roundUp) {
+                    if (field == Calendar.WEEK_OF_YEAR || field == Calendar.WEEK_OF_MONTH) {
+                        throw new IllegalArgumentException("The field " + field + " does not support rounding");
+                    }
                     if (field == DateUtils.SEMI_MONTH) {
-                            //This is a special case that's hard to generalize
-                            //If the date is 1, we round up to 16, otherwise
-                            //  we subtract 15 days and add 1 month
                         if (val.get(Calendar.DATE) == 1) {
                             val.add(Calendar.DATE, 15);
                         } else {
                             val.add(Calendar.DATE, -15);
                             val.add(Calendar.MONTH, 1);
                         }
                     } else {
-                            //We need at add one to this field since the
-                            //  last number causes us to round up
-                            val.add(fields[i][0], 1);
+                        val.add(fieldArr[0], 1);
                     }
                 }
                 return;
             }
         }
-            //We have various fields that are not easy roundings
         int offset = 0;
         boolean offsetSet = false;
-            //These are special types of fields that require different rounding rules
         switch (field) {
             case DateUtils.SEMI_MONTH:
-                    if (fields[i][0] == Calendar.DATE) {
-                        //If we're going to drop the DATE field's value,
-                        //  we want to do this our own way.
-                        //We need to subtrace 1 since the date has a minimum of 1
+                if (fieldArr[0] == Calendar.DATE) {
                     offset = val.get(Calendar.DATE) - 1;
-                        //If we're above 15 days adjustment, that means we're in the
-                        //  bottom half of the month and should stay accordingly.
                     if (offset >= 15) {
                         offset -= 15;
                     }
-                        //Record whether we're in the top or bottom half of that range
                     roundUp = offset > 7;
                     offsetSet = true;
                 }
                 break;
             case Calendar.AM_PM:
-                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {
-                        //If we're going to drop the HOUR field's value,
-                        //  we want to do this our own way.
+                if (fieldArr[0] == Calendar.HOUR_OF_DAY) {
                     offset = val.get(Calendar.HOUR_OF_DAY);
                     if (offset >= 12) {
                         offset -= 12;
                     }
                     roundUp = offset > 6;
                     offsetSet = true;
                 }
                 break;
         }
         if (!offsetSet) {
-                int min = val.getActualMinimum(fields[i][0]);
-                int max = val.getActualMaximum(fields[i][0]);
-                //Calculate the offset from the minimum allowed value
-                offset = val.get(fields[i][0]) - min;
-                //Set roundUp if this is more than half way between the minimum and maximum
+            int min = val.getActualMinimum(fieldArr[0]);
+            int max = val.getActualMaximum(fieldArr[0]);
+            offset = val.get(fieldArr[0]) - min;
             roundUp = offset > ((max - min) / 2);
         }
-            //We need to remove this field
-                val.set(fields[i][0], val.get(fields[i][0]) - offset);
+        val.set(fieldArr[0], val.get(fieldArr[0]) - offset);
     }
     throw new IllegalArgumentException("The field " + field + " is not supported");
-
 }
\ No newline at end of file
