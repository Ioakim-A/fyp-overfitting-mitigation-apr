diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/518ce8e1-60cd-4540-9d69-30bf210bbfd0_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/39901c3a-a840-44be-9dd2-d8982335f20f_fixed.java
index 1bec4d6..2098381 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/518ce8e1-60cd-4540-9d69-30bf210bbfd0_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/39901c3a-a840-44be-9dd2-d8982335f20f_fixed.java
@@ -1,14 +1,10 @@
-    private JavaType _mapType(Class<?> rawClass)
-    {
-        // 28-May-2015, tatu: Properties are special, as per [databind#810]
-        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);
-        // ok to have no types ("raw")
-        if (typeParams == null) {
-            return MapType.construct(rawClass, _unknownType(), _unknownType());
-        }
-        // but exactly 2 types if any found
-        if (typeParams.length != 2) {
+    JavaType superClass = _constructType(rawClass.getGenericSuperclass());
+    if (!(superClass instanceof ParameterizedType)) {
         throw new IllegalArgumentException("Strange Map type " + rawClass.getName() + ": can not determine type parameters");
     }
-        return MapType.construct(rawClass, typeParams[0], typeParams[1]);
+    ParameterizedType parameterizedType = (ParameterizedType) superClass;
+    Type[] typeArgs = parameterizedType.getActualTypeArguments();
+    if (typeArgs.length != 2) {
+        throw new IllegalArgumentException("Strange Map type " + rawClass.getName() + ": can not determine type parameters");
     }
+    return MapType.construct(rawClass, _constructType(typeArgs[0]), _constructType(typeArgs[1]));
\ No newline at end of file
