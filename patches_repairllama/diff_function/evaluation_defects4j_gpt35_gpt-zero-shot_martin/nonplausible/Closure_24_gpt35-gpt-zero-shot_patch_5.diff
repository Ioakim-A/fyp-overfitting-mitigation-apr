diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/01435945-b4e1-4a23-bffb-3824e908ee0e_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/673d3112-2ad3-4429-9983-46d9152cad8d_fixed.java
index 602226b..4e9df03 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/01435945-b4e1-4a23-bffb-3824e908ee0e_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/673d3112-2ad3-4429-9983-46d9152cad8d_fixed.java
@@ -1,26 +1,22 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
     int type = n.getType();
     Node parent = n.getParent();
+
+    // Fix: Uncomment the if condition
     if (parent.isVar()) {
       if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
         String name = n.getString();
         Var aliasVar = scope.getVar(name);
         aliases.put(name, aliasVar);
-
         String qualifiedName =
             aliasVar.getInitialValue().getQualifiedName();
         transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
       } else {
-          // TODO(robbyw): Support using locals for private variables.
         report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
       }
     }
   }
 }
\ No newline at end of file
