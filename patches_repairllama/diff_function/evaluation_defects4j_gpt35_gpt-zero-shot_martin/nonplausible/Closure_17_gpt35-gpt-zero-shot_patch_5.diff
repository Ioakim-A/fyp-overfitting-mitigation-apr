diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/65c376d9-762e-4ebc-a6bc-70b82b2dac5c_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a5c93232-32d4-424b-baba-a5878a15f407_fixed.java
index 4e0c7f9..e78ecd9 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/65c376d9-762e-4ebc-a6bc-70b82b2dac5c_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a5c93232-32d4-424b-baba-a5878a15f407_fixed.java
@@ -1,51 +1,13 @@
-    private JSType getDeclaredType(String sourceName, JSDocInfo info,
-        Node lValue, @Nullable Node rValue) {
-      if (info != null && info.hasType()) {
-        return getDeclaredTypeInAnnotation(sourceName, lValue, info);
-      } else if (rValue != null && rValue.isFunction() &&
-          shouldUseFunctionLiteralType(
-              JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
-        return rValue.getJSType();
-      } else if (info != null) {
-        if (info.hasEnumParameterType()) {
-          if (rValue != null && rValue.isObjectLit()) {
-            return rValue.getJSType();
-          } else {
-            return createEnumTypeFromNodes(
-                rValue, lValue.getQualifiedName(), info, lValue);
-          }
-        } else if (info.isConstructor() || info.isInterface()) {
-          return createFunctionTypeFromNodes(
-              rValue, lValue.getQualifiedName(), info, lValue);
-        } else {
-          // Check if this is constant, and if it has a known type.
-          if (info.isConstant()) {
-            JSType knownType = null;
-            if (rValue != null) {
 if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
-                // If rValue has a type-cast, we use the type in the type-cast.
-                // If rValue's type was already computed during scope creation,
-                // then we can safely use that.
     return rValue.getJSType();
-              } else if (rValue.isOr()) {
-                // Check for a very specific JS idiom:
-                // var x = x || TYPE;
-                // This is used by Closure's base namespace for esoteric
-                // reasons.
+} else if (rValue != null && rValue.isOr()) {
     Node firstClause = rValue.getFirstChild();
     Node secondClause = firstClause.getNext();
     boolean namesMatch = firstClause.isName()
         && lValue.isName()
         && firstClause.getString().equals(lValue.getString());
     if (namesMatch && secondClause.getJSType() != null
         && !secondClause.getJSType().isUnknownType()) {
         return secondClause.getJSType();
     }
 }
\ No newline at end of file
-            }
-          }
-        }
-      }
-
-      return getDeclaredTypeInAnnotation(sourceName, lValue, info);
-    }
