diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/976ac076-e752-48c7-a34a-8d6a49cf0768_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0d7ae212-8949-4fba-a9bc-b961fe0d09ee_fixed.java
index 370507c..3289a52 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/976ac076-e752-48c7-a34a-8d6a49cf0768_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0d7ae212-8949-4fba-a9bc-b961fe0d09ee_fixed.java
@@ -1,26 +1,15 @@
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
-
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
         if (!hasProperty(prop)) {
           typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
               .getLeastSupertype(propType);
         }
         defineInferredProperty(prop, typeToInfer, null);
       }
     }
   }
 }
\ No newline at end of file
