diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/cccff55c-7c21-4003-8ce0-8e3b76618868_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/95409cf5-1589-4eb1-b245-ebe90a6450d3_fixed.java
index 4dddba6..8f9f6b8 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/cccff55c-7c21-4003-8ce0-8e3b76618868_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/95409cf5-1589-4eb1-b245-ebe90a6450d3_fixed.java
@@ -1,65 +1,43 @@
 public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
-
     if (n.getType() == Token.FUNCTION) {
-      // Don't traverse functions that are constructors or have the @this
-      // or @override annotation.
         JSDocInfo jsDoc = getFunctionJsDocInfo(n);
         if (jsDoc != null &&
                 (jsDoc.isConstructor() ||
                         jsDoc.isInterface() ||
                         jsDoc.hasThisType() ||
                         jsDoc.isOverride())) {
             return false;
         }
-
-      // Don't traverse functions unless they would normally
-      // be able to have a @this annotation associated with them. e.g.,
-      // var a = function() { }; // or
-      // function a() {} // or
-      // a.x = function() {}; // or
-      // var a = {x: function() {}};
         int pType = parent.getType();
         if (!(pType == Token.BLOCK ||
                 pType == Token.SCRIPT ||
                 pType == Token.NAME ||
                 pType == Token.ASSIGN ||
-
-            // object literal keys
                 pType == Token.STRING ||
                 pType == Token.NUMBER)) {
             return false;
         }
-
-      // Don't traverse functions that are getting lent to a prototype.
     }
-
     if (parent != null && parent.getType() == Token.ASSIGN) {
         Node lhs = parent.getFirstChild();
         Node rhs = lhs.getNext();
-
         if (n == lhs) {
-        // Always traverse the left side of the assignment. To handle
-        // nested assignments properly (e.g., (a = this).property = c;),
-        // assignLhsChild should not be overridden.
             if (assignLhsChild == null) {
                 assignLhsChild = lhs;
             }
         } else {
-        // Only traverse the right side if it's not an assignment to a prototype
-        // property or subproperty.
             if (NodeUtil.isGet(lhs)) {
                 if (lhs.getType() == Token.GETPROP &&
                         lhs.getLastChild().getString().equals("prototype")) {
                     return false;
                 }
                 Node llhs = lhs.getFirstChild();
                 if (llhs.getType() == Token.GETPROP &&
                         llhs.getLastChild().getString().equals("prototype")) {
                     return false;
                 }
             }
         }
     }
-
     return true;
 }
\ No newline at end of file
