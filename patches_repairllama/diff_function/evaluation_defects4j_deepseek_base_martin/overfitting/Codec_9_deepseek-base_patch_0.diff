diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/263b444b-dc23-451c-87e1-a27f3e4ab973_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/00d72184-e6cd-4985-a3ff-838def26a054_fixed.java
index 51ebfca..1b58606 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/263b444b-dc23-451c-87e1-a27f3e4ab973_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/00d72184-e6cd-4985-a3ff-838def26a054_fixed.java
@@ -1,32 +1,30 @@
     /**
      * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.
      * 
      * @param binaryData
      *            Array containing binary data to encode.
      * @param isChunked
      *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks
      * @param urlSafe
      *            if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.
      * @param maxResultSize
      *            The maximum result size to accept.
      * @return Base64-encoded data.
      * @throws IllegalArgumentException
      *             Thrown when the input array needs an output array bigger than maxResultSize
      * @since 1.4
      */
     public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {
         if (binaryData == null || binaryData.length == 0) {
             return binaryData;
         }
-
-        long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
+        int len = isChunked ? ((binaryData.length + 2) / 3) * 4 : binaryData.length * 4 / 3;
         if (len > maxResultSize) {
             throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
         }
-                
         Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);
         return b64.encode(binaryData);
     }
