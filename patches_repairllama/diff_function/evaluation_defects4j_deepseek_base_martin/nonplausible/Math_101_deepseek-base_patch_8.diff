diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4927ae8b-674f-4bdc-95bf-ba2ddea65b5a_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/5c6b53f0-9de7-4107-8c95-13c83f9f8400_fixed.java
index 4479e0e..3a74f3d 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4927ae8b-674f-4bdc-95bf-ba2ddea65b5a_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/5c6b53f0-9de7-4107-8c95-13c83f9f8400_fixed.java
@@ -1,77 +1,70 @@
     /**
      * Parses a string to produce a {@link Complex} object.
      *
      * @param source the string to parse
      * @param pos input/ouput parsing parameter.
      * @return the parsed {@link Complex} object.
      */
     public Complex parse(String source, ParsePosition pos) {
         int initialIndex = pos.getIndex();
-
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
-
         // parse real
         Number re = parseNumber(source, getRealFormat(), pos);
         if (re == null) {
             // invalid real number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
-
         // parse sign
         int startIndex = pos.getIndex();
         char c = parseNextCharacter(source, pos);
         int sign = 0;
         switch (c) {
         case 0 :
             // no sign
             // return real only complex number
             return new Complex(re.doubleValue(), 0.0);
         case '-' :
             sign = -1;
             break;
         case '+' :
             sign = 1;
             break;
         default :
             // invalid sign
             // set index back to initial, error index should be the last
             // character examined.
             pos.setIndex(initialIndex);
             pos.setErrorIndex(startIndex);
             return null;
         }
-
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
-
         // parse imaginary
         Number im = parseNumber(source, getRealFormat(), pos);
         if (im == null) {
             // invalid imaginary number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
-
         // parse imaginary character
         int n = getImaginaryCharacter().length();
         startIndex = pos.getIndex();
         int endIndex = startIndex + n;
-        if (
+        if (endIndex <= source.length() && 
             source.substring(startIndex, endIndex).compareTo(
             getImaginaryCharacter()) != 0) {
             // set index back to initial, error index should be the start index
             // character examined.
             pos.setIndex(initialIndex);
             pos.setErrorIndex(startIndex);
             return null;
         }
         pos.setIndex(endIndex);
-
         return new Complex(re.doubleValue(), im.doubleValue() * sign);
     }
