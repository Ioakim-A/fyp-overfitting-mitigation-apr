diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a810e19b-2318-4aa5-9f59-3c83d1a358ca_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1e732d32-e031-4cfd-93a8-f2bbcbebb154_fixed.java
index d57736b..f2f9909 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a810e19b-2318-4aa5-9f59-3c83d1a358ca_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1e732d32-e031-4cfd-93a8-f2bbcbebb154_fixed.java
@@ -1,39 +1,40 @@
   /**
    * Suppose X is an object with inferred properties.
    * Suppose also that X is used in a way where it would only type-check
    * correctly if some of those properties are widened.
    * Then we should be polite and automatically widen X's properties for him.
    *
    * For a concrete example, consider:
    * param x {{prop: (number|undefined)}}
    * function f(x) {}
    * f({});
    *
    * If we give the anonymous object an inferred property of (number|undefined),
    * then this code will type-check appropriately.
    */
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
-
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
-    if (constraintObj != null && constraintObj.isRecordType()) {
-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
-      if (objType != null) {
-        for (String prop : constraintObj.getOwnPropertyNames()) {
-          JSType propType = constraintObj.getPropertyType(prop);
-          if (!objType.isPropertyTypeDeclared(prop)) {
-            JSType typeToInfer = propType;
-            if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+    if (constraintObj == null) {
+      return;
     }
-            objType.defineInferredProperty(prop, typeToInfer, null);
+    ObjectType typeObj = ObjectType.cast(type.restrictByNotNullOrUndefined());
+    if (typeObj == null) {
+      return;
     }
+    for (String propName : constraintObj.getOwnPropertyNames()) {
+      JSType propType = typeObj.getOwnPropertyType(propName);
+      if (propType != null) {
+        continue;
       }
+      JSType constraintPropType = constraintObj.getOwnPropertyType(propName);
+      if (constraintPropType == null) {
+        continue;
       }
+      typeObj.putOwnProperty(propName, constraintPropType);
     }
   }
