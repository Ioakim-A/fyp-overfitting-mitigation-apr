diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/be90855b-3b13-4ab3-bf49-a35c750f54cf_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6d7b7a0c-c395-4efa-8b88-57e97be875fc_fixed.java
index 9d69396..a69428f 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/be90855b-3b13-4ab3-bf49-a35c750f54cf_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6d7b7a0c-c395-4efa-8b88-57e97be875fc_fixed.java
@@ -1,46 +1,38 @@
     /**
      * Wikipedia <a href="http://en.wikipedia.org/wiki/Tar_(file_format)#File_header">says</a>:
      * <blockquote>
      * The checksum is calculated by taking the sum of the unsigned byte values
      * of the header block with the eight checksum bytes taken to be ascii
      * spaces (decimal value 32). It is stored as a six digit octal number with
      * leading zeroes followed by a NUL and then a space. Various
      * implementations do not adhere to this format. For better compatibility,
      * ignore leading and trailing whitespace, and get the first six digits. In
      * addition, some historic tar implementations treated bytes as signed.
      * Implementations typically calculate the checksum both ways, and treat it
      * as good if either the signed or unsigned sum matches the included
      * checksum.
      * </blockquote>
      * <p>
      * The return value of this method should be treated as a best-effort
      * heuristic rather than an absolute and final truth. The checksum
      * verification logic may well evolve over time as more special cases
      * are encountered.
      *
      * @param header tar header
      * @return whether the checksum is reasonably good
      * @see <a href="https://issues.apache.org/jira/browse/COMPRESS-191">COMPRESS-191</a>
      * @since 1.5
      */
     public static boolean verifyCheckSum(byte[] header) {
-        long storedSum = 0;
-        long unsignedSum = 0;
-        long signedSum = 0;
-
-        int digits = 0;
-        for (int i = 0; i < header.length; i++) {
-            byte b = header[i];
-            if (CHKSUM_OFFSET  <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
-                if ('0' <= b && b <= '7' && digits++ < 6) {
-                    storedSum = storedSum * 8 + b - '0';
-                } else if (digits > 0) {
-                    digits = 6;
-                }
+        int storedSum = 0;
+        int unsignedSum = 0;
+        int signedSum = 0;
+        for (byte b : header) {
+            if (b == ' ') {
                 b = ' ';
             }
             unsignedSum += 0xff & b;
             signedSum += b;
         }
         return storedSum == unsignedSum || storedSum == signedSum;
     }
