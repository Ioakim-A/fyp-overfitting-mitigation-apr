diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2aa7151a-1933-4751-8ae1-cc861621ac57_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0c8f1693-e318-4b27-94d9-ccf54a0c7a15_fixed.java
index 88647d1..ca01fc6 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2aa7151a-1933-4751-8ae1-cc861621ac57_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0c8f1693-e318-4b27-94d9-ccf54a0c7a15_fixed.java
@@ -1,44 +1,36 @@
     /**
      * Find a zero in the given interval.
      * <p>
      * Requires that the values of the function at the endpoints have opposite
      * signs. An <code>IllegalArgumentException</code> is thrown if this is not
      * the case.</p>
      * 
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating the
      * function 
      * @throws IllegalArgumentException if min is not less than max or the
      * signs of the values of the function at the endpoints are not opposites
      */
     public double solve(double min, double max) throws MaxIterationsExceededException, 
         FunctionEvaluationException {
-        
         clearResult();
         verifyInterval(min, max);
-        
         double ret = Double.NaN;
-        
         double yMin = f.value(min);
         double yMax = f.value(max);
-        
         // Verify bracketing
         double sign = yMin * yMax;
-        if (sign >= 0) {
-            // check if either value is close to a zero
-                // neither value is close to zero and min and max do not bracket root.
-                throw new IllegalArgumentException
-                ("Function values at endpoints do not have different signs." +
-                        "  Endpoints: [" + min + "," + max + "]" + 
-                        "  Values: [" + yMin + "," + yMax + "]");
-        } else {
-            // solve using only the first endpoint as initial guess
-            ret = solve(min, yMin, max, yMax, min, yMin);
-            // either min or max is a root
+        if (sign > 0.0) {
+            throw new IllegalArgumentException("Function must have opposite signs at endpoints");
+        }
+        if (yMin == 0.0) {
+            return min;
+        }
+        if (yMax == 0.0) {
+            return max;
         }
-
         return ret;
     }
