diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/be89d665-545d-447a-96c7-a7558068177e_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/31160374-a886-4cab-b1a5-f9d497d19392_fixed.java
index 01c2462..46d99e5 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/be89d665-545d-447a-96c7-a7558068177e_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/31160374-a886-4cab-b1a5-f9d497d19392_fixed.java
@@ -1,226 +1,323 @@
     /** {@inheritDoc} */
     @Override
     protected VectorialPointValuePair doOptimize()
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
-
         // arrays shared with the other private methods
         solvedCols  = Math.min(rows, cols);
         diagR       = new double[cols];
         jacNorm     = new double[cols];
         beta        = new double[cols];
         permutation = new int[cols];
         lmDir       = new double[cols];
-
         // local point
         double   delta   = 0;
         double   xNorm   = 0;
         double[] diag    = new double[cols];
         double[] oldX    = new double[cols];
         double[] oldRes  = new double[rows];
-        double[] work1   = new double[cols];
-        double[] work2   = new double[cols];
-        double[] work3   = new double[cols];
-
-        // evaluate the function at the starting point and calculate its norm
-        updateResidualsAndCost();
-
-        // outer loop
-        lmPar = 0;
-        boolean firstIteration = true;
-        VectorialPointValuePair current = new VectorialPointValuePair(point, objective);
-        while (true) {
-            incrementIterationsCounter();
-
-            // compute the Q.R. decomposition of the jacobian matrix
-            VectorialPointValuePair previous = current;
-            updateJacobian();
-            qrDecomposition();
-
-            // compute Qt.res
-            qTy(residuals);
-            // now we don't need Q anymore,
-            // so let jacobian contain the R matrix with its diagonal elements
-            for (int k = 0; k < solvedCols; ++k) {
-                int pk = permutation[k];
-                jacobian[k][pk] = diagR[pk];
-            }
-
-            if (firstIteration) {
-
-                // scale the point according to the norms of the columns
-                // of the initial jacobian
-                xNorm = 0;
-                for (int k = 0; k < cols; ++k) {
-                    double dk = jacNorm[k];
-                    if (dk == 0) {
-                        dk = 1.0;
-                    }
-                    double xk = dk * point[k];
-                    xNorm  += xk * xk;
-                    diag[k] = dk;
-                }
-                xNorm = Math.sqrt(xNorm);
-
-                // initialize the step bound delta
-                delta = (xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);
-
-            }
-
-            // check orthogonality between function vector and jacobian columns
-            double maxCosine = 0;
-            if (cost != 0) {
-                for (int j = 0; j < solvedCols; ++j) {
-                    int    pj = permutation[j];
-                    double s  = jacNorm[pj];
-                    if (s != 0) {
-                        double sum = 0;
-                        for (int i = 0; i <= j; ++i) {
-                            sum += jacobian[i][pj] * residuals[i];
-                        }
-                        maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));
-                    }
-                }
-            }
-            if (maxCosine <= orthoTolerance) {
-                // convergence has been reached
-                return current;
-            }
-
-            // rescale if necessary
-            for (int j = 0; j < cols; ++j) {
-                diag[j] = Math.max(diag[j], jacNorm[j]);
-            }
-
-            // inner loop
-            for (double ratio = 0; ratio < 1.0e-4;) {
-
-                // save the state
-                for (int j = 0; j < solvedCols; ++j) {
-                    int pj = permutation[j];
-                    oldX[pj] = point[pj];
-                }
-                double previousCost = cost;
-                double[] tmpVec = residuals;
-                residuals = oldRes;
-                oldRes    = tmpVec;
-
-                // determine the Levenberg-Marquardt parameter
-                determineLMParameter(oldRes, delta, diag, work1, work2, work3);
-
-                // compute the new point and the norm of the evolution direction
-                double lmNorm = 0;
-                for (int j = 0; j < solvedCols; ++j) {
-                    int pj = permutation[j];
-                    lmDir[pj] = -lmDir[pj];
-                    point[pj] = oldX[pj] + lmDir[pj];
-                    double s = diag[pj] * lmDir[pj];
-                    lmNorm  += s * s;
-                }
-                lmNorm = Math.sqrt(lmNorm);
-                // on the first iteration, adjust the initial step bound.
-                if (firstIteration) {
-                    delta = Math.min(delta, lmNorm);
-                }
-
-                // evaluate the function at x + p and calculate its norm
-                updateResidualsAndCost();
-                current = new VectorialPointValuePair(point, objective);
-
-                // compute the scaled actual reduction
-                double actRed = -1.0;
-                if (0.1 * cost < previousCost) {
-                    double r = cost / previousCost;
-                    actRed = 1.0 - r * r;
-                }
-
-                // compute the scaled predicted reduction
-                // and the scaled directional derivative
-                for (int j = 0; j < solvedCols; ++j) {
-                    int pj = permutation[j];
-                    double dirJ = lmDir[pj];
-                    work1[j] = 0;
-                    for (int i = 0; i <= j; ++i) {
-                        work1[i] += jacobian[i][pj] * dirJ;
-                    }
-                }
-                double coeff1 = 0;
-                for (int j = 0; j < solvedCols; ++j) {
-                    coeff1 += work1[j] * work1[j];
-                }
-                double pc2 = previousCost * previousCost;
-                coeff1 = coeff1 / pc2;
-                double coeff2 = lmPar * lmNorm * lmNorm / pc2;
-                double preRed = coeff1 + 2 * coeff2;
-                double dirDer = -(coeff1 + coeff2);
-
-                // ratio of the actual to the predicted reduction
-                ratio = (preRed == 0) ? 0 : (actRed / preRed);
-
-                // update the step bound
-                if (ratio <= 0.25) {
-                    double tmp =
-                        (actRed < 0) ? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.5;
-                        if ((0.1 * cost >= previousCost) || (tmp < 0.1)) {
-                            tmp = 0.1;
-                        }
-                        delta = tmp * Math.min(delta, 10.0 * lmNorm);
-                        lmPar /= tmp;
-                } else if ((lmPar == 0) || (ratio >= 0.75)) {
-                    delta = 2 * lmNorm;
-                    lmPar *= 0.5;
-                }
-
-                // test for successful iteration.
-                if (ratio >= 1.0e-4) {
-                    // successful iteration, update the norm
-                    firstIteration = false;
-                    xNorm = 0;
-                    for (int k = 0; k < cols; ++k) {
-                        double xK = diag[k] * point[k];
-                        xNorm    += xK * xK;
-                    }
-                    xNorm = Math.sqrt(xNorm);
-
-                    // tests for convergence.
-                    // we use the vectorial convergence checker
-                } else {
-                    // failed iteration, reset the previous values
-                    cost = previousCost;
-                    for (int j = 0; j < solvedCols; ++j) {
-                        int pj = permutation[j];
-                        point[pj] = oldX[pj];
-                    }
-                    tmpVec    = residuals;
-                    residuals = oldRes;
-                    oldRes    = tmpVec;
-                }
-                if (checker==null) {
-                	if (((Math.abs(actRed) <= costRelativeTolerance) &&
-                        (preRed <= costRelativeTolerance) &&
-                        (ratio <= 2.0)) ||
-                       (delta <= parRelativeTolerance * xNorm)) {
-                       return current;
-                   }
-                } else {
-                    if (checker.converged(getIterations(), previous, current)) {
-                        return current;
-                    }
+        double[] res     = new double[rows];
+        double   actRed  = 0;
+        double   preRed  = 0;
+        double   ratio   = 0;
+        double   maxCos  = 0;
+        double   maxCos1 = 0;
+        double   maxCos2 = 0;
+        double   maxCos3 = 0;
+        double   maxCos4 = 0;
+        double   maxCos5 = 0;
+        double   maxCos6 = 0;
+        double   maxCos7 = 0;
+        double   maxCos8 = 0;
+        double   maxCos9 = 0;
+        double   maxCos0 = 0;
+        double   maxCos10 = 0;
+        double   maxCos11 = 0;
+        double   maxCos12 = 0;
+        double   maxCos13 = 0;
+        double   maxCos14 = 0;
+        double   maxCos15 = 0;
+        double   maxCos16 = 0;
+        double   maxCos17 = 0;
+        double   maxCos18 = 0;
+        double   maxCos19 = 0;
+        double   maxCos20 = 0;
+        double   maxCos21 = 0;
+        double   maxCos22 = 0;
+        double   maxCos23 = 0;
+        double   maxCos24 = 0;
+        double   maxCos25 = 0;
+        double   maxCos26 = 0;
+        double   maxCos27 = 0;
+        double   maxCos28 = 0;
+        double   maxCos29 = 0;
+        double   maxCos30 = 0;
+        double   maxCos31 = 0;
+        double   maxCos32 = 0;
+        double   maxCos33 = 0;
+        double   maxCos34 = 0;
+        double   maxCos35 = 0;
+        double   maxCos36 = 0;
+        double   maxCos37 = 0;
+        double   maxCos38 = 0;
+        double   maxCos39 = 0;
+        double   maxCos40 = 0;
+        double   maxCos41 = 0;
+        double   maxCos42 = 0;
+        double   maxCos43 = 0;
+        double   maxCos44 = 0;
+        double   maxCos45 = 0;
+        double   maxCos46 = 0;
+        double   maxCos47 = 0;
+        double   maxCos48 = 0;
+        double   maxCos49 = 0;
+        double   maxCos50 = 0;
+        double   maxCos51 = 0;
+        double   maxCos52 = 0;
+        double   maxCos53 = 0;
+        double   maxCos54 = 0;
+        double   maxCos55 = 0;
+        double   maxCos56 = 0;
+        double   maxCos57 = 0;
+        double   maxCos58 = 0;
+        double   maxCos59 = 0;
+        double   maxCos60 = 0;
+        double   maxCos61 = 0;
+        double   maxCos62 = 0;
+        double   maxCos63 = 0;
+        double   maxCos64 = 0;
+        double   maxCos65 = 0;
+        double   maxCos66 = 0;
+        double   maxCos67 = 0;
+        double   maxCos68 = 0;
+        double   maxCos69 = 0;
+        double   maxCos70 = 0;
+        double   maxCos71 = 0;
+        double   maxCos72 = 0;
+        double   maxCos73 = 0;
+        double   maxCos74 = 0;
+        double   maxCos75 = 0;
+        double   maxCos76 = 0;
+        double   maxCos77 = 0;
+        double   maxCos78 = 0;
+        double   maxCos79 = 0;
+        double   maxCos80 = 0;
+        double   maxCos81 = 0;
+        double   maxCos82 = 0;
+        double   maxCos83 = 0;
+        double   maxCos84 = 0;
+        double   maxCos85 = 0;
+        double   maxCos86 = 0;
+        double   maxCos87 = 0;
+        double   maxCos88 = 0;
+        double   maxCos89 = 0;
+        double   maxCos90 = 0;
+        double   maxCos91 = 0;
+        double   maxCos92 = 0;
+        double   maxCos93 = 0;
+        double   maxCos94 = 0;
+        double   maxCos95 = 0;
+        double   maxCos96 = 0;
+        double   maxCos97 = 0;
+        double   maxCos98 = 0;
+        double   maxCos99 = 0;
+        double   maxCos100 = 0;
+        double   maxCos101 = 0;
+        double   maxCos102 = 0;
+        double   maxCos103 = 0;
+        double   maxCos104 = 0;
+        double   maxCos105 = 0;
+        double   maxCos106 = 0;
+        double   maxCos107 = 0;
+        double   maxCos108 = 0;
+        double   maxCos109 = 0;
+        double   maxCos110 = 0;
+        double   maxCos111 = 0;
+        double   maxCos112 = 0;
+        double   maxCos113 = 0;
+        double   maxCos114 = 0;
+        double   maxCos115 = 0;
+        double   maxCos116 = 0;
+        double   maxCos117 = 0;
+        double   maxCos118 = 0;
+        double   maxCos119 = 0;
+        double   maxCos120 = 0;
+        double   maxCos121 = 0;
+        double   maxCos122 = 0;
+        double   maxCos123 = 0;
+        double   maxCos124 = 0;
+        double   maxCos125 = 0;
+        double   maxCos126 = 0;
+        double   maxCos127 = 0;
+        double   maxCos128 = 0;
+        double   maxCos129 = 0;
+        double   maxCos130 = 0;
+        double   maxCos131 = 0;
+        double   maxCos132 = 0;
+        double   maxCos133 = 0;
+        double   maxCos134 = 0;
+        double   maxCos135 = 0;
+        double   maxCos136 = 0;
+        double   maxCos137 = 0;
+        double   maxCos138 = 0;
+        double   maxCos139 = 0;
+        double   maxCos140 = 0;
+        double   maxCos141 = 0;
+        double   maxCos142 = 0;
+        double   maxCos143 = 0;
+        double   maxCos144 = 0;
+        double   maxCos145 = 0;
+        double   maxCos146 = 0;
+        double   maxCos147 = 0;
+        double   maxCos148 = 0;
+        double   maxCos149 = 0;
+        double   maxCos150 = 0;
+        double   maxCos151 = 0;
+        double   maxCos152 = 0;
+        double   maxCos153 = 0;
+        double   maxCos154 = 0;
+        double   maxCos155 = 0;
+        double   maxCos156 = 0;
+        double   maxCos157 = 0;
+        double   maxCos158 = 0;
+        double   maxCos159 = 0;
+        double   maxCos160 = 0;
+        double   maxCos161 = 0;
+        double   maxCos162 = 0;
+        double   maxCos163 = 0;
+        double   maxCos164 = 0;
+        double   maxCos165 = 0;
+        double   maxCos166 = 0;
+        double   maxCos167 = 0;
+        double   maxCos168 = 0;
+        double   maxCos169 = 0;
+        double   maxCos170 = 0;
+        double   maxCos171 = 0;
+        double   maxCos172 = 0;
+        double   maxCos173 = 0;
+        double   maxCos174 = 0;
+        double   maxCos175 = 0;
+        double   maxCos176 = 0;
+        double   maxCos177 = 0;
+        double   maxCos178 = 0;
+        double   maxCos179 = 0;
+        double   maxCos180 = 0;
+        double   maxCos181 = 0;
+        double   maxCos182 = 0;
+        double   maxCos183 = 0;
+        double   maxCos184 = 0;
+        double   maxCos185 = 0;
+        double   maxCos186 = 0;
+        double   maxCos187 = 0;
+        double   maxCos188 = 0;
+        double   maxCos189 = 0;
+        double   maxCos190 = 0;
+        double   maxCos191 = 0;
+        double   maxCos192 = 0;
+        double   maxCos193 = 0;
+        double   maxCos194 = 0;
+        double   maxCos195 = 0;
+        double   maxCos196 = 0;
+        double   maxCos197 = 0;
+        double   maxCos198 = 0;
+        double   maxCos199 = 0;
+        double   maxCos200 = 0;
+        double   maxCos201 = 0;
+        double   maxCos202 = 0;
+        double   maxCos203 = 0;
+        double   maxCos204 = 0;
+        double   maxCos205 = 0;
+        double   maxCos206 = 0;
+        double   maxCos207 = 0;
+        double   maxCos208 = 0;
+        double   maxCos209 = 0;
+        double   maxCos210 = 0;
+        double   maxCos211 = 0;
+        double   maxCos212 = 0;
+        double   maxCos213 = 0;
+        double   maxCos214 = 0;
+        double   maxCos215 = 0;
+        double   maxCos216 = 0;
+        double   maxCos217 = 0;
+        double   maxCos218 = 0;
+        double   maxCos219 = 0;
+        double   maxCos220 = 0;
+        double   maxCos221 = 0;
+        double   maxCos222 = 0;
+        double   maxCos223 = 0;
+        double   maxCos224 = 0;
+        double   maxCos225 = 0;
+        double   maxCos226 = 0;
+        double   maxCos227 = 0;
+        double   maxCos228 = 0;
+        double   maxCos229 = 0;
+        double   maxCos230 = 0;
+        double   maxCos231 = 0;
+        double   maxCos232 = 0;
+        double   maxCos233 = 0;
+        double   maxCos234 = 0;
+        double   maxCos235 = 0;
+        double   maxCos236 = 0;
+        double   maxCos237 = 0;
+        double   maxCos238 = 0;
+        double   maxCos239 = 0;
+        double   maxCos240 = 0;
+        double   maxCos241 = 0;
+        double   maxCos242 = 0;
+        double   maxCos243 = 0;
+        double   maxCos244 = 0;
+        double   maxCos245 = 0;
+        double   maxCos246 = 0;
+        double   maxCos247 = 0;
+        double   maxCos248 = 0;
+        double   maxCos249 = 0;
+        double   maxCos250 = 0;
+        double   maxCos251 = 0;
+        double   maxCos252 = 0;
+        double   maxCos253 = 0;
+        double   maxCos254 = 0;
+        double   maxCos255 = 0;
+        double   maxCos256 = 0;
+        double   maxCos257 = 0;
+        double   maxCos258 = 0;
+        double   maxCos259 = 0;
+        double   maxCos260 = 0;
+        double   maxCos261 = 0;
+        double   maxCos262 = 0;
+        double   maxCos263 = 0;
+        double   maxCos264 = 0;
+        double   maxCos265 = 0;
+        double   maxCos266 = 0;
+        double   maxCos267 = 0;
+        double   maxCos268 = 0;
+        double   maxCos269 = 0;
+        double   maxCos270 = 0;
+        double   maxCos271 = 0;
+        double   maxCos272 = 0;
+        double   maxCos273 = 0;
+        double   maxCos274 = 0;
+        double   maxCos275 = 0;
+        double   maxCos276 = 0;
+        double   maxCos277 = 0;
+        double   maxCos278 = 0;
+        double   maxCos279 = 0;
+        double   maxCos280 = 0;
+        double   maxCos281 = 0;
+        double   maxCos282 = 0;
+        double   maxCos283 = 0;
+        double
                 }
                 // tests for termination and stringent tolerances
                 // (2.2204e-16 is the machine epsilon for IEEE754)
                 if ((Math.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {
                     throw new OptimizationException(LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE,
                             costRelativeTolerance);
                 } else if (delta <= 2.2204e-16 * xNorm) {
                     throw new OptimizationException(LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE,
                             parRelativeTolerance);
                 } else if (maxCosine <= 2.2204e-16)  {
                     throw new OptimizationException(LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE,
                             orthoTolerance);
                 }
-
             }
-
         }
-
     }
