diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/43eaa946-91dc-436c-858b-1cee6b6e916e_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4dbfb7d6-2827-4b80-8253-90cf303ad09b_fixed.java
index 3127f85..a00f5c1 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/43eaa946-91dc-436c-858b-1cee6b6e916e_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4dbfb7d6-2827-4b80-8253-90cf303ad09b_fixed.java
@@ -1,24 +1,16 @@
     /**
      * For this distribution, {@code X}, this method returns {@code P(X < x)}.
      * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
      * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
      *
      * @param x Value at which the CDF is evaluated.
      * @return CDF evaluated at {@code x}.
      * @throws MathException if the algorithm fails to converge
      */
     public double cumulativeProbability(double x) throws MathException {
         final double dev = x - mean;
-        try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
-        } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
-            } else {
-                throw ex;
-            }
+        if (Math.abs(dev) > 40 * stdDev) {
+            return (dev < 0) ? 0 : 1;
         }
+        return 0.5 * (1 + SpecialFunctions.erf(dev / (stdDev * Math.sqrt(2))));
     }
