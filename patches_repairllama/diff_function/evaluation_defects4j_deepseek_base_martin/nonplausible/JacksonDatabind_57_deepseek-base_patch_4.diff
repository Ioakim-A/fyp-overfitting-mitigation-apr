diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/06ef9358-048e-4e6a-b495-d48dcf2e4df3_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6d7416c2-14bd-4a47-a0ea-48f5b2a29163_fixed.java
index 08a41cf..6bc09ce 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/06ef9358-048e-4e6a-b495-d48dcf2e4df3_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6d7416c2-14bd-4a47-a0ea-48f5b2a29163_fixed.java
@@ -1,12 +1,390 @@
     /**
      * Overloaded version of {@link #readValue(InputStream)}.
      */
     public <T> MappingIterator<T> readValues(byte[] src, int offset, int length)
         throws IOException, JsonProcessingException
     {
         if (_dataFormatReaders != null) {
             return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false);
         }
-        return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src),
+        return _detectBindAndReadValues(null, false);
+    }
+
+    /**
+     * Overloaded version of {@link #readValues(byte[], int, int)}.
+     */
+    public <T> MappingIterator<T> readValues(byte[] src)
+        throws IOException, JsonProcessingException
+    {
+        if (_dataFormatReaders != null) {
+            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), false);
+        }
+        return _detectBindAndReadValues(null, false);
+    }
+
+    /**
+     * Overloaded version of {@link #readValuesAs(Class, byte[], int, int)}.
+     */
+    public <T> MappingIterator<T> readValuesAs(Class<T> type, byte[] src, int offset, int length)
+        throws IOException, JsonProcessingException
+    {
+        if (_dataFormatReaders != null) {
+            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), true);
+        }
+        return _detectBindAndReadValues(null, true);
+    }
+
+    /**
+     * Overloaded version of {@link #readValuesAs(Class, byte[])}.
+     */
+    public <T> MappingIterator<T> readValuesAs(Class<T> type, byte[] src)
+        throws IOException, JsonProcessingException
+    {
+        if (_dataFormatReaders != null) {
+            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), true);
+        }
+        return _detectBindAndReadValues(null, true);
+    }
+
+    /**
+     * Overloaded version of {@link #readValuesAs(Class, InputStream, int, int)}.
+     */
+    public <T> MappingIterator<T> readValuesAs(Class<T> type, InputStream src, int offset, int length)
+        throws IOException, JsonProcessingException
+    {
+        if (_dataFormatReaders != null) {
+            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), true);
+        }
+        return _detectBindAndReadValues(null, true);
+    }
+
+    /**
+     * Overloaded version of {@link #readValuesAs(Class, InputStream)}.
+     */
+    public <T> MappingIterator<T> readValuesAs(Class<T> type, InputStream src)
+        throws IOException, JsonProcessingException
+    {
+        if (_dataFormatReaders != null) {
+            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), true);
+        }
+        return _detectBindAndReadValues(null, true);
+    }
+
+    /**
+     * Overloaded version of {@link #readValuesAs(Class, Reader, int, int)}.
+     */
+    public <T> MappingIterator<T> readValuesAs(Class<T> type, Reader src, int offset, int length)
+        throws IOException, JsonProcessingException
+    {
+        if (_dataFormatReaders != null) {
+            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), true);
+        }
+        return _detectBindAndReadValues(null, true);
+    }
+
+    /**
+     * Overloaded version of {@link #readValuesAs(Class, Reader)}.
+     */
+    public <T> MappingIterator<T> readValuesAs(Class<T> type, Reader src)
+        throws IOException, JsonProcessingException
+    {
+        if (_dataFormatReaders != null) {
+            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), true);
+        }
+        return _detectBindAndReadValues(null, true);
+    }
+
+    /**
+     * Overloaded version of {@link #readValuesAs(Class, File, int, int)}.
+     */
+    public <T> MappingIterator<T> readValuesAs(Class<T> type, File src, int offset, int length)
+        throws IOException, JsonProcessingException
+    {
+        if (_dataFormatReaders != null) {
+            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), true);
+        }
+        return _detectBindAndReadValues(null, true);
+    }
+
+    /**
+     * Overloaded version of {@link #readValuesAs(Class, File)}.
+     */
+    public <T> MappingIterator<T> readValuesAs(Class<T> type, File src)
+        throws IOException, JsonProcessingException
+    {
+        if (_dataFormatReaders != null) {
+            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), true);
+        }
+        return _detectBindAndReadValues(null, true);
+    }
+
+    /**
+     * Overloaded version of {@link #readValuesAs(Class, String, int, int)}.
+     */
+    public <T> MappingIterator<T> readValuesAs(Class<T> type, String src, int offset, int length)
+        throws IOException, JsonProcessingException
+    {
+        if (_dataFormatReaders != null) {
+            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), true);
+        }
+        return _detectBindAndReadValues(null, true);
+    }
+
+    /**
+     * Overloaded version of {@link #readValuesAs(Class, String)}.
+     */
+    public <T> MappingIterator<T> readValuesAs(Class<T> type, String src)
+        throws IOException, JsonProcessingException
+    {
+        if (_dataFormatReaders != null) {
+            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), true);
+        }
+        return _detectBindAndReadValues(null, true);
+    }
+
+    /**
+     * Overloaded version of {@link #readValuesAs(Class, URL, int, int)}.
+     */
+    public <T> MappingIterator<T> readValuesAs(Class<T> type, URL src, int offset, int length)
+        throws IOException, JsonProcessingException
+    {
+        if (_dataFormatReaders != null) {
+            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), true);
+        }
+        return _detectBindAndReadValues(null, true);
+    }
+
+    /**
+     * Overloaded version of {@link #readValuesAs(Class, URL)}.
+     */
+    public <T> MappingIterator<T> readValuesAs(Class<T> type, URL src)
+        throws IOException, JsonProcessingException
+    {
+        if (_dataFormatReaders != null) {
+            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), true);
+        }
+        return _detectBindAndReadValues(null, true);
+    }
+
+    /**
+     * Overloaded version of {@link #readValuesAs(Class, URI, int, int)}.
+     */
+    public <T> MappingIterator<T> readValuesAs(Class<T> type, URI src, int offset, int length)
+        throws IOException, JsonProcessingException
+    {
+        if (_dataFormatReaders != null) {
+            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), true);
+        }
+        return _detectBindAndReadValues(null, true);
+    }
+
+    /**
+     * Overloaded version of {@link #readValuesAs(Class, URI)}.
+     */
+    public <T> MappingIterator<T> readValuesAs(Class<T> type, URI src)
+        throws IOException, JsonProcessingException
+    {
+        if (_dataFormatReaders != null) {
+            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), true);
+        }
+        return _detectBindAndReadValues(null, true);
+    }
+
+    /**
+     * Overloaded version of {@link #readValuesAs(Class, InputStream, int, int)}.
+     */
+    public <T> MappingIterator<T> readValuesAs(Class<T> type, InputStream src, int offset, int length)
+        throws IOException, JsonProcessingException
+    {
+        if (_dataFormatReaders != null) {
+            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), true);
+        }
+        return _detectBindAndReadValues(null, true);
+    }
+
+    /**
+     * Overloaded version of {@link #readValuesAs(Class, InputStream)}.
+     */
+    public <T> MappingIterator<T> readValuesAs(Class<T> type, InputStream src)
+        throws IOException, JsonProcessingException
+    {
+        if (_dataFormatReaders != null) {
+            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), true);
+        }
+        return _detectBindAndReadValues(null, true);
+    }
+
+    /**
+     * Overloaded version of {@link #readValuesAs(Class, Reader, int, int)}.
+     */
+    public <T> MappingIterator<T> readValuesAs(Class<T> type, Reader src, int offset, int length)
+        throws IOException, JsonProcessingException
+    {
+        if (_dataFormatReaders != null) {
+            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), true);
+        }
+        return _detectBindAndReadValues(null, true);
+    }
+
+    /**
+     * Overloaded version of {@link #readValuesAs(Class, Reader)}.
+     */
+    public <T> MappingIterator<T> readValuesAs(Class<T> type, Reader src)
+        throws IOException, JsonProcessingException
+    {
+        if (_dataFormatReaders != null) {
+            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), true);
+        }
+        return _detectBindAndReadValues(null, true);
+    }
+
+    /**
+     * Overloaded version of {@link #readValuesAs(Class, File, int, int)}.
+     */
+    public <T> MappingIterator<T> readValuesAs(Class<T> type, File src, int offset, int length)
+        throws IOException, JsonProcessingException
+    {
+        if (_dataFormatReaders != null) {
+            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), true);
+        }
+        return _detectBindAndReadValues(null, true);
+    }
+
+    /**
+     * Overloaded version of {@link #readValuesAs(Class, File)}.
+     */
+    public <T> MappingIterator<T> readValuesAs(Class<T> type, File src)
+        throws IOException, JsonProcessingException
+    {
+        if (_dataFormatReaders != null) {
+            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), true);
+        }
+        return _detectBindAndReadValues(null, true);
+    }
+
+    /**
+     * Overloaded version of {@link #readValuesAs(Class, String, int, int)}.
+     */
+    public <T> MappingIterator<T> readValuesAs(Class<T> type, String src, int offset, int length)
+        throws IOException, JsonProcessingException
+    {
+        if (_dataFormatReaders != null) {
+            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), true);
+        }
+        return _detectBindAndReadValues(null, true);
+    }
+
+    /**
+     * Overloaded version of {@link #readValuesAs(Class, String)}.
+     */
+    public <T> MappingIterator<T> readValuesAs(Class<T> type, String src)
+        throws IOException, JsonProcessingException
+    {
+        if (_dataFormatReaders != null) {
+            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), true);
+        }
+        return _detectBindAndReadValues(null, true);
+    }
+
+    /**
+     * Overloaded version of {@link #readValuesAs(Class, URL, int, int)}.
+     */
+    public <T> MappingIterator<T> readValuesAs(Class<T> type, URL src, int offset, int length)
+        throws IOException, JsonProcessingException
+    {
+        if (_dataFormatReaders != null) {
+            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), true);
+        }
+        return _detectBindAndReadValues(null, true);
+    }
+
+    /**
+     * Overloaded version of {@link #readValuesAs(Class, URL)}.
+     */
+    public <T> MappingIterator<T> readValuesAs(Class<T> type, URL src)
+        throws IOException, JsonProcessingException
+    {
+        if (_dataFormatReaders != null) {
+            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), true);
+        }
+        return _detectBindAndReadValues(null, true);
+    }
+
+    /**
+     * Overloaded version of {@link #readValuesAs(Class, URI, int, int)}.
+     */
+    public <T> MappingIterator<T> readValuesAs(Class<T> type, URI src, int offset, int length)
+        throws IOException, JsonProcessingException
+    {
+        if (_dataFormatReaders != null) {
+            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), true);
+        }
+        return _detectBindAndReadValues(null, true);
+    }
+
+    /**
+     * Overloaded version of {@link #readValuesAs(Class, URI)}.
+     */
+    public <T> MappingIterator<T> readValuesAs(Class<T> type, URI src)
+        throws IOException, JsonProcessingException
+    {
+        if (_dataFormatReaders != null) {
+            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), true);
+        }
+        return _detectBindAndReadValues(null, true);
+    }
+
+    /**
+     * Overloaded version of {@link #readValuesAs(Class, InputStream, int, int)}.
+     */
+    public <T> MappingIterator<T> readValuesAs(Class<T> type, InputStream src, int offset, int length)
+        throws IOException, JsonProcessingException
+    {
+        if (_dataFormatReaders != null) {
+            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), true);
+        }
+        return _detectBindAndReadValues(null, true);
+    }
+
+    /**
+     * Overloaded version of {@link #readValuesAs(Class, InputStream)}.
+     */
+    public <T> MappingIterator<T> readValuesAs(Class<T> type, InputStream src)
+        throws IOException, JsonProcessingException
+    {
+        if (_dataFormatReaders != null) {
+            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), true);
+        }
+        return _detectBindAndReadValues(null, true);
+    }
+
+    /**
+     * Overloaded version of {@link #readValuesAs(Class, Reader, int, int)}.
+     */
+    public <T> MappingIterator<T> readValuesAs(Class<T> type, Reader src, int offset, int length)
+        throws IOException, JsonProcessingException
+    {
+        if (_dataFormatReaders != null) {
+            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), true);
+        }
+        return _detectBindAndReadValues(null, true);
+    }
+
+    /**
+     * Overloaded version of {@link #readValuesAs(Class, Reader)}.
+     */
+    public <T> MappingIterator<T> readValuesAs(Class<T> type, Reader src)
+        throws IOException, JsonProcessingException
+    {
+        if (_dataFormatReaders != null) {
+            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), true);
+        }
+        return _detectBindAndReadValues(null, true);
+    }
+
+    /**
+     * Overloaded version of {@link #readValuesAs(Class, File, int, int)}.
+     */
+    public <T> MappingIterator<T> readValuesAs(Class<T> type, File src, int
                 true));
     }
