diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e4b80c7d-534c-4a83-b206-6b6a376be0ca_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d62e0063-a28d-4d97-8598-f60ac7dc6677_fixed.java
index 5f1dcf2..42cbefe 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e4b80c7d-534c-4a83-b206-6b6a376be0ca_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d62e0063-a28d-4d97-8598-f60ac7dc6677_fixed.java
@@ -1,41 +1,14 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
-
-        while (true) {
-
-            incrementIterationsCounter();
-
-            // save the original vertex
-            final RealPointValuePair[] original = simplex;
-            final RealPointValuePair best = original[0];
-
-            // perform a reflection step
-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
-            if (comparator.compare(reflected, best) < 0) {
-
-                // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
-                    simplex = reflectedSimplex;
+        if (comparator == null) {
+            throw new IllegalArgumentException("comparator must not be null");
         }
-
+        for (int i = 0; i < simplex.size(); i++) {
+            if (comparator.compare(simplex.get(i), simplex.get(index)) < 0) {
+                index = i;
                 return;
-
             }
-
-            // compute the contracted simplex
-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
-                return;
-            }
-
         }
-
     }
