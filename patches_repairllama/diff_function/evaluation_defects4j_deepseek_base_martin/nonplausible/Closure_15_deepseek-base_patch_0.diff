diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/745891ae-4b4a-4fc4-8a7a-3da9c03fa9e5_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/988c90f5-e7d0-4696-af1b-18bc59772498_fixed.java
index b56897c..c47f772 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/745891ae-4b4a-4fc4-8a7a-3da9c03fa9e5_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/988c90f5-e7d0-4696-af1b-18bc59772498_fixed.java
@@ -1,27 +1,26 @@
       @Override
       public boolean apply(Node n) {
         // When the node is null it means, we reached the implicit return
         // where the function returns (possibly without an return statement)
         if (n == null) {
           return false;
         }
-
         // TODO(user): We only care about calls to functions that
         // passes one of the dependent variable to a non-side-effect free
         // function.
         if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
           return true;
         }
-
         if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
           return true;
         }
-
-
+        if (n.isAssignment() && NodeUtil.assignmentHasSideEffects(n)) {
+          return true;
+        }
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
             return true;
           }
         }
         return false;
       }
