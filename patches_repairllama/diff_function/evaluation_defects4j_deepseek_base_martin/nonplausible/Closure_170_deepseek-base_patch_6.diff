diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c2343f1e-07ff-4c8c-9b0c-d5c64d911bec_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/52229e33-741e-43b1-96dd-ca83176bdd2e_fixed.java
index 5abdeb5..8096f2c 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c2343f1e-07ff-4c8c-9b0c-d5c64d911bec_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/52229e33-741e-43b1-96dd-ca83176bdd2e_fixed.java
@@ -1,29 +1,18 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
-
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
-
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          if (n == cfgNode) {
             numUsesWithinCfgNode++;
           }
+          super.visit(t, n, parent);
         }
-
       };
-
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
