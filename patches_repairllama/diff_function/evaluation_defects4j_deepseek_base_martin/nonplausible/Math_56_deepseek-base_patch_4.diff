diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e8031544-edf0-475f-b39f-38ed923486db_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b4950b35-85d9-46cc-b75c-9251cfcd5975_fixed.java
index 2608424..d015d13 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e8031544-edf0-475f-b39f-38ed923486db_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b4950b35-85d9-46cc-b75c-9251cfcd5975_fixed.java
@@ -1,39 +1,29 @@
     /**
      * Convert to multidimensional counter.
      *
      * @param index Index in unidimensional counter.
      * @return the multidimensional counts.
      * @throws OutOfRangeException if {@code index} is not between
      * {@code 0} and the value returned by {@link #getSize()} (excluded).
      */
     public int[] getCounts(int index) {
         if (index < 0 ||
             index >= totalSize) {
             throw new OutOfRangeException(index, 0, totalSize);
         }
-
         final int[] indices = new int[dimension];
-
         int count = 0;
         for (int i = 0; i < last; i++) {
             int idx = 0;
             final int offset = uniCounterOffset[i];
             while (count <= index) {
                 count += offset;
                 ++idx;
             }
             --idx;
             count -= offset;
             indices[i] = idx;
         }
-
-        int idx = 1;
-        while (count < index) {
-            count += idx;
-            ++idx;
-        }
-        --idx;
-        indices[last] = idx;
-
+        indices[last] = totalSize - 1 - count;
         return indices;
     }
