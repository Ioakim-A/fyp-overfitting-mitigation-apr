diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/386e3764-1e0a-4dee-a8d8-8f2bb189db0a_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/904ea5b3-32cc-4e1d-8894-0ddabdef54c5_fixed.java
index 466a88c..a5ebac1 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/386e3764-1e0a-4dee-a8d8-8f2bb189db0a_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/904ea5b3-32cc-4e1d-8894-0ddabdef54c5_fixed.java
@@ -1,169 +1,117 @@
     /** {@inheritDoc} */
     @Override
     protected UnivariatePointValuePair doOptimize() {
         final boolean isMinim = getGoalType() == GoalType.MINIMIZE;
         final double lo = getMin();
         final double mid = getStartValue();
         final double hi = getMax();
-
         // Optional additional convergence criteria.
         final ConvergenceChecker<UnivariatePointValuePair> checker
             = getConvergenceChecker();
-
         double a;
         double b;
         if (lo < hi) {
             a = lo;
             b = hi;
         } else {
             a = hi;
             b = lo;
         }
-
         double x = mid;
         double v = x;
         double w = x;
         double d = 0;
         double e = 0;
         double fx = computeObjectiveValue(x);
         if (!isMinim) {
             fx = -fx;
         }
         double fv = fx;
         double fw = fx;
-
         UnivariatePointValuePair previous = null;
         UnivariatePointValuePair current
             = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
         // Best point encountered so far (which is the initial guess).
-
+        UnivariatePointValuePair best
+            = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
         int iter = 0;
         while (true) {
-            final double m = 0.5 * (a + b);
-            final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
-            final double tol2 = 2 * tol1;
-
-            // Default stopping criterion.
-            final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
-            if (!stop) {
-                double p = 0;
-                double q = 0;
-                double r = 0;
-                double u = 0;
-
-                if (FastMath.abs(e) > tol1) { // Fit parabola.
-                    r = (x - w) * (fx - fv);
-                    q = (x - v) * (fx - fw);
-                    p = (x - v) * q - (x - w) * r;
-                    q = 2 * (q - r);
-
-                    if (q > 0) {
-                        p = -p;
-                    } else {
-                        q = -q;
-                    }
-
-                    r = e;
-                    e = d;
-
-                    if (p > q * (a - x) &&
-                        p < q * (b - x) &&
-                        FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
-                        // Parabolic interpolation step.
-                        d = p / q;
-                        u = x + d;
-
-                        // f must not be evaluated too close to a or b.
-                        if (u - a < tol2 || b - u < tol2) {
-                            if (x <= m) {
-                                d = tol1;
-                            } else {
-                                d = -tol1;
+            if (checker != null && checker.converged(previous, current)) {
+                return best;
             }
+            previous = current;
+            current = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
+            if (current.getValue() < best.getValue()) {
+                best = current;
             }
+            if (fx < fv || fx < fw) {
+                if (fx < fv) {
+                    b = v;
+                    v = w;
+                    w = x;
+                    fv = fw;
+                    fw = fx;
                 } else {
-                        // Golden section step.
-                        if (x < m) {
-                            e = b - x;
-                        } else {
-                            e = a - x;
+                    b = w;
+                    fv = fw;
+                    fw = fx;
                 }
-                        d = GOLDEN_SECTION * e;
-                    }
-                } else {
-                    // Golden section step.
-                    if (x < m) {
-                        e = b - x;
             } else {
-                        e = a - x;
+                a = v;
+                v = w;
+                w = x;
+                fv = fw;
+                fw = fx;
             }
-                    d = GOLDEN_SECTION * e;
+            if (Math.abs(w - v) > Math.abs(v - x)) {
+                d = (x - v) * (fx - fw) / (x - w);
+                e = (x - v) * (fx - fv) / (x - w);
+            } else {
+                d = (x - w) * (fx - fv) / (x - v);
+                e = (x - w) * (fx - fw) / (x - v);
             }
-
-                // Update by at least "tol1".
-                if (FastMath.abs(d) < tol1) {
+            if (Math.abs(d) >= Math.abs(e)) {
                 if (d >= 0) {
-                        u = x + tol1;
-                    } else {
-                        u = x - tol1;
-                    }
+                    a = x;
                 } else {
-                    u = x + d;
-                }
-
-                double fu = computeObjectiveValue(u);
-                if (!isMinim) {
-                    fu = -fu;
-                }
-
-                // User-defined convergence checker.
-                previous = current;
-                current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
-
-                if (checker != null) {
-                    if (checker.converged(iter, previous, current)) {
-                        return best(current, previous, isMinim);
-                    }
-                }
-
-                // Update a, b, v, w and x.
-                if (fu <= fx) {
-                    if (u < x) {
                     b = x;
+                }
+                v = w;
+                fv = fw;
+                e = d;
             } else {
+                if (e >= 0) {
                     a = x;
+                } else {
+                    b = x;
                 }
+                if (Math.abs(d) >= Math.abs(e)) {
                     v = w;
                     fv = fw;
+                } else {
+                    v = x;
+                    fv = fx;
+                }
                 w = x;
                 fw = fx;
-                    x = u;
-                    fx = fu;
-                } else {
-                    if (u < x) {
-                        a = u;
-                    } else {
-                        b = u;
             }
-                    if (fu <= fw ||
-                        Precision.equals(w, x)) {
-                        v = w;
-                        fv = fw;
-                        w = u;
-                        fw = fu;
-                    } else if (fu <= fv ||
-                               Precision.equals(v, x) ||
-                               Precision.equals(v, w)) {
-                        v = u;
-                        fv = fu;
+            x = (a + b) / 2;
+            fx = computeObjectiveValue(x);
+            if (!isMinim) {
+                fx = -fx;
             }
+            if (checker != null && checker.converged(previous, current)) {
+                return best;
             }
-            } else { // Default termination (Brent's criterion).
-                return
-                            best(current,
-                                 previous,
+            previous = current;
+            current = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
+            if (current.getValue() < best.getValue()) {
+                best = current;
+            }
+            if (iter >= getMaxEvaluations()) {
+                throw new MaxEvaluationsExceededException(iter,
                             isMinim);
             }
             ++iter;
         }
     }
