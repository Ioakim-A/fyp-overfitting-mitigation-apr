diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1694d524-ef0a-490d-9dc1-0aa3f835f56f_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/80f53f45-165a-4e94-8165-4b0fff4f252c_fixed.java
index 1c875ad..115dfe2 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1694d524-ef0a-490d-9dc1-0aa3f835f56f_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/80f53f45-165a-4e94-8165-4b0fff4f252c_fixed.java
@@ -1,31 +1,33 @@
     public void captureArgumentsFrom(Invocation invocation) {
         if (invocation.getMethod().isVarArgs()) {
             int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+            Object array = invocation.getRawArguments()[indexOfVararg];
+            for (int i = 0; i < Array.getLength(array); i++) {
+                ((CapturesArguments) matchers.get(indexOfVararg)).captureFrom(Array.get(array, i));
+            }
 
         } else {
             for (int position = 0; position < matchers.size(); position++) {
                 Matcher m = matchers.get(position);
                 if (m instanceof CapturesArguments) {
                     ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
                 }
             }
         }
-
 //        for (int position = 0; position < matchers.size(); position++) {
 //            Matcher m = matchers.get(position);
 //            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
 //                //TODO SF - this whole lot can be moved captureFrom implementation
 //                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
 //                    Object array = invocation.getRawArguments()[position];
 //                    for (int i = 0; i < Array.getLength(array); i++) {
 //                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
 //                    }
 //                    //since we've captured all varargs already, it does not make sense to process other matchers.
 //                    return;
 //                } else {
 //                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
 //                }
 //            }
 //        }
     }
