diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/bdf0f6b6-c631-4efc-8e40-4f5c3646bde6_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/3591cc48-ec34-404d-8b41-ee3ede8f9604_fixed.java
index 1c53d31..a84628a 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/bdf0f6b6-c631-4efc-8e40-4f5c3646bde6_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/3591cc48-ec34-404d-8b41-ee3ede8f9604_fixed.java
@@ -1,20 +1,23 @@
   @SuppressWarnings("unchecked") // Casts guarded by conditionals.
   static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
       TypeToken<?> fieldType, JsonAdapter annotation) {
     Class<?> value = annotation.value();
     TypeAdapter<?> typeAdapter;
     if (TypeAdapter.class.isAssignableFrom(value)) {
       Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
     } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
       Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
           .construct()
           .create(gson, fieldType);
     } else {
       throw new IllegalArgumentException(
           "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
     }
-      typeAdapter = typeAdapter.nullSafe();
+    if (!typeAdapter.getClass().isAssignableFrom(fieldType.getRawType())) {
+      throw new IllegalArgumentException(
+          "@JsonAdapter value type must be assignable from field type.");
+    }
     return typeAdapter;
   }
