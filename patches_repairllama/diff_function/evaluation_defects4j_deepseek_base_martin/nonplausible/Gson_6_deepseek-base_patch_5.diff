diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4f8e48c1-590b-47d1-99fa-2195690d15ff_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/ebba61b4-f253-4d46-8cc2-aa3e21e28bf5_fixed.java
index 1c53d31..6b97b7f 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4f8e48c1-590b-47d1-99fa-2195690d15ff_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/ebba61b4-f253-4d46-8cc2-aa3e21e28bf5_fixed.java
@@ -1,20 +1,23 @@
   @SuppressWarnings("unchecked") // Casts guarded by conditionals.
   static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
       TypeToken<?> fieldType, JsonAdapter annotation) {
     Class<?> value = annotation.value();
     TypeAdapter<?> typeAdapter;
     if (TypeAdapter.class.isAssignableFrom(value)) {
       Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
     } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
       Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
           .construct()
           .create(gson, fieldType);
     } else {
       throw new IllegalArgumentException(
           "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
     }
-      typeAdapter = typeAdapter.nullSafe();
+    if (!fieldType.getRawType().isAssignableFrom(typeAdapter.getClass())) {
+      throw new IllegalArgumentException(
+          "@JsonAdapter value type must be assignable from field type.");
+    }
     return typeAdapter;
   }
