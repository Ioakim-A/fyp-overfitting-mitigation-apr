diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1a17a7e3-c9d6-4e12-85ff-78023de99fda_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9165f730-dacc-402a-aa0c-3ace965e5379_fixed.java
index 9ac2149..47da533 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1a17a7e3-c9d6-4e12-85ff-78023de99fda_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9165f730-dacc-402a-aa0c-3ace965e5379_fixed.java
@@ -1,40 +1,69 @@
     /**
      * Verify the given ongoing verification data, and confirm that it satisfies the delegate verification mode
      * before the full duration has passed.
      *
      * In practice, this polls the delegate verification mode until it is satisfied. If it is not satisfied once
      * the full duration has passed, the last error returned by the delegate verification mode will be thrown
      * here in turn. This may be thrown early if the delegate is unsatisfied and the verification mode is known
      * to never recover from this situation (e.g. {@link AtMost}).
      *
      * If it is satisfied before the full duration has passed, behaviour is dependent on the returnOnSuccess parameter
      * given in the constructor. If true, this verification mode is immediately satisfied once the delegate is. If
      * false, this verification mode is not satisfied until the delegate is satisfied and the full time has passed.
      *
      * @throws MockitoAssertionError if the delegate verification mode does not succeed before the timeout
      */
     public void verify(VerificationData data) {
         AssertionError error = null;
-
         timer.start();
         while (timer.isCounting()) {
             try {
                 delegate.verify(data);
-
                 if (returnOnSuccess) {
                     return;
                 } else {
                     error = null;
                 }
             } catch (MockitoAssertionError e) {
                 error = handleVerifyException(e);
             }
-            catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {
-                error = handleVerifyException(e);
+        }
+        if (error != null) {
+            throw error;
         }
     }
 
+    /**
+     * Verify the given ongoing verification data, and confirm that it satisfies the delegate verification mode
+     * before the full duration has passed.
+     *
+     * In practice, this polls the delegate verification mode until it is satisfied. If it is not satisfied once
+     * the full duration has passed, the last error returned by the delegate verification mode will be thrown
+     * here in turn. This may be thrown early if the delegate is unsatisfied and the verification mode is known
+     * to never recover from this situation (e.g. {@link AtMost}).
+     *
+     * If it is satisfied before the full duration has passed, behaviour is dependent on the returnOnSuccess parameter
+     * given in the constructor. If true, this verification mode is immediately satisfied once the delegate is. If
+     * false, this verification mode is not satisfied until the delegate is satisfied and the full time has passed.
+     *
+     * @throws MockitoAssertionError if the delegate verification mode does not succeed before the timeout
+     */
+    public void verify(VerificationData data, String description) {
+        AssertionError error = null;
+        timer.start();
+        while (timer.isCounting()) {
+            try {
+                delegate.verify(data, description);
+                if (returnOnSuccess) {
+                    return;
+                } else {
+                    error = null;
+                }
+            } catch (MockitoAssertionError e) {
+                error = handleVerifyException(e);
+            }
+        }
         if (error != null) {
             throw error;
         }
     }
