diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f632a7a1-8f1e-4796-be7f-de55369d5e20_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4dbe7603-6534-4ee9-b90a-e85ab217ddc4_fixed.java
index de32c39..fe564bc 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f632a7a1-8f1e-4796-be7f-de55369d5e20_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4dbe7603-6534-4ee9-b90a-e85ab217ddc4_fixed.java
@@ -1,101 +1,52 @@
   private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                       WhitespaceOption option) {
-
     if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
         token == JsDocToken.EOF) {
       return new ExtractionInfo("", token);
     }
-
     stream.update();
     int startLineno = stream.getLineno();
     int startCharno = stream.getCharno() + 1;
-
-    // Read the content from the first line.
     String line = stream.getRemainingJSDocLine();
     if (option != WhitespaceOption.PRESERVE) {
       line = line.trim();
     }
-
     StringBuilder builder = new StringBuilder();
     builder.append(line);
-
     state = State.SEARCHING_ANNOTATION;
     token = next();
-
     boolean ignoreStar = false;
-
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
-
+   if (token == JsDocToken.STAR) {
+      ignoreStar = true;
+      token = next();
+    }
     do {
-      switch (token) {
-        case STAR:
+      if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
+          token == JsDocToken.EOF) {
+        return new ExtractionInfo(builder.toString(), token);
+      }
+      if (token == JsDocToken.STAR) {
         if (ignoreStar) {
-            // Mark the position after the star as the new start of the line.
-          } else {
-            // The star is part of the comment.
-            if (builder.length() > 0) {
-              builder.append(' ');
-            }
-
-            builder.append('*');
-          }
-
-          token = next();
-          continue;
-
-        case EOL:
-          if (option != WhitespaceOption.SINGLE_LINE) {
-            builder.append("\n");
-          }
-
-          ignoreStar = true;
-          token = next();
-          continue;
-
-        default:
           ignoreStar = false;
-          state = State.SEARCHING_ANNOTATION;
-
-              // All tokens must be separated by a space.
-
-          if (token == JsDocToken.EOC ||
-              token == JsDocToken.EOF ||
-              // When we're capturing a license block, annotations
-              // in the block are ok.
-              (token == JsDocToken.ANNOTATION &&
-               option != WhitespaceOption.PRESERVE)) {
-            String multilineText = builder.toString();
-
-            if (option != WhitespaceOption.PRESERVE) {
-              multilineText = multilineText.trim();
-            }
-
-            int endLineno = stream.getLineno();
-            int endCharno = stream.getCharno();
-
-            if (multilineText.length() > 0) {
-              jsdocBuilder.markText(multilineText, startLineno, startCharno,
-                  endLineno, endCharno);
+        } else {
+          return new ExtractionInfo(builder.toString(), token);
         }
-
-            return new ExtractionInfo(multilineText, token);
       }
-
-          if (builder.length() > 0) {
-            builder.append(' ');
+      builder.append(toString(token));
+      line = stream.getRemainingJSDocLine();
+      if (option != WhitespaceOption.PRESERVE) {
+        line = trimEnd(line);
       }
+      builder.append(line);
+      token = next();
+      while (token == JsDocToken.EOC || token == JsDocToken.EOL) {
           builder.append(toString(token));
-
           line = stream.getRemainingJSDocLine();
-
           if (option != WhitespaceOption.PRESERVE) {
             line = trimEnd(line);
           }
-
           builder.append(line);
           token = next();
       }
     } while (true);
   }
