diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/af283245-4c4b-41cd-b472-1e8c1368048d_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2c1d521b-92f6-4a36-88c7-aa678c9d2f2d_fixed.java
index 9dbb0a9..7629f79 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/af283245-4c4b-41cd-b472-1e8c1368048d_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2c1d521b-92f6-4a36-88c7-aa678c9d2f2d_fixed.java
@@ -1,65 +1,30 @@
   public void visit(NodeTraversal t, Node n, Node parent) {
-    // VOID nodes appear when there are extra semicolons at the BLOCK level.
-    // I've been unable to think of any cases where this indicates a bug,
-    // and apparently some people like keeping these semicolons around,
-    // so we'll allow it.
     if (n.isEmpty() ||
         n.isComma()) {
       return;
     }
-
     if (parent == null) {
       return;
     }
-
-    // Do not try to remove a block or an expr result. We already handle
-    // these cases when we visit the child, and the peephole passes will
-    // fix up the tree in more clever ways when these are removed.
-    if (n.isExprResult()) {
-      return;
-    }
-
-    // This no-op statement was there so that JSDoc information could
-    // be attached to the name. This check should not complain about it.
-    if (n.isQualifiedName() && n.getJSDocInfo() != null) {
-      return;
-    }
-
-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
-    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
-    if (parent.getType() == Token.COMMA) {
-      if (isResultUsed) {
-        return;
-      }
-      if (n == parent.getLastChild()) {
-        for (Node an : parent.getAncestors()) {
-          int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
-          else break;
-        }
-      }
-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
-        return;
-      }
-    }
-    if (
+   boolean isSimpleOp = n.isAdd() || n.isSub() || n.isMul() || n.isDiv() ||
+        n.isMod() || n.isBitAnd() || n.isBitOr() || n.isBitXor() ||
+        n.isLsh() || n.isRsh() || n.isUrsh() || n.isAnd() || n.isOr() ||
+        n.isEq() || n.isNe() || n.isLt() || n.isLte() || n.isGt() ||
+        n.isGte() || n.isTypeOf() || n.isInstanceof();
+    if (!NodeUtil.isStatement(n) &&
+        !NodeUtil.isControlStructure(parent) &&
         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
       String msg = "This code lacks side-effects. Is there a bug?";
       if (n.isString()) {
         msg = "Is there a missing '+' on the previous line?";
       } else if (isSimpleOp) {
         msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
             "' operator is not being used.";
       }
-
       t.getCompiler().report(
           t.makeError(n, level, USELESS_CODE_ERROR, msg));
-      // TODO(johnlenz): determine if it is necessary to
-      // try to protect side-effect free statements as well.
       if (!NodeUtil.isStatement(n)) {
         problemNodes.add(n);
       }
     }
   }
