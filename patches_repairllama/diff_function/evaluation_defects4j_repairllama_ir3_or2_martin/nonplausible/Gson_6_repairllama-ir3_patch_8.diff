diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b4c5069c-e7a8-4968-9d2e-430a93dcda32_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d7b06933-2d1b-4ddf-947c-a95e88e1564d_fixed.java
index dde7e35..db6b11d 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b4c5069c-e7a8-4968-9d2e-430a93dcda32_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d7b06933-2d1b-4ddf-947c-a95e88e1564d_fixed.java
@@ -1,19 +1,22 @@
   static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
       TypeToken<?> fieldType, JsonAdapter annotation) {
     Class<?> value = annotation.value();
     TypeAdapter<?> typeAdapter;
     if (TypeAdapter.class.isAssignableFrom(value)) {
       Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
     } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
       Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
           .construct()
           .create(gson, fieldType);
     } else {
       throw new IllegalArgumentException(
           "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
     }
-      typeAdapter = typeAdapter.nullSafe();
+   if (typeAdapter == null) {
+      throw new IllegalArgumentException("@" + JsonAdapter.class.getSimpleName()
+          + " value must not return null for type " + fieldType);
+    }
     return typeAdapter;
   }
