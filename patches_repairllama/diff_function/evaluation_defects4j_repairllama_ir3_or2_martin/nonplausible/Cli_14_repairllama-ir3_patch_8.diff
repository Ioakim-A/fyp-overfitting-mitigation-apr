diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2442e1f1-8ed5-42e8-9b8b-cc688f19d4f2_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/fa8ffd3c-9252-450a-833d-25139c394c1a_fixed.java
index 71189c3..ea6c0e4 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2442e1f1-8ed5-42e8-9b8b-cc688f19d4f2_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/fa8ffd3c-9252-450a-833d-25139c394c1a_fixed.java
@@ -1,46 +1,34 @@
     public void validate(final WriteableCommandLine commandLine)
         throws OptionException {
-        // number of options found
         int present = 0;
-
-        // reference to first unexpected option
         Option unexpected = null;
-
         for (final Iterator i = options.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
-
-            // needs validation?
             boolean validate = option.isRequired() || option instanceof Group;
+           if (commandLine.hasOption(option)) {
+                present++;
+                validate = true;
+            }
             if (validate) {
                 option.validate(commandLine);
             }
-
-            // if the child option is present then validate it
+        }
+        for (final Iterator i = anonymous.iterator(); i.hasNext();) {
+            final Option option = (Option) i.next();
             if (commandLine.hasOption(option)) {
-                if (++present > maximum) {
-                    unexpected = option;
-
-                    break;
-                }
-
+                present++;
                 option.validate(commandLine);
             }
         }
-
-        // too many options
         if (unexpected != null) {
             throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                       unexpected.getPreferredName());
         }
-
-        // too few option
         if (present < minimum) {
             throw new OptionException(this, ResourceConstants.MISSING_OPTION);
         }
-
-        // validate each anonymous argument
         for (final Iterator i = anonymous.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
             option.validate(commandLine);
         }
     }
