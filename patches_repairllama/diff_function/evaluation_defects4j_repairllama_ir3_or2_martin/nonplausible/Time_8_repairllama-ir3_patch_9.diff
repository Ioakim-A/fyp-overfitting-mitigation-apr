diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0581426d-6989-4d72-9561-9fdcaee538ce_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/56907f64-abde-4cd3-a004-da00f0582c85_fixed.java
index ab7017e..b5c95b4 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0581426d-6989-4d72-9561-9fdcaee538ce_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/56907f64-abde-4cd3-a004-da00f0582c85_fixed.java
@@ -1,24 +1,25 @@
     public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {
         if (hoursOffset == 0 && minutesOffset == 0) {
             return DateTimeZone.UTC;
         }
         if (hoursOffset < -23 || hoursOffset > 23) {
             throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
         }
-        if (minutesOffset < 0 || minutesOffset > 59) {
+       if (minutesOffset < -59 || minutesOffset > 59) {
             throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);
         }
-        int offset = 0;
+        long offset;
         try {
-            int hoursInMinutes = hoursOffset * 60;
-            if (hoursInMinutes < 0) {
-                minutesOffset = hoursInMinutes - minutesOffset;
+            long hoursInMillis = FieldUtils.safeMultiply(hoursOffset, DateTimeConstants.MILLIS_PER_HOUR);
+            long hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, DateTimeConstants.MINUTES_PER_HOUR);
+            if (minutesOffset >= 0) {
+                minutesOffset = hoursInMinutes + minutesOffset;
             } else {
                 minutesOffset = hoursInMinutes + minutesOffset;
             }
             offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
         } catch (ArithmeticException ex) {
             throw new IllegalArgumentException("Offset is too large");
         }
         return forOffsetMillis(offset);
     }
