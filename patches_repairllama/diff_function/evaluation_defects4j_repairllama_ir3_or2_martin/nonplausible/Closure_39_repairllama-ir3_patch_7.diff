diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1ee2c7cd-2cd6-4a1c-a66f-401948b7c160_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1dcb45eb-2fb9-4b48-9612-4d39ec03602c_fixed.java
index 25b1dac..d0d40c3 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1ee2c7cd-2cd6-4a1c-a66f-401948b7c160_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1dcb45eb-2fb9-4b48-9612-4d39ec03602c_fixed.java
@@ -1,44 +1,30 @@
   String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
       return getReferenceName();
     } else if (prettyPrint) {
-      // Don't pretty print recursively.
       prettyPrint = false;
-
-      // Use a tree set so that the properties are sorted.
       Set<String> propertyNames = Sets.newTreeSet();
       for (ObjectType current = this;
            current != null && !current.isNativeObjectType() &&
                propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
            current = current.getImplicitPrototype()) {
         propertyNames.addAll(current.getOwnPropertyNames());
       }
-
       StringBuilder sb = new StringBuilder();
       sb.append("{");
-
       int i = 0;
       for (String property : propertyNames) {
         if (i > 0) {
           sb.append(", ");
         }
-
         sb.append(property);
         sb.append(": ");
-        sb.append(getPropertyType(property).toString());
-
-        ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
-          sb.append(", ...");
-          break;
+       sb.append(getPropertyType(property, forAnnotations));
+        i++;
       }
-      }
-
       sb.append("}");
-
-      prettyPrint = true;
       return sb.toString();
     } else {
       return "{...}";
     }
   }
