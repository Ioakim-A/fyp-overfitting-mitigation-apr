diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/596ba613-aac1-452a-affc-5841afd4e118_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6e14610f-86f1-4549-8a17-8d5ef43ac82f_fixed.java
index 654abbf..2c276a4 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/596ba613-aac1-452a-affc-5841afd4e118_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6e14610f-86f1-4549-8a17-8d5ef43ac82f_fixed.java
@@ -1,19 +1,21 @@
     public Object answer(InvocationOnMock invocation) {
         if (methodsGuru.isToString(invocation.getMethod())) {
             Object mock = invocation.getMock();
             MockName name = mockUtil.getMockName(mock);
             if (name.isDefault()) {
                 return "Mock for " + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + ", hashCode: " + mock.hashCode();
             } else {
                 return name.toString();
             }
         } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {
-            //see issue 184.
-            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
-            //Only for compareTo() method by the Comparable interface
-            return 1;
+           Object mock = invocation.getMock();
+            MockName name = mockUtil.getMockName(mock);
+            if (name.isDefault()) {
+                return 0;
+            } else {
+                return name.compareTo(invocation.getArguments()[0]);
+            }
         }
-        
         Class<?> returnType = invocation.getMethod().getReturnType();
         return returnValueFor(returnType);
     }
