diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1fb1386f-09bd-4969-ae3c-90a59034789c_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4c5271b0-8af6-48c3-9351-38780db7ad33_fixed.java
index 602226b..661a1e5 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1fb1386f-09bd-4969-ae3c-90a59034789c_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4c5271b0-8af6-48c3-9351-38780db7ad33_fixed.java
@@ -1,26 +1,34 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
-        if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
-          String name = n.getString();
-          Var aliasVar = scope.getVar(name);
-          aliases.put(name, aliasVar);
-
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
-          transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
-        } else {
-          // TODO(robbyw): Support using locals for private variables.
-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+       JSDocInfo info = NodeUtil.getBestJSDocInfo(n);
+        if (info == null) {
+          continue;
         }
+        if (type == Token.FUNCTION) {
+          if (parent.getType() == Token.EXPR_RESULT) {
+            parent = parent.getParent();
           }
+          if (parent.getType() == Token.ASSIGN) {
+            parent = parent.getParent();
           }
+          if (parent.getType() == Token.EXPR_RESULT) {
+            parent = parent.getParent();
+          }
+          if (parent.getType() == Token.EXPR_RESULT) {
+            parent = parent.getParent();
+          }
+          if (parent.getType() == Token.EXPR_RESULT) {
+            parent = parent.getParent();
+          }
+          if (parent.getType() == Token.EXPR_RESULT) {
+            parent = parent.getParent();
+          }
+          if (parent.getType() == Token.SCRIPT) {
+            continue;
+          }
+        }      }
     }
