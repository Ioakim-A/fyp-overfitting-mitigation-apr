diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/32d089c9-4514-410e-86af-812745f03390_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9230970e-092f-46a5-8004-0f452ac4d754_fixed.java
index 618a37c..e8dc3ba 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/32d089c9-4514-410e-86af-812745f03390_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9230970e-092f-46a5-8004-0f452ac4d754_fixed.java
@@ -1,28 +1,21 @@
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
-
-    // Try to infer the template types
-    Map<TemplateType, JSType> inferred =
-        inferTemplateTypesFromParameters(fnType, n);
-
-
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
+   ImmutableMap.Builder<TemplateType, JSType> inferred = ImmutableMap.builder();
+    for (TemplateType key : keys) {
+      inferred.put(key, getNativeType(JSTypeNative.UNKNOWN_TYPE));
+    }
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
-
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
-
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
-
     return replacer.madeChanges;
   }
