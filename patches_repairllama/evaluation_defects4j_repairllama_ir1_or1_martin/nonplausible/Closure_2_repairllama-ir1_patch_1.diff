diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/28188da8-77c3-45dc-b699-10ef24100bbd_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a15de208-8d29-4560-a51f-d1df710cb934_fixed.java
index 9a8827e..8fc9bf8 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/28188da8-77c3-45dc-b699-10ef24100bbd_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a15de208-8d29-4560-a51f-d1df710cb934_fixed.java
@@ -1,27 +1,23 @@
  private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
       String functionName, HashMap<String, ObjectType> properties,
       HashMap<String, ObjectType> currentProperties,
       ObjectType interfaceType) {
     ObjectType implicitProto = interfaceType.getImplicitPrototype();
+    if (implicitProto != null) {
       Set<String> currentPropertyNames;
-      // This can be the case if interfaceType is proxy to a non-existent
-      // object (which is a bad type annotation, but shouldn't crash).
       currentPropertyNames = implicitProto.getOwnPropertyNames();
       for (String name : currentPropertyNames) {
         ObjectType oType = properties.get(name);
         if (oType != null) {
           if (!interfaceType.getPropertyType(name).isEquivalentTo(
               oType.getPropertyType(name))) {
             compiler.report(
                 t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
                     functionName, name, oType.toString(),
                     interfaceType.toString()));
           }
         }
         currentProperties.put(name, interfaceType);
       }
-    for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
-      checkInterfaceConflictProperties(t, n, functionName, properties,
-          currentProperties, iType);
-    }
     }
+    for (ObjectType
\ No newline at end of file
