diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f4366a54-9ee0-4e1b-b2bc-0f0deb8db211_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6e2c6c1e-ebe0-4f7f-a625-5b12f78ba5e6_fixed.java
index a428a68..89d1cce 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f4366a54-9ee0-4e1b-b2bc-0f0deb8db211_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6e2c6c1e-ebe0-4f7f-a625-5b12f78ba5e6_fixed.java
@@ -1,70 +1,19 @@
  static String strEscape(String s, char quote,
                           String doublequoteEscape,
                           String singlequoteEscape,
                           String backslashEscape,
                           CharsetEncoder outputCharsetEncoder) {
     StringBuilder sb = new StringBuilder(s.length() + 2);
     sb.append(quote);
     for (int i = 0; i < s.length(); i++) {
       char c = s.charAt(i);
       switch (c) {
         case '\n': sb.append("\\n"); break;
         case '\r': sb.append("\\r"); break;
         case '\t': sb.append("\\t"); break;
         case '\\': sb.append(backslashEscape); break;
         case '\"': sb.append(doublequoteEscape); break;
         case '\'': sb.append(singlequoteEscape); break;
-        case '>':                       // Break --> into --\> or ]]> into ]]\>
-          if (i >= 2 &&
-              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||
-               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {
-            sb.append("\\>");
-          } else {
-            sb.append(c);
-          }
-          break;
-        case '<':
-          // Break </script into <\/script
-          final String END_SCRIPT = "/script";
-
-          // Break <!-- into <\!--
-          final String START_COMMENT = "!--";
-
-          if (s.regionMatches(true, i + 1, END_SCRIPT, 0,
-                              END_SCRIPT.length())) {
-            sb.append("<\\");
-          } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,
-                                     START_COMMENT.length())) {
-            sb.append("<\\");
-          } else {
-            sb.append(c);
-          }
-          break;
-        default:
-          // If we're given an outputCharsetEncoder, then check if the
-          //  character can be represented in this character set.
-          if (outputCharsetEncoder != null) {
-            if (outputCharsetEncoder.canEncode(c)) {
-              sb.append(c);
-            } else {
-              // Unicode-escape the character.
-              appendHexJavaScriptRepresentation(sb, c);
-            }
-          } else {
-            // No charsetEncoder provided - pass straight latin characters
-            // through, and escape the rest.  Doing the explicit character
-            // check is measurably faster than using the CharsetEncoder.
-            if (c > 0x1f && c <= 0x7f) {
-              sb.append(c);
-            } else {
-              // Other characters can be misinterpreted by some js parsers,
-              // or perhaps mangled by proxies along the way,
-              // so we play it safe and unicode escape them.
-              appendHexJavaScriptRepresentation(sb, c);
-            }
-          }
-      }
-    }
-    sb.append(quote);
-    return sb.toString();
-  }
+        case '>':                       
+          if (i + 1 < s.length() &&
+              ((s.charAt(i + 1) == '-' && s.charAt(
\ No newline at end of file
