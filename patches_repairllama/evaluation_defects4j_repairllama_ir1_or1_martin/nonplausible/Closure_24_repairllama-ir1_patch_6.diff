diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b7962cb1-7290-4133-8436-b424b735fe80_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c4cccbc2-39d1-41b6-8075-53d53a0756c2_fixed.java
index 602226b..6254998 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b7962cb1-7290-4133-8436-b424b735fe80_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c4cccbc2-39d1-41b6-8075-53d53a0756c2_fixed.java
@@ -1,26 +1,21 @@
    private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
         if (parent.isVar()) {
           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
           String name = n.getString();
           Var aliasVar = scope.getVar(name);
+          if (aliasVar != null) {
             aliases.put(name, aliasVar);
-
             String qualifiedName =
                 aliasVar.getInitialValue().getQualifiedName();
             transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
           } else {
-          // TODO(robbyw): Support using locals for private variables.
             report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
           }
-        }
-      }
+        } else {
+          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
         }
\ No newline at end of file
