diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/478b97d9-89db-41b7-8ba6-a3bc74eb2ead_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/7ba3a42f-75ff-485f-a7a4-5af325a0eee6_fixed.java
index b12de99..9c92d58 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/478b97d9-89db-41b7-8ba6-a3bc74eb2ead_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/7ba3a42f-75ff-485f-a7a4-5af325a0eee6_fixed.java
@@ -1,52 +1,22 @@
    @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (t.inGlobalScope()) {
         return;
       }
-
       if (n.isReturn() && n.getFirstChild() != null) {
         data.get(t.getScopeRoot()).recordNonEmptyReturn();
       }
-
       if (t.getScopeDepth() <= 2) {
-        // The first-order function analyzer looks at two types of variables:
-        //
-        // 1) Local variables that are assigned in inner scopes ("escaped vars")
-        //
-        // 2) Local variables that are assigned more than once.
-        //
-        // We treat all global variables as escaped by default, so there's
-        // no reason to do this extra computation for them.
         return;
       }
-
       if (n.isName() && NodeUtil.isLValue(n) &&
-          // Be careful of bleeding functions, which create variables
-          // in the inner scope, not the scope where the name appears.
           !NodeUtil.isBleedingFunctionName(n)) {
         String name = n.getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
           Scope ownerScope = var.getScope();
           if (ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode()).recordAssignedName(name);
           }
-
-          if (scope != ownerScope && ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
-          }
-        }
-      } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
-          NodeUtil.isLValue(n)) {
-        String name = NodeUtil.getRootOfQualifiedName(n).getString();
-        Scope scope = t.getScope();
-        Var var = scope.getVar(name);
-        if (var != null) {
-          Scope ownerScope = var.getScope();
-          if (scope != ownerScope && ownerScope.isLocal()) {
-            data.get(ownerScope.getRootNode())
-                .recordEscapedQualifiedName(n.getQualifiedName());
-          }
-        }
-      }
-    }
+          if (ownerScope != scope && ownerScope.isLocal()) {
+            data.get(ownerScope.getRootNode()).recordEsc
\ No newline at end of file
