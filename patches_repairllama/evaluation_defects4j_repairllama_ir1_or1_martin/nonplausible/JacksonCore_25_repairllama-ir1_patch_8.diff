diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/28f63eac-cdcc-48d8-9a88-c92bf350455a_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6f9d1867-eb4d-4dbb-829c-d67ebd044d2a_fixed.java
index 8dfbd84..f10203c 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/28f63eac-cdcc-48d8-9a88-c92bf350455a_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6f9d1867-eb4d-4dbb-829c-d67ebd044d2a_fixed.java
@@ -1,43 +1,24 @@
    private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException
     {
         _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));
         char[] outBuf = _textBuffer.getCurrentSegment();
         int outPtr = _textBuffer.getCurrentSegmentSize();
-        final int maxCode = codes.length;
-
+        final int maxCode = codes.length-1;
         while (true) {
             if (_inputPtr >= _inputEnd) {
-                if (!_loadMore()) { // acceptable for now (will error out later)
+                if (!_loadMore()) { 
                     break;
                 }
             }
             char c = _inputBuffer[_inputPtr];
             int i = (int) c;
             if (i <= maxCode) {
                 if (codes[i] != 0) {
                     break;
                 }
             } else if (!Character.isJavaIdentifierPart(c)) {
                 break;
             }
             ++_inputPtr;
             hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;
-            // Ok, let's add char to output:
             outBuf[outPtr++] = c;
\ No newline at end of file
-
-            // Need more room?
-            if (outPtr >= outBuf.length) {
-                outBuf = _textBuffer.finishCurrentSegment();
-                outPtr = 0;
-            }
-        }
-        _textBuffer.setCurrentLength(outPtr);
-        {
-            TextBuffer tb = _textBuffer;
-            char[] buf = tb.getTextBuffer();
-            int start = tb.getTextOffset();
-            int len = tb.size();
-
-            return _symbols.findSymbol(buf, start, len, hash);
-        }
-    }
