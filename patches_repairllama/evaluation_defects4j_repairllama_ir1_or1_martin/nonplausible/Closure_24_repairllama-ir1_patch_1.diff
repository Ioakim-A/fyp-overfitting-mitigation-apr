diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/af35fd0e-1ecf-4437-b5b8-d6786a6db3b9_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d6e9dc15-7371-4ea6-972b-c0818858a288_fixed.java
index 602226b..3fc9fce 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/af35fd0e-1ecf-4437-b5b8-d6786a6db3b9_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d6e9dc15-7371-4ea6-972b-c0818858a288_fixed.java
@@ -1,26 +1,20 @@
    private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
         if (parent.isVar()) {
           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
             String name = n.getString();
             Var aliasVar = scope.getVar(name);
             aliases.put(name, aliasVar);
-
             String qualifiedName =
                 aliasVar.getInitialValue().getQualifiedName();
             transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
           } else {
-          // TODO(robbyw): Support using locals for private variables.
             report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
           }
         }
       }
     }
