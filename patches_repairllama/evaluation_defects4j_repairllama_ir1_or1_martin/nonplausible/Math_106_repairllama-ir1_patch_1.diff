diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/3e65050b-65c1-4de8-b0f7-50989dc067f0_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6a74f7eb-300f-4e07-a200-ce2b9b29a958_fixed.java
index cba47b8..91b8ff7 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/3e65050b-65c1-4de8-b0f7-50989dc067f0_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6a74f7eb-300f-4e07-a200-ce2b9b29a958_fixed.java
@@ -1,77 +1,28 @@
    public Fraction parse(String source, ParsePosition pos) {
-        // try to parse improper fraction
         Fraction ret = super.parse(source, pos);
         if (ret != null) {
             return ret;
         }
-        
         int initialIndex = pos.getIndex();
-
-        // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
-
-        // parse whole
         Number whole = getWholeFormat().parse(source, pos);
         if (whole == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
-
-        // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
-        
-        // parse numerator
         Number num = getNumeratorFormat().parse(source, pos);
         if (num == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
-        
-            // minus signs should be leading, invalid expression
-
-        // parse '/'
         int startIndex = pos.getIndex();
         char c = parseNextCharacter(source, pos);
         switch (c) {
         case 0 :
-            // no '/'
-            // return num as a fraction
             return new Fraction(num.intValue(), 1);
         case '/' :
-            // found '/', continue parsing denominator
             break;
         default :
-            // invalid '/'
-            // set index back to initial, error index should be the last
-            // character examined.
             pos.setIndex(initialIndex);
-            pos.setErrorIndex(startIndex);
-            return null;
-        }
-
-        // parse whitespace
-        parseAndIgnoreWhitespace(source, pos);
-
-        // parse denominator
-        Number den = getDenominatorFormat().parse(source, pos);
-        if (den == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
-            pos.setIndex(initialIndex);
-            return null;
-        }
-        
-            // minus signs must be leading, invalid
-
-        int w = whole.intValue();
-        int n = num.intValue();
-        int d = den.intValue();
-        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
-    }
+            pos.setErrorIndex(startIndex
\ No newline at end of file
