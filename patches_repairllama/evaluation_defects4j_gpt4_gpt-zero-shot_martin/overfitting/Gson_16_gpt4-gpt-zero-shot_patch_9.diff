diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/3ee03697-79cd-43c1-9f9f-93a10b7ce949_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/fc1a2b7f-fb66-452a-b68a-27e21b73fb1f_fixed.java
index 79880a8..c0cdf50 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/3ee03697-79cd-43c1-9f9f-93a10b7ce949_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/fc1a2b7f-fb66-452a-b68a-27e21b73fb1f_fixed.java
@@ -1,73 +1,69 @@
-  private static Type resolve(Type context, Class<?> contextRawType, Type toResolve,
-                              Collection<TypeVariable> visitedTypeVariables) {
-    // this implementation is made a little more complicated in an attempt to avoid object-creation
+private static Type resolve(Type context, Class<?> contextRawType, Type toResolve, Collection<TypeVariable> visitedTypeVariables) {
     while (true) {
         if (toResolve instanceof TypeVariable) {
             TypeVariable<?> typeVariable = (TypeVariable<?>) toResolve;
-          // cannot reduce due to infinite recursion
+            
+            // Check if we have visited this type variable before
+            if (visitedTypeVariables.contains(typeVariable)) {
+                return typeVariable;
+            }
+            visitedTypeVariables.add(typeVariable);
+
             toResolve = resolveTypeVariable(context, contextRawType, typeVariable);
             if (toResolve == typeVariable) {
                 return toResolve;
             }
-
         } else if (toResolve instanceof Class && ((Class<?>) toResolve).isArray()) {
             Class<?> original = (Class<?>) toResolve;
             Type componentType = original.getComponentType();
             Type newComponentType = resolve(context, contextRawType, componentType, visitedTypeVariables);
             return componentType == newComponentType
                 ? original
                 : arrayOf(newComponentType);
-
         } else if (toResolve instanceof GenericArrayType) {
             GenericArrayType original = (GenericArrayType) toResolve;
             Type componentType = original.getGenericComponentType();
             Type newComponentType = resolve(context, contextRawType, componentType, visitedTypeVariables);
             return componentType == newComponentType
                 ? original
                 : arrayOf(newComponentType);
-
         } else if (toResolve instanceof ParameterizedType) {
             ParameterizedType original = (ParameterizedType) toResolve;
             Type ownerType = original.getOwnerType();
             Type newOwnerType = resolve(context, contextRawType, ownerType, visitedTypeVariables);
             boolean changed = newOwnerType != ownerType;
-
             Type[] args = original.getActualTypeArguments();
             for (int t = 0, length = args.length; t < length; t++) {
                 Type resolvedTypeArgument = resolve(context, contextRawType, args[t], visitedTypeVariables);
                 if (resolvedTypeArgument != args[t]) {
                     if (!changed) {
                         args = args.clone();
                         changed = true;
                     }
                     args[t] = resolvedTypeArgument;
                 }
             }
-
             return changed
                 ? newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args)
                 : original;
-
         } else if (toResolve instanceof WildcardType) {
             WildcardType original = (WildcardType) toResolve;
             Type[] originalLowerBound = original.getLowerBounds();
             Type[] originalUpperBound = original.getUpperBounds();
-
             if (originalLowerBound.length == 1) {
                 Type lowerBound = resolve(context, contextRawType, originalLowerBound[0], visitedTypeVariables);
                 if (lowerBound != originalLowerBound[0]) {
                     return supertypeOf(lowerBound);
                 }
             } else if (originalUpperBound.length == 1) {
                 Type upperBound = resolve(context, contextRawType, originalUpperBound[0], visitedTypeVariables);
                 if (upperBound != originalUpperBound[0]) {
                     return subtypeOf(upperBound);
                 }
             }
             return original;
-
         } else {
             return toResolve;
         }
     }
 }
\ No newline at end of file
