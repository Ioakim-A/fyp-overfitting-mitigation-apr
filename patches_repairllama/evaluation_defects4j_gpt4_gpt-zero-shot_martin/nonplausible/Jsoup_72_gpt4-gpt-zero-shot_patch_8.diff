diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f3e9d83e-2217-4ba6-ad6c-aff843c6b0fe_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f04c9b46-876a-4769-9e15-487394810312_fixed.java
index 7b4f703..942fe46 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f3e9d83e-2217-4ba6-ad6c-aff843c6b0fe_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f04c9b46-876a-4769-9e15-487394810312_fixed.java
@@ -1,29 +1,38 @@
     private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {
-        // limit (no cache):
+        int maxStringCacheLen = 50;
+        
         if (count > maxStringCacheLen)
             return new String(charBuf, start, count);
 
-        // calculate hash:
         int hash = 0;
         int offset = start;
         for (int i = 0; i < count; i++) {
             hash = 31 * hash + charBuf[offset++];
         }
-
-        // get from cache
-        final int index = hash & stringCache.length - 1;
+        final int index = hash & (stringCache.length - 1);
         String cached = stringCache[index];
+        if (cached == null) { 
+            cached = new String(charBuf, start, count);
+            stringCache[index] = cached;
+        } else { 
+            if (rangeEquals(charBuf, start, count, cached)) { 
+                return cached;
+            } else { 
+                cached = new String(charBuf, start, count);
+                stringCache[index] = cached; 
+            }
+        }
+        return cached;
+    }
 
-        if (cached == null) { // miss, add
-            cached = new String(charBuf, start, count);
-            stringCache[index] = cached;
-        } else { // hashcode hit, check equality
-            if (rangeEquals(charBuf, start, count, cached)) { // hit
-                return cached;
-            } else { // hashcode conflict
-                cached = new String(charBuf, start, count);
-                stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again
-            }
-        }
-        return cached;
+    private static boolean rangeEquals(char[] charBuf, int start, int count, String cached) {
+        if (count != cached.length()) {
+            return false;
+        }
+        for (int i = 0; i < count; i++) {
+            if (charBuf[start + i] != cached.charAt(i)) {
+                return false;
+            }
+        }
+        return true;
     }
\ No newline at end of file
