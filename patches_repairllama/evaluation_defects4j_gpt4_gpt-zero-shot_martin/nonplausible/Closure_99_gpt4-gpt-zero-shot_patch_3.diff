diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9875cfca-1d47-48be-83d2-ca9015739944_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/7d3fea02-91ae-44cb-bd43-34d205e19763_fixed.java
index 26bd607..6a0a471 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9875cfca-1d47-48be-83d2-ca9015739944_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/7d3fea02-91ae-44cb-bd43-34d205e19763_fixed.java
@@ -1,53 +1,36 @@
 public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
-
     if (n.getType() == Token.FUNCTION) {
-      // Don't traverse functions that are constructors or have the @this
-      // or @override annotation.
         JSDocInfo jsDoc = getFunctionJsDocInfo(n);
         if (jsDoc != null &&
             (jsDoc.isConstructor() ||
             jsDoc.hasThisType() ||
             jsDoc.isOverride())) {
             return false;
         }
-
-      // Don't traverse functions unless they would normally
-      // be able to have a @this annotation associated with them. e.g.,
-      // var a = function() { }; // or
-      // function a() {} // or
-      // a.x = function() {};
         int pType = parent.getType();
         if (!(pType == Token.BLOCK ||
             pType == Token.SCRIPT ||
             pType == Token.NAME ||
             pType == Token.ASSIGN)) {
             return false;
         }
     }
-
     if (parent != null && parent.getType() == Token.ASSIGN) {
         Node lhs = parent.getFirstChild();
         Node rhs = lhs.getNext();
-      
         if (n == lhs) {
-        // Always traverse the left side of the assignment. To handle
-        // nested assignments properly (e.g., (a = this).property = c;),
-        // assignLhsChild should not be overridden.
             if (assignLhsChild == null) {
                 assignLhsChild = lhs;
             }
         } else {
-        // Only traverse the right side if it's not an assignment to a prototype
-        // property or subproperty.
             if (lhs.getType() == Token.GETPROP &&
                 lhs.getLastChild().getString().equals("prototype")) {
                 return false;
             }
             if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
                 return false;
             }
         }
     }
-
     return true;
 }
\ No newline at end of file
