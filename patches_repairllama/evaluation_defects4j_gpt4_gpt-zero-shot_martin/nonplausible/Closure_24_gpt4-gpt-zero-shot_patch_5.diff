diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/be102825-39f3-4c29-925b-404d38fedd88_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1390f0db-919e-4a7e-b88a-631d0b97d096_fixed.java
index 602226b..45a861a 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/be102825-39f3-4c29-925b-404d38fedd88_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1390f0db-919e-4a7e-b88a-631d0b97d096_fixed.java
@@ -1,26 +1,26 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
         if (parent.isVar()) {
            if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
              String name = n.getString();
              Var aliasVar = scope.getVar(name);
+             if(aliasVar != null){
                 aliases.put(name, aliasVar);
-
                 String qualifiedName =
                    aliasVar.getInitialValue().getQualifiedName();
+                if(qualifiedName != null){
                   transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
+                }
+             }else{
+               report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+             }
            }else{
-          // TODO(robbyw): Support using locals for private variables.
              report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
            }
         }
       }
     }
\ No newline at end of file
