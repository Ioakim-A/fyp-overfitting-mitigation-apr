diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/92fd1a6c-5727-427c-83c0-736e292896ad_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1e436e64-8d30-410c-a2d3-9aebe80ba9e7_fixed.java
index 39dd8e7..c3af908 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/92fd1a6c-5727-427c-83c0-736e292896ad_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1e436e64-8d30-410c-a2d3-9aebe80ba9e7_fixed.java
@@ -1,30 +1,26 @@
 private Attribute parseAttribute() {
     tq.consumeWhitespace();
     String key = tq.consumeAttributeKey();
     String value = "";
     tq.consumeWhitespace();
     if (tq.matchChomp("=")) {
         tq.consumeWhitespace();
-
         if (tq.matchChomp(SQ)) {
             value = tq.chompTo(SQ);
         } else if (tq.matchChomp(DQ)) {
             value = tq.chompTo(DQ);
         } else {
             StringBuilder valueAccum = new StringBuilder();
-                // no ' or " to look for, so scan to end tag or space (or end of stream)
             while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                 valueAccum.append(tq.consume());
             }
             value = valueAccum.toString();
         }
         tq.consumeWhitespace();
     }
     if (key.length() != 0)
         return Attribute.createFromEncoded(key, value);
     else {
-            tq.consume();
-                
-            return null;
+        throw new IllegalArgumentException("Attribute key is missing");
     }
 }
\ No newline at end of file
