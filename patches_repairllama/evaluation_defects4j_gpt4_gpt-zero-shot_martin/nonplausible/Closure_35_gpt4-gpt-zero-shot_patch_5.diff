diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/8296422f-c88a-495f-baf2-84bb0450c061_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0d5eac3d-c9be-4f58-afea-546582619ac2_fixed.java
index b108107..1817a96 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/8296422f-c88a-495f-baf2-84bb0450c061_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0d5eac3d-c9be-4f58-afea-546582619ac2_fixed.java
@@ -1,25 +1,24 @@
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
-
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
       if (objType != null) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
           JSType propType = constraintObj.getPropertyType(prop);
           if (!objType.isPropertyTypeDeclared(prop)) {
             JSType typeToInfer = propType;
             if (!objType.hasProperty(prop)) {
               typeToInfer =
                   getNativeType(VOID_TYPE).getLeastSupertype(propType);
             }
             objType.defineInferredProperty(prop, typeToInfer, null);
           }
         }
       }
     }
   }
\ No newline at end of file
