diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/fac55375-9d9d-46ca-8f12-a7c37587b784_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/272c4134-ee62-44d5-8d41-d0d65ddb1078_fixed.java
index 602226b..303c359 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/fac55375-9d9d-46ca-8f12-a7c37587b784_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/272c4134-ee62-44d5-8d41-d0d65ddb1078_fixed.java
@@ -1,26 +1,26 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
-        if (parent.isVar()) {
+        if (type == Token.NAME && parent.isVar()) {
           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
             String name = n.getString();
             Var aliasVar = scope.getVar(name);
+            if (aliasVar != null) {
               aliases.put(name, aliasVar);
-
               String qualifiedName =
                   aliasVar.getInitialValue().getQualifiedName();
+              if (qualifiedName != null) {
                 transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
               } else {
-          // TODO(robbyw): Support using locals for private variables.
+                report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+              }
+            }
+          } else {
             report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
           }
         }
       }
     }
\ No newline at end of file
