diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f796b5fc-7729-4ac4-8c99-0fdc3f6c1ec4_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1fa85349-2b75-4c1a-9e04-1fc72816fa17_fixed.java
index 9092be9..a2539e1 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f796b5fc-7729-4ac4-8c99-0fdc3f6c1ec4_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1fa85349-2b75-4c1a-9e04-1fc72816fa17_fixed.java
@@ -1,47 +1,36 @@
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
     if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
-
         char firstChar = input.charAt(start);
         if(firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
-
-                // Check there's more than just an x after the &#
         }
-
         int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+        while(end < seqEnd && input.charAt(end) != ';') {
             end++;
         }
-
         int entityValue;
         try {
             if(isHex) {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
             } else {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
             }
         } catch(NumberFormatException nfe) {
             System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
             return 0;
         }
-
         if(entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
-
-
         return 2 + (end - start) + (isHex ? 1 : 0) + 1;
     }
     return 0;
 }
\ No newline at end of file
