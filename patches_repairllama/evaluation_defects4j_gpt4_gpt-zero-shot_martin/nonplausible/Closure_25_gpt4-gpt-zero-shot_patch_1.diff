diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c88e5fe9-d562-41f8-9d1e-441e39e11cc2_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/42e86be1-1e87-496a-990a-5e935c578cdc_fixed.java
index b98f0a7..d526e34 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c88e5fe9-d562-41f8-9d1e-441e39e11cc2_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/42e86be1-1e87-496a-990a-5e935c578cdc_fixed.java
@@ -1,29 +1,27 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
+    if (constructor != null) {
         scope = traverse(constructor, scope);
         JSType constructorType = constructor.getJSType();
         JSType type = null;
         if (constructorType != null) {
             constructorType = constructorType.restrictByNotNullOrUndefined();
             if (constructorType.isUnknownType()) {
                 type = getNativeType(UNKNOWN_TYPE);
             } else {
                 FunctionType ct = constructorType.toMaybeFunctionType();
                 if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
                     ct = (FunctionType) constructorType;
                 }
                 if (ct != null && ct.isConstructor()) {
                     type = ct.getInstanceType();
                 }
             }
         }
         n.setJSType(type);
         for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
             scope = traverse(arg, scope);
         }
+    }
     return scope;
 }
\ No newline at end of file
