diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d5a2e5a6-ae0c-4eec-9c7f-580881e0c003_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/88e2ff61-22eb-4a31-b17f-5dd07f88b563_fixed.java
index 5edb8df..8f116b3 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d5a2e5a6-ae0c-4eec-9c7f-580881e0c003_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/88e2ff61-22eb-4a31-b17f-5dd07f88b563_fixed.java
@@ -1,61 +1,41 @@
 private CanInlineResult canInlineReferenceDirectly(
     Node callNode, Node fnNode) {
   if (!isDirectCallNodeReplacementPossible(fnNode)) {
     return CanInlineResult.NO;
   }
-
   Node block = fnNode.getLastChild();
+  Node cArg = callNode.getFirstChild() != null ? callNode.getFirstChild().getNext() : null;
   
-
-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]
-    Node cArg = callNode.getFirstChild().getNext();
-
-    // Functions called via 'call' and 'apply' have a this-object as
-    // the first parameter, but this is not part of the called function's
-    // parameter list.
   if (!callNode.getFirstChild().isName()) {
     if (NodeUtil.isFunctionObjectCall(callNode)) {
-        // TODO(johnlenz): Support replace this with a value.
       if (cArg == null || !cArg.isThis()) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     } else {
-        // ".apply" call should be filtered before this.
       Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
     }
   }
   
-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
   Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
+
   while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
     if (fnParam != null) {
       if (cArg != null) {
-
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
         if (NodeUtil.mayEffectMutableState(cArg, compiler)
             && NodeUtil.getNameReferenceCount(
                 block, fnParam.getString()) > 1) {
           return CanInlineResult.NO;
         }
       }
-
-        // Move to the next name.
       fnParam = fnParam.getNext();
     }
-
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
     if (cArg != null) {
       if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     }
   }
-
   return CanInlineResult.YES;
 }
\ No newline at end of file
