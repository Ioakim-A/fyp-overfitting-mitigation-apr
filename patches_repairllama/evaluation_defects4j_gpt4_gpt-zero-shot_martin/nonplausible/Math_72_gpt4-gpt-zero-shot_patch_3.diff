diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/376a5c24-f815-4c37-a338-102355ccadc8_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/519b19c4-4e83-4d38-a5f6-8747e378722c_fixed.java
index 2f17e18..2500a17 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/376a5c24-f815-4c37-a338-102355ccadc8_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/519b19c4-4e83-4d38-a5f6-8747e378722c_fixed.java
@@ -1,47 +1,32 @@
 public double solve(final UnivariateRealFunction f,
                     final double min, final double max, final double initial)
     throws MaxIterationsExceededException, FunctionEvaluationException {
-
     clearResult();
     verifySequence(min, initial, max);
-
-        // return the initial guess if it is good enough
     double yInitial = f.value(initial);
     if (Math.abs(yInitial) <= functionValueAccuracy) {
         setResult(initial, 0);
         return result;
     }
-
-        // return the first endpoint if it is good enough
     double yMin = f.value(min);
     if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+        setResult(min, 0); // corrected code
         return result;
     }
-
-        // reduce interval if min and initial bracket the root
     if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
+        return solve(f, min, initial, yMin); // corrected code
     }
-
-        // return the second endpoint if it is good enough
     double yMax = f.value(max);
     if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+        setResult(max, 0); // corrected code
         return result;
     }
-
-        // reduce interval if initial and max bracket the root
     if (yInitial * yMax < 0) {
-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);
+        return solve(f, initial, yInitial, max, yMax);
     }
-
     if (yMin * yMax > 0) {
         throw MathRuntimeException.createIllegalArgumentException(
               NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
     }
-
-        // full Brent algorithm starting with provided initial guess
     return solve(f, min, yMin, max, yMax, initial, yInitial);
-
 }
\ No newline at end of file
