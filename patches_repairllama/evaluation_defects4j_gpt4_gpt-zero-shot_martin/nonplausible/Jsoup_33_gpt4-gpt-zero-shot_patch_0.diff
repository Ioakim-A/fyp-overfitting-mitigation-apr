diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c52a7cb8-0ee6-4794-96ca-0eaff2498d6d_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e41612cd-77aa-49e3-90a6-258dbb4ee70b_fixed.java
index dc93be3..337fe1b 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c52a7cb8-0ee6-4794-96ca-0eaff2498d6d_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e41612cd-77aa-49e3-90a6-258dbb4ee70b_fixed.java
@@ -1,14 +1,15 @@
 Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
     if (startTag.isSelfClosing()) {
         Element el = insertEmpty(startTag);
+        if (el != null) {
             stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+            tokeniser.emit(new Token.EndTag(el.tagName()));  
             return el;
+        } else {
+            throw new NullArgumentException("Element is null");
+        }
     }
-        
     Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
