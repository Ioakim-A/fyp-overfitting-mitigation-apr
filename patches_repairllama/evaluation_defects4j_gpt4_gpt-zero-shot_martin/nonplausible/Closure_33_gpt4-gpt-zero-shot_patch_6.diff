diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/892e197b-4fbf-4c5d-a473-8dc2810e656c_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/972893e0-43e7-49d7-9a03-0301d1fd126b_fixed.java
index 370507c..8a83f6c 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/892e197b-4fbf-4c5d-a473-8dc2810e656c_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/972893e0-43e7-49d7-9a03-0301d1fd126b_fixed.java
@@ -1,26 +1,17 @@
   public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
-
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
+    // fixed code
+    JSTypeHandler jsTypeHandler = new JSTypeHandler();
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
-        if (!isPropertyTypeDeclared(prop)) {
+        if (!jsTypeHandler.isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
+          if (!jsTypeHandler.hasProperty(prop)) {
+            typeToInfer = jsTypeHandler.getNativeType(JSTypeHandler.JSTypeNative.VOID_TYPE)
                 .getLeastSupertype(propType);
           }
-          defineInferredProperty(prop, typeToInfer, null);
+          jsTypeHandler.defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
\ No newline at end of file
