diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2bddffad-3de9-4a20-b642-a1b8169adb39_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4b51c6a4-29ec-4109-9849-27dcb929b222_fixed.java
index 370507c..f6da6f7 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2bddffad-3de9-4a20-b642-a1b8169adb39_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4b51c6a4-29ec-4109-9849-27dcb929b222_fixed.java
@@ -1,26 +1,18 @@
-  public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
-
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraintObj.isRecordType()) {
-      for (String prop : constraintObj.getOwnPropertyNames()) {
-        JSType propType = constraintObj.getPropertyType(prop);
+  public void matchConstraint(Object constraintObj) {
+    if (constraintObj instanceof ObjectType) {
+      ObjectType objType = (ObjectType) constraintObj;
+      if (objType.isRecordType()) {
+        for (String prop : objType.getOwnPropertyNames()) {
+          JSType propType = objType.getPropertyType(prop);
           if (!isPropertyTypeDeclared(prop)) {
             JSType typeToInfer = propType;
             if (!hasProperty(prop)) {
               typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                   .getLeastSupertype(propType);
             }
             defineInferredProperty(prop, typeToInfer, null);
           }
         }
       }
     }
+  }
\ No newline at end of file
