diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/681a11fe-09b9-4999-8325-25bcf33eeb86_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/ce48f1fe-8ffd-484a-8b4f-e579a5110e26_fixed.java
index 1303a19..d205c83 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/681a11fe-09b9-4999-8325-25bcf33eeb86_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/ce48f1fe-8ffd-484a-8b4f-e579a5110e26_fixed.java
@@ -1,45 +1,35 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
+  if (n == null || left == null || right == null) {
+    return n;
+  }
   Node parent = n.getParent();
-    // If GETPROP/GETELEM is used as assignment target the array literal is
-    // acting as a temporary we can't fold it here:
-    //    "[][0] += 1"
-
   if (right.getType() != Token.NUMBER) {
-      // Sometimes people like to use complex expressions to index into
-      // arrays, or strings to index into array methods.
     return n;
   }
-
   double index = right.getDouble();
   int intIndex = (int) index;
   if (intIndex != index) {
     error(INVALID_GETELEM_INDEX_ERROR, right);
     return n;
   }
-
   if (intIndex < 0) {
     error(INDEX_OUT_OF_BOUNDS_ERROR, right);
     return n;
   }
-
   Node elem = left.getFirstChild();
   for (int i = 0; elem != null && i < intIndex; i++) {
     elem = elem.getNext();
   }
-
   if (elem == null) {
     error(INDEX_OUT_OF_BOUNDS_ERROR, right);
     return n;
   }
-
   if (elem.getType() == Token.EMPTY) {
     elem = NodeUtil.newUndefinedNode(elem);
   } else {
     left.removeChild(elem);
   }
-
-    // Replace the entire GETELEM with the value
   n.getParent().replaceChild(n, elem);
   reportCodeChange();
   return elem;
 }
\ No newline at end of file
