diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c828e16b-2a48-4c96-b231-45f73d4794e8_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0e2f9193-ddd9-488e-8327-352b9447774b_fixed.java
index ef65dd9..bf5f85c 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c828e16b-2a48-4c96-b231-45f73d4794e8_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0e2f9193-ddd9-488e-8327-352b9447774b_fixed.java
@@ -1,92 +1,102 @@
   /**
    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
    */
   void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                          Node parent) {
     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
       return;
     }
-
     Node arrayNode = left.getFirstChild();
     Node functionName = arrayNode.getNext();
-
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return;
     }
-
     String joinString = NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
-    StringBuilder sb = new StringBuilder();
+// buggy code
+//    StringBuilder sb = new StringBuilder();
+//    int foldedSize = 0;
+//    Node elem = arrayNode.getFirstChild();
+//    // Merges adjacent String nodes.
+//    while (elem != null) {
+//      if (NodeUtil.isImmutableValue(elem)) {
+//        if (sb.length() > 0) {
+//          sb.append(joinString);
+//        }
+//        sb.append(NodeUtil.getStringValue(elem));
+//      } else {
+//        if (sb.length() > 0) {
+//          // + 2 for the quotes.
+//          foldedSize += sb.length() + 2;
+//          arrayFoldedChildren.add(Node.newString(sb.toString()));
+//          sb = new StringBuilder();
+//        }
+//        foldedSize += InlineCostEstimator.getCost(elem);
+//        arrayFoldedChildren.add(elem);
+//      }
+//      elem = elem.getNext();
+//    }
+//    if (sb.length() > 0) {
     int foldedSize = 0;
     Node elem = arrayNode.getFirstChild();
     // Merges adjacent String nodes.
+    StringBuilder sb = new StringBuilder();
     while (elem != null) {
       if (NodeUtil.isImmutableValue(elem)) {
         if (sb.length() > 0) {
           sb.append(joinString);
         }
         sb.append(NodeUtil.getStringValue(elem));
       } else {
         if (sb.length() > 0) {
           // + 2 for the quotes.
           foldedSize += sb.length() + 2;
           arrayFoldedChildren.add(Node.newString(sb.toString()));
           sb = new StringBuilder();
-        }
-        foldedSize += InlineCostEstimator.getCost(elem);
-        arrayFoldedChildren.add(elem);
-      }
-      elem = elem.getNext();
-    }
-
-    if (sb.length() > 0) {
       // + 2 for the quotes.
       foldedSize += sb.length() + 2;
       arrayFoldedChildren.add(Node.newString(sb.toString()));
     }
     // one for each comma.
     foldedSize += arrayFoldedChildren.size() - 1;
-
     int originalSize = InlineCostEstimator.getCost(n);
     switch (arrayFoldedChildren.size()) {
       case 0:
         Node emptyStringNode = Node.newString("");
         parent.replaceChild(n, emptyStringNode);
         break;
-
       case 1:
         Node foldedStringNode = arrayFoldedChildren.remove(0);
         if (foldedSize > originalSize) {
           return;
         }
         arrayNode.detachChildren();
         if (foldedStringNode.getType() != Token.STRING) {
           // If the Node is not a string literal, ensure that
           // it is coerced to a string.
           Node replacement = new Node(Token.ADD,
               Node.newString(""), foldedStringNode);
           foldedStringNode = replacement;
         }
         parent.replaceChild(n, foldedStringNode);
         break;
-
       default:
         // No folding could actually be performed.
         if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
           return;
         }
         int kJoinOverhead = "[].join()".length();
         foldedSize += kJoinOverhead;
         foldedSize += InlineCostEstimator.getCost(right);
         if (foldedSize > originalSize) {
           return;
         }
         arrayNode.detachChildren();
         for (Node node : arrayFoldedChildren) {
           arrayNode.addChildToBack(node);
         }
         break;
     }
     t.getCompiler().reportCodeChange();
   }
