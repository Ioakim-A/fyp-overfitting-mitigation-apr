diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c735f814-4980-49ca-96aa-0d691be2b1f0_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e2f44878-27cc-4388-8113-975b7ed9be2d_fixed.java
index 4c1ed27..5882cbe 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c735f814-4980-49ca-96aa-0d691be2b1f0_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e2f44878-27cc-4388-8113-975b7ed9be2d_fixed.java
@@ -1,32 +1,35 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is 
      * tightly coupled with the abstract method of this class. 
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
         int len = input.length();
         while (pos < len) {
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
                 char[] c = Character.toChars(Character.codePointAt(input, pos));
                 out.write(c);
                 pos+= c.length;
                 continue;
             }
 //          // contract with translators is that they have to understand codepoints 
 //          // and they just took care of a surrogate pair
             for (int pt = 0; pt < consumed; pt++) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
+// buggy code
+//                pos += Character.charCount(Character.codePointAt(input, pos));
+                pos += Character.charCount(input.charAt(pos));
+
             }
         }
     }
