diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/251bad52-ead5-4032-86ef-f9a58e22c4f5_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b3a532ca-ae3f-4c14-92d9-712255997f2d_fixed.java
index b86c1ea..8051605 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/251bad52-ead5-4032-86ef-f9a58e22c4f5_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b3a532ca-ae3f-4c14-92d9-712255997f2d_fixed.java
@@ -1,38 +1,59 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is 
      * tightly coupled with the abstract method of this class. 
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
-        int len = Character.codePointCount(input, 0, input.length());
-        while (pos < len) {
+// buggy code
+//        int len = Character.codePointCount(input, 0, input.length());
+//        while (pos < len) {
+//            int consumed = translate(input, pos, out);
+//            if (consumed == 0) {
+//                char[] c = Character.toChars(Character.codePointAt(input, pos));
+//                out.write(c);
+//            }
+//            else {
+////          // contract with translators is that they have to understand codepoints 
+////          // and they just took care of a surrogate pair
+//            for (int pt = 0; pt < consumed; pt++) {
+//                    if (pos < len - 2) {
+//                pos += Character.charCount(Character.codePointAt(input, pos));
+//                    } else {
+//                        pos++;
+//                    }
+//                }
+//                pos--;
+//            }
+//            pos++;
+        while (pos < input.length()) {
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
                 char[] c = Character.toChars(Character.codePointAt(input, pos));
                 out.write(c);
             }
             else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
+          // contract with translators is that they have to understand codepoints 
+          // and they just took care of a surrogate pair
             for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
+                    if (pos < input.length() - 2) {
                 pos += Character.charCount(Character.codePointAt(input, pos));
                     } else {
                         pos++;
                     }
                 }
                 pos--;
             }
             pos++;
+
         }
     }
