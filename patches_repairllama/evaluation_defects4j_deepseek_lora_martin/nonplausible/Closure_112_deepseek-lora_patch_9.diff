diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/73001487-f5b2-4baa-af62-38b4ec01bb48_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/7254560c-a6b0-4de5-99d7-fbd23be8a8c0_fixed.java
index 63641d0..a3e06b3 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/73001487-f5b2-4baa-af62-38b4ec01bb48_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/7254560c-a6b0-4de5-99d7-fbd23be8a8c0_fixed.java
@@ -1,33 +1,31 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
-
     // Try to infer the template types
-    Map<TemplateType, JSType> inferred =
-        inferTemplateTypesFromParameters(fnType, n);
-
+// buggy code
+//    Map<TemplateType, JSType> inferred =
+//        inferTemplateTypesFromParameters(fnType, n);
+    final Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(
+        fnType, n);
 
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
-
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
-
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
-
     return replacer.madeChanges;
   }
