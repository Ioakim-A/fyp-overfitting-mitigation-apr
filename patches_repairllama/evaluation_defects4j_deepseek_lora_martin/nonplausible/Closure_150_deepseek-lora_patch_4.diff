diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f3b09387-6308-4cb8-b3a2-bd21e10b5beb_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/db640c78-a9b2-4b91-ac82-8746183ac0be_fixed.java
index 800e6e1..c677014 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f3b09387-6308-4cb8-b3a2-bd21e10b5beb_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/db640c78-a9b2-4b91-ac82-8746183ac0be_fixed.java
@@ -1,32 +1,49 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
-
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
-
-      attachLiteralTypes(n);
+// buggy code
+//      attachLiteralTypes(n);
+//      switch (n.getType()) {
+//        case Token.FUNCTION:
+//          if (parent.getType() == Token.NAME) {
+//            return;
+//          }
+//          defineDeclaredFunction(n, parent);
+//          break;
+//        case Token.CATCH:
+//          defineCatch(n, parent);
+//          break;
+//        case Token.VAR:
+//          defineVar(n, parent);
+//          break;
+//      }
       switch (n.getType()) {
         case Token.FUNCTION:
+          attachLiteralTypes(n);
           if (parent.getType() == Token.NAME) {
             return;
           }
           defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
+          attachLiteralTypes(n);
           defineCatch(n, parent);
           break;
         case Token.VAR:
+          attachLiteralTypes(n);
           defineVar(n, parent);
           break;
       }
+
     }
