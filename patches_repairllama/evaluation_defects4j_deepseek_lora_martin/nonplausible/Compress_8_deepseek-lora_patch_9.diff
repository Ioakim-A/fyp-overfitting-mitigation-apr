diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/feb2d6bf-e351-44bc-930f-ab8603d62646_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e00f4c4e-b2dd-4863-b3e8-9830edba9194_fixed.java
index e087f95..f1c17df 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/feb2d6bf-e351-44bc-930f-ab8603d62646_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e00f4c4e-b2dd-4863-b3e8-9830edba9194_fixed.java
@@ -1,53 +1,69 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
+// buggy code
+//        boolean stillPadding = true;
+//        int     end = offset + length;
+//        int     start = offset;
+//        for (int i = start; i < end; i++){
+//            final byte currentByte = buffer[i];
+//            if (currentByte == 0) {
+//                break;
+//            }
+//        // Skip leading spaces
+//            if (currentByte == (byte) ' ' || currentByte == '0') {
+//                if (stillPadding) {
+//                   continue;
+//            }
+//                if (currentByte == (byte) ' ') {
+//                break;
+//                }
+//            }
+//        // Must have trailing NUL or space
+//        // May have additional NUL or space
+//            stillPadding = false;
             boolean stillPadding = true;
             int     end = offset + length;
             int     start = offset;
-
             for (int i = start; i < end; i++){
                 final byte currentByte = buffer[i];
                 if (currentByte == 0) {
                     break;
                 }
-
             // Skip leading spaces
                 if (currentByte == (byte) ' ' || currentByte == '0') {
                     if (stillPadding) {
                        continue;
                 }
                     if (currentByte == (byte) ' ') {
                     break;
                     }
                 }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
             stillPadding = false;
+            // Must have trailing NUL or space
+           
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
-
         return result;
     }
