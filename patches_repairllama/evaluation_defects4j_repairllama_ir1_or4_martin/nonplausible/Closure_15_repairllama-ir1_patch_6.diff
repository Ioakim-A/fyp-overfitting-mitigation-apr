diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c3e6342d-3cca-400a-b63e-19a515e6349b_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2ff3ddf2-f816-4c80-8068-23cf5e32115c_fixed.java
index 3110cf7..e87fa75 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c3e6342d-3cca-400a-b63e-19a515e6349b_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2ff3ddf2-f816-4c80-8068-23cf5e32115c_fixed.java
@@ -1,26 +1,34 @@
     public boolean apply(Node n) {
-        // When the node is null it means, we reached the implicit return
-        // where the function returns (possibly without an return statement)
       if (n == null) {
         return false;
       }
-
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
       if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
         return true;
       }
-
       if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
         return true;
       }
-
-
+      for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
+        if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
+          return true;
+        }
+      }
+      return false;
+    }
+      public boolean apply(Node n) {
+        if (n == null) {
+          return false;
+        }
+        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
+          return true;
+        }
+        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
+          return true;
+        }
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
             return true;
           }
         }
         return false;
       }
