diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/33265143-621f-4906-bf69-9eb2253a34a3_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/ea5b5d2e-a799-436c-94c0-209f919741a4_fixed.java
index d4e6d48..4963e1d 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/33265143-621f-4906-bf69-9eb2253a34a3_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/ea5b5d2e-a799-436c-94c0-209f919741a4_fixed.java
@@ -1,23 +1,17 @@
   private Node tryFoldSimpleFunctionCall(Node n) {
-    Preconditions.checkState(n.isCall());
+    Preconditions.checkState(n.isCall() || n.isNew());
     Node callTarget = n.getFirstChild();
     if (callTarget != null && callTarget.isName() &&
           callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
       Node value = callTarget.getNext();
       if (value != null) {
         Node addition = IR.add(
             IR.string("").srcref(callTarget),
             value.detachFromParent());
         n.getParent().replaceChild(n, addition);
         reportCodeChange();
         return addition;
       }
     }
     return n;
   }
