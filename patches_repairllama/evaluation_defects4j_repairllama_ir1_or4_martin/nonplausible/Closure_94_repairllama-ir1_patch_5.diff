diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/46d58733-d87c-4b9e-850d-93bea9e92408_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6bee67e5-0c35-4397-a6e8-f64158dd8c4c_fixed.java
index 02afa2a..435d846 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/46d58733-d87c-4b9e-850d-93bea9e92408_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6bee67e5-0c35-4397-a6e8-f64158dd8c4c_fixed.java
@@ -1,28 +1,10 @@
-  static boolean isValidDefineValue(Node val, Set<String> defines) {
+  public static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
       case Token.STRING:
       case Token.NUMBER:
       case Token.TRUE:
       case Token.FALSE:
-        return true;
-
-      // Binary operators are only valid if both children are valid.
-      case Token.BITAND:
-      case Token.BITNOT:
-      case Token.BITOR:
-      case Token.BITXOR:
-
-      // Uniary operators are valid if the child is valid.
-      case Token.NOT:
-      case Token.NEG:
-        return isValidDefineValue(val.getFirstChild(), defines);
-
-      // Names are valid if and only if they are defines themselves.
-      case Token.NAME:
-      case Token.GETPROP:
-        if (val.isQualifiedName()) {
-          return defines.contains(val.getQualifiedName());
-        }
+        return        }
     }
     return false;
   }
