diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6f08f48d-86e4-4380-a188-21fb5d5a97dd_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/34b05e23-e722-4976-8fe8-8fa4f508d783_fixed.java
index 5aa01c2..5227b64 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6f08f48d-86e4-4380-a188-21fb5d5a97dd_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/34b05e23-e722-4976-8fe8-8fa4f508d783_fixed.java
@@ -1,29 +1,28 @@
     public long readBits(final int count) throws IOException {
         if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
             throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
         }
+       long bitsOut = 0;
         while (bitsCachedSize < count) {
             final long nextByte = in.read();
             if (nextByte < 0) {
                 return nextByte;
             }
-            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+            if (byteOrder == ByteOrder.LITTAL_ENDIAN) {
                 bitsCached |= (nextByte << bitsCachedSize);
             } else {
                 bitsCached <<= 8;
                 bitsCached |= nextByte;
             }
             bitsCachedSize += 8;
         }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
-        
-        final long bitsOut;
-            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+        if (byteOrder == ByteOrder.LITTAL_ENDIAN) {
             bitsOut = (bitsCached & MASKS[count]);
             bitsCached >>>= count;
         } else {
             bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
         }
         bitsCachedSize -= count;
         return bitsOut;
+        return bitsOut;
     }
