diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6a5048a9-dc07-4722-9b31-1d0eb60f337a_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/51f19fce-ce0c-4813-97f5-8020de736d30_fixed.java
index 8cbef3b..156dbc6 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6a5048a9-dc07-4722-9b31-1d0eb60f337a_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/51f19fce-ce0c-4813-97f5-8020de736d30_fixed.java
@@ -1,30 +1,29 @@
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
-        int len = Character.codePointCount(input, 0, input.length());
+       int length = input.length();
+        int len = Character.codePointCount(input, 0, length);
         while (pos < len) {
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
                 char[] c = Character.toChars(Character.codePointAt(input, pos));
                 out.write(c);
             }
             else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
             for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
+                    if (pos < length - 2) {
                 pos += Character.charCount(Character.codePointAt(input, pos));
                     } else {
                         pos++;
                     }
                 }
                 pos--;
             }
-            pos++;
+            pos += Character.charCount(Character.codePointAt(input, pos));
         }
     }
