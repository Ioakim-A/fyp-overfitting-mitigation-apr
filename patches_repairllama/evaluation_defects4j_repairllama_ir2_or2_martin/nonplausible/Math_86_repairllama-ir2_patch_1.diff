diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/748dde58-f205-48a3-a1be-caab3a1a0435_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/ca4458f4-8966-4990-a172-ec047421384a_fixed.java
index 2ea7a7c..38f50fe 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/748dde58-f205-48a3-a1be-caab3a1a0435_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/ca4458f4-8966-4990-a172-ec047421384a_fixed.java
@@ -1,59 +1,43 @@
     public CholeskyDecompositionImpl(final RealMatrix matrix,
                                      final double relativeSymmetryThreshold,
                                      final double absolutePositivityThreshold)
         throws NonSquareMatrixException,
                NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
-
         if (!matrix.isSquare()) {
             throw new NonSquareMatrixException(matrix.getRowDimension(),
                                                matrix.getColumnDimension());
         }
-
         final int order = matrix.getRowDimension();
         lTData   = matrix.getData();
         cachedL  = null;
         cachedLT = null;
-
-        // check the matrix before transformation
         for (int i = 0; i < order; ++i) {
-
             final double[] lI = lTData[i];
-
-            if (lTData[i][i] < absolutePositivityThreshold) {
+           if (lI[i] < absolutePositivityThreshold) {
                 throw new NotPositiveDefiniteMatrixException();
             }
-            // check off-diagonal elements (and reset them to 0)
             for (int j = i + 1; j < order; ++j) {
                 final double[] lJ = lTData[j];
                 final double lIJ = lI[j];
                 final double lJI = lJ[i];
                 final double maxDelta =
                     relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
                 if (Math.abs(lIJ - lJI) > maxDelta) {
                     throw new NotSymmetricMatrixException();
                 }
                 lJ[i] = 0;
            }
         }
-
-        // transform the matrix
         for (int i = 0; i < order; ++i) {
-
             final double[] ltI = lTData[i];
-
-            // check diagonal element
-
             ltI[i] = Math.sqrt(ltI[i]);
             final double inverse = 1.0 / ltI[i];
-
             for (int q = order - 1; q > i; --q) {
                 ltI[q] *= inverse;
                 final double[] ltQ = lTData[q];
                 for (int p = q; p < order; ++p) {
                     ltQ[p] -= ltI[q] * ltI[p];
                 }
             }
-
         }
-
     }
