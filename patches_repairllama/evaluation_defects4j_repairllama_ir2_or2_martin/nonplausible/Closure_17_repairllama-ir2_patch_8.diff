diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b09e7652-9299-4691-9849-d1acc8ba1265_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/81a28737-5ec4-4f0a-a5ab-b351af3a9ef1_fixed.java
index 4e0c7f9..709c882 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b09e7652-9299-4691-9849-d1acc8ba1265_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/81a28737-5ec4-4f0a-a5ab-b351af3a9ef1_fixed.java
@@ -1,51 +1,42 @@
     private JSType getDeclaredType(String sourceName, JSDocInfo info,
         Node lValue, @Nullable Node rValue) {
       if (info != null && info.hasType()) {
         return getDeclaredTypeInAnnotation(sourceName, lValue, info);
       } else if (rValue != null && rValue.isFunction() &&
           shouldUseFunctionLiteralType(
               JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
         return rValue.getJSType();
       } else if (info != null) {
         if (info.hasEnumParameterType()) {
           if (rValue != null && rValue.isObjectLit()) {
             return rValue.getJSType();
           } else {
             return createEnumTypeFromNodes(
                 rValue, lValue.getQualifiedName(), info, lValue);
           }
         } else if (info.isConstructor() || info.isInterface()) {
           return createFunctionTypeFromNodes(
               rValue, lValue.getQualifiedName(), info, lValue);
         } else {
-          // Check if this is constant, and if it has a known type.
           if (info.isConstant()) {
             JSType knownType = null;
             if (rValue != null) {
-              if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
-                // If rValue has a type-cast, we use the type in the type-cast.
-                // If rValue's type was already computed during scope creation,
-                // then we can safely use that.
+             if (!rValue.getJSType().isUnknownType()) {
                 return rValue.getJSType();
               } else if (rValue.isOr()) {
-                // Check for a very specific JS idiom:
-                // var x = x || TYPE;
-                // This is used by Closure's base namespace for esoteric
-                // reasons.
                 Node firstClause = rValue.getFirstChild();
                 Node secondClause = firstClause.getNext();
                 boolean namesMatch = firstClause.isName()
                     && lValue.isName()
                     && firstClause.getString().equals(lValue.getString());
                 if (namesMatch && secondClause.getJSType() != null
                     && !secondClause.getJSType().isUnknownType()) {
                   return secondClause.getJSType();
                 }
               }
             }
           }
         }
       }
-
       return getDeclaredTypeInAnnotation(sourceName, lValue, info);
     }
