diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d2693a02-e8c1-4d14-9b74-e60b87046533_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d24937c2-d8ec-4198-a315-4603131b9f65_fixed.java
index a19c4db..0becae4 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d2693a02-e8c1-4d14-9b74-e60b87046533_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d24937c2-d8ec-4198-a315-4603131b9f65_fixed.java
@@ -1,32 +1,33 @@
     public KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,
             JavaType type)
         throws JsonMappingException
     {
         final DeserializationConfig config = ctxt.getConfig();
         KeyDeserializer deser = null;
         if (_factoryConfig.hasKeyDeserializers()) {
             BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());
             for (KeyDeserializers d  : _factoryConfig.keyDeserializers()) {
                 deser = d.findKeyDeserializer(type, config, beanDesc);
                 if (deser != null) {
                     break;
                 }
             }
         }
-        // the only non-standard thing is this:
         if (deser == null) {
             if (type.isEnumType()) {
-                return _createEnumKeyDeserializer(ctxt, type);
+               deser = new EnumKeyDeserializer(type.getRawClass());
+            } else if (type.isPrimitive()) {
+                deser = new PrimitiveKeyDeserializer(type.getRawClass());
+            } else {
+                deser = new StringKeyDeserializer();
             }
-            deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);
         }
-        // and then post-processing
         if (deser != null) {
             if (_factoryConfig.hasDeserializerModifiers()) {
                 for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {
                     deser = mod.modifyKeyDeserializer(config, type, deser);
                 }
             }
         }
         return deser;
     }
