diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9de0847e-9c8d-447c-b14b-cae858c0052e_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/400a39bb-35f3-4cbb-a393-20a9f1fa4c7c_fixed.java
index 2ea7a7c..9887f06 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9de0847e-9c8d-447c-b14b-cae858c0052e_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/400a39bb-35f3-4cbb-a393-20a9f1fa4c7c_fixed.java
@@ -1,59 +1,43 @@
     public CholeskyDecompositionImpl(final RealMatrix matrix,
                                      final double relativeSymmetryThreshold,
                                      final double absolutePositivityThreshold)
         throws NonSquareMatrixException,
                NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
-
         if (!matrix.isSquare()) {
             throw new NonSquareMatrixException(matrix.getRowDimension(),
                                                matrix.getColumnDimension());
         }
-
         final int order = matrix.getRowDimension();
         lTData   = matrix.getData();
         cachedL  = null;
         cachedLT = null;
-
-        // check the matrix before transformation
         for (int i = 0; i < order; ++i) {
-
             final double[] lI = lTData[i];
-
-            if (lTData[i][i] < absolutePositivityThreshold) {
-                throw new NotPositiveDefiniteMatrixException();
+           for (int j = 0; j < i; ++j) {
+                lI[j] = 0.0;
             }
-            // check off-diagonal elements (and reset them to 0)
+            lI[i] = 1.0;
             for (int j = i + 1; j < order; ++j) {
-                final double[] lJ = lTData[j];
-                final double lIJ = lI[j];
-                final double lJI = lJ[i];
-                final double maxDelta =
-                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
-                if (Math.abs(lIJ - lJI) > maxDelta) {
-                    throw new NotSymmetricMatrixException();
+                lI[j] = matrix.getEntry(i, j);
             }
-                lJ[i] = 0;
         }
-        }
-
-        // transform the matrix
         for (int i = 0; i < order; ++i) {
-
             final double[] ltI = lTData[i];
-
-            // check diagonal element
-
+            for (int j = 0; j < i; ++j) {
+                ltI[j] = 0.0;
+            }
+            ltI[i] = 1.0;
+            for (int j = i + 1; j < order; ++j) {
+                ltI[j] = lTData[j][i];
+            }
             ltI[i] = Math.sqrt(ltI[i]);
             final double inverse = 1.0 / ltI[i];
-
             for (int q = order - 1; q > i; --q) {
                 ltI[q] *= inverse;
                 final double[] ltQ = lTData[q];
                 for (int p = q; p < order; ++p) {
                     ltQ[p] -= ltI[q] * ltI[p];
                 }
             }
-
         }
-
     }
