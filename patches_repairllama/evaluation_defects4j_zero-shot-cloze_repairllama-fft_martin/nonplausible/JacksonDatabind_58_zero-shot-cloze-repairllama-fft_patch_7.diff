diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9589d5f9-2ee6-4e0f-9559-e93d7a947c10_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a50684eb-191c-4880-8485-5324688b179b_fixed.java
index f6ab1c7..c27a0a2 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9589d5f9-2ee6-4e0f-9559-e93d7a947c10_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a50684eb-191c-4880-8485-5324688b179b_fixed.java
@@ -1,50 +1,45 @@
     protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt,
             BeanDescription beanDesc, BeanPropertyDefinition propDef,
             JavaType propType0)
         throws JsonMappingException
     {
-        // need to ensure method is callable (for non-public)
         AnnotatedMember mutator = propDef.getNonConstructorMutator();
-
         if (ctxt.canOverrideAccessModifiers()) {
-            // [databind#877]: explicitly prevent forced access to `cause` of `Throwable`;
-            // never needed and attempts may cause problems on some platforms.
-            // !!! NOTE: should be handled better for 2.8 and later
-                mutator.fixAccess(ctxt.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
+// buggy code
+//                mutator.fixAccess(ctxt.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
+//                mutator.fixAccess(ctxt.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
+                mutator.fixAccess(true);
+                mutator.fixAccess(true);
+
         }
-        // note: this works since we know there's exactly one argument for methods
         BeanProperty.Std property = new BeanProperty.Std(propDef.getFullName(),
                 propType0, propDef.getWrapperName(),
                 beanDesc.getClassAnnotations(), mutator, propDef.getMetadata());
         JavaType type = resolveType(ctxt, beanDesc, propType0, mutator);
-        // did type change?
         if (type != propType0) {
             property = property.withType(type);
         }
-
-        // First: does the Method specify the deserializer to use? If so, let's use it.
         JsonDeserializer<Object> propDeser = findDeserializerFromAnnotation(ctxt, mutator);
         type = modifyTypeByAnnotation(ctxt, mutator, type);
         TypeDeserializer typeDeser = type.getTypeHandler();
         SettableBeanProperty prop;
         if (mutator instanceof AnnotatedMethod) {
             prop = new MethodProperty(propDef, type, typeDeser,
                     beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);
         } else {
             prop = new FieldProperty(propDef, type, typeDeser,
                     beanDesc.getClassAnnotations(), (AnnotatedField) mutator);
         }
         if (propDeser != null) {
             prop = prop.withValueDeserializer(propDeser);
         }
-        // need to retain name of managed forward references:
         AnnotationIntrospector.ReferenceProperty ref = propDef.findReferenceType();
         if (ref != null && ref.isManagedReference()) {
             prop.setManagedReferenceName(ref.getName());
         }
         ObjectIdInfo objectIdInfo = propDef.findObjectIdInfo();
         if(objectIdInfo != null){
             prop.setObjectIdInfo(objectIdInfo);
         }
         return prop;
     }
