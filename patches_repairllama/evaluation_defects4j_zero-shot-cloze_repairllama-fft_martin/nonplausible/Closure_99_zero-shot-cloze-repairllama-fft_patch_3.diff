diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1096c1f7-bb79-4e09-8b03-1c7d5ded1361_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/17ae0b62-a6e3-4243-864f-a45f1e6cc92b_fixed.java
index 26bd607..4fb7318 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1096c1f7-bb79-4e09-8b03-1c7d5ded1361_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/17ae0b62-a6e3-4243-864f-a45f1e6cc92b_fixed.java
@@ -1,53 +1,65 @@
   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
-
     if (n.getType() == Token.FUNCTION) {
-      // Don't traverse functions that are constructors or have the @this
-      // or @override annotation.
       JSDocInfo jsDoc = getFunctionJsDocInfo(n);
       if (jsDoc != null &&
           (jsDoc.isConstructor() ||
-           jsDoc.hasThisType() ||
-           jsDoc.isOverride())) {
+// buggy code
+//           jsDoc.hasThisType() ||
+//           jsDoc.isOverride())) {
+//        return false;
+//      }
+//      int pType = parent.getType();
+//      if (!(pType == Token.BLOCK ||
+//            pType == Token.SCRIPT ||
+//            pType == Token.NAME ||
+//            pType == Token.ASSIGN)) {
+//        return false;
+//      }
+//    }
+//    if (parent != null && parent.getType() == Token.ASSIGN) {
+//      Node lhs = parent.getFirstChild();
+//      Node rhs = lhs.getNext();
+//      if (n == lhs) {
+//        if (assignLhsChild == null) {
+//          assignLhsChild = lhs;
+//        }
+//      } else {
+//          if (lhs.getType() == Token.GETPROP &&
+//              lhs.getLastChild().getString().equals("prototype")) {
+//            return false;
+//          }
+//          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
+//            return false;
+//          }
+//      }
+      jsDoc.isOverride() ||
+          jsDoc.hasThisType())) {
         return false;
       }
-
-      // Don't traverse functions unless they would normally
-      // be able to have a @this annotation associated with them. e.g.,
-      // var a = function() { }; // or
-      // function a() {} // or
-      // a.x = function() {};
       int pType = parent.getType();
       if (!(pType == Token.BLOCK ||
             pType == Token.SCRIPT ||
             pType == Token.NAME ||
             pType == Token.ASSIGN)) {
         return false;
       }
     }
-
     if (parent != null && parent.getType() == Token.ASSIGN) {
       Node lhs = parent.getFirstChild();
       Node rhs = lhs.getNext();
-      
       if (n == lhs) {
-        // Always traverse the left side of the assignment. To handle
-        // nested assignments properly (e.g., (a = this).property = c;),
-        // assignLhsChild should not be overridden.
         if (assignLhsChild == null) {
           assignLhsChild = lhs;
         }
       } else {
-        // Only traverse the right side if it's not an assignment to a prototype
-        // property or subproperty.
           if (lhs.getType() == Token.GETPROP &&
               lhs.getLastChild().getString().equals("prototype")) {
             return false;
           }
           if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
             return false;
           }
       }
     }
-
     return true;
   }
