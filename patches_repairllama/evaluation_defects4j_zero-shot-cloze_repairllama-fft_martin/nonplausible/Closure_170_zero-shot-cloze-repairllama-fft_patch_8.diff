diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/13693612-34c4-4f38-bef5-4a646165a974_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6f7fab18-a2f5-42d8-8020-88bf13372268_fixed.java
index a0eee42..0d97c22 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/13693612-34c4-4f38-bef5-4a646165a974_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6f7fab18-a2f5-42d8-8020-88bf13372268_fixed.java
@@ -1,25 +1,22 @@
     private void getNumUseInUseCfgNode(final Node cfgNode) {
-
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
-
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
+// buggy code
+//          if (n.isName() && n.getString().equals(varName) &&
+//              !(parent.isAssign() &&
+//               (parent.getFirstChild() == n))) {
+//              numUsesWithinCfgNode++;
+//          }
          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+              !(n.getParent().isAssign() &&
+               (n.getParent().getFirstChild() == n))) {
               numUsesWithinCfgNode++;
           }
-        }
 
+        }
       };
-
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
