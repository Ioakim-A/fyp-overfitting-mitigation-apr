diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6e49538d-c94e-439b-b0ce-bff108a78113_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1ba4659d-3e39-469b-b640-e08c547c93f5_fixed.java
index dfceb86..d39ab11 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6e49538d-c94e-439b-b0ce-bff108a78113_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1ba4659d-3e39-469b-b640-e08c547c93f5_fixed.java
@@ -1,54 +1,70 @@
   String getReadableJSTypeName(Node n, boolean dereference) {
-
-    // The best type name is the actual type name.
-
-    // If we're analyzing a GETPROP, the property may be inherited by the
-    // prototype chain. So climb the prototype chain and find out where
-    // the property was originally defined.
-    if (n.isGetProp()) {
-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();
-      if (objectType != null) {
-        String propName = n.getLastChild().getString();
-        if (objectType.getConstructor() != null &&
-            objectType.getConstructor().isInterface()) {
-          objectType = FunctionType.getTopDefiningInterface(
-              objectType, propName);
-        } else {
-          // classes
-          while (objectType != null && !objectType.hasOwnProperty(propName)) {
-            objectType = objectType.getImplicitPrototype();
-          }
-        }
-
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
-        if (objectType != null &&
-            (objectType.getConstructor() != null ||
-             objectType.isFunctionPrototypeType())) {
-          return objectType.toString() + "." + propName;
-        }
-      }
-    }
-
+// buggy code
+//    if (n.isGetProp()) {
+//      ObjectType objectType = getJSType(n.getFirstChild()).dereference();
+//      if (objectType != null) {
+//        String propName = n.getLastChild().getString();
+//        if (objectType.getConstructor() != null &&
+//            objectType.getConstructor().isInterface()) {
+//          objectType = FunctionType.getTopDefiningInterface(
+//              objectType, propName);
+//        } else {
+//          while (objectType != null && !objectType.hasOwnProperty(propName)) {
+//            objectType = objectType.getImplicitPrototype();
+//          }
+//        }
+//        if (objectType != null &&
+//            (objectType.getConstructor() != null ||
+//             objectType.isFunctionPrototypeType())) {
+//          return objectType.toString() + "." + propName;
+//        }
+//      }
+//    }
+//    JSType type = getJSType(n);
+//    if (dereference) {
+//      ObjectType dereferenced = type.dereference();
+//      if (dereferenced != null) {
+//        type = dereferenced;
+//      }
+//    }
+//    if (type.isFunctionPrototypeType() ||
+//        (type.toObjectType() != null &&
+//         type.toObjectType().getConstructor() != null)) {
+//      return type.toString();
+//    }
+   if (!n.isGetProp()) {
       JSType type = getJSType(n);
       if (dereference) {
         ObjectType dereferenced = type.dereference();
         if (dereferenced != null) {
           type = dereferenced;
         }
       }
       if (type.isFunctionPrototypeType() ||
           (type.toObjectType() != null &&
            type.toObjectType().getConstructor() != null)) {
         return type.toString();
       }
+    }
+    JSType type = getJSType(n.getFirstChild());
+    if (dereference) {
+      ObjectType dereferenced = type.dereference();
+      if (dereferenced != null) {
+        type = dereferenced;
+      }
+    }
+    if (type.isFunctionPrototypeType() ||
+        (type.toObjectType() != null &&
+         type.toObjectType().getConstructor() != null)) {
+      return type.toString();
+    }
+
     String qualifiedName = n.getQualifiedName();
     if (qualifiedName != null) {
       return qualifiedName;
     } else if (type.isFunctionType()) {
-      // Don't show complex function names.
       return "function";
     } else {
       return type.toString();
     }
   }
