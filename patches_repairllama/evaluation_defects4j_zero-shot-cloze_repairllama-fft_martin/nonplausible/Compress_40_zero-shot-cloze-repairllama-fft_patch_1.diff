diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/148c8f82-72ed-4c7a-bc49-c2750ca9897b_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0bcd1b11-f09c-4e6e-a4e4-b6079b04a05f_fixed.java
index 5aa01c2..757cd9b 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/148c8f82-72ed-4c7a-bc49-c2750ca9897b_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0bcd1b11-f09c-4e6e-a4e4-b6079b04a05f_fixed.java
@@ -1,29 +1,51 @@
     public long readBits(final int count) throws IOException {
         if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
             throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
         }
+// buggy code
+//        while (bitsCachedSize < count) {
+//            final long nextByte = in.read();
+//            if (nextByte < 0) {
+//                return nextByte;
+//            }
+//            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+//                bitsCached |= (nextByte << bitsCachedSize);
+//            } else {
+//                bitsCached <<= 8;
+//                bitsCached |= nextByte;
+//            }
+//            bitsCachedSize += 8;
+//        }
+//        final long bitsOut;
+//            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+//                bitsOut = (bitsCached & MASKS[count]);
+//                bitsCached >>>= count;
+//            } else {
+//                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+//            }
+//            bitsCachedSize -= count;
+//        return bitsOut;
+        final long bitsOut;
         while (bitsCachedSize < count) {
             final long nextByte = in.read();
             if (nextByte < 0) {
                 return nextByte;
             }
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
                 bitsCached |= (nextByte << bitsCachedSize);
             } else {
                 bitsCached <<= 8;
                 bitsCached |= nextByte;
             }
             bitsCachedSize += 8;
         }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
-        
-        final long bitsOut;
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
             bitsOut = (bitsCached & MASKS[count]);
             bitsCached >>>= count;
         } else {
             bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
         }
         bitsCachedSize -= count;
+
         return bitsOut;
     }
