diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/ac3c5edd-5b71-4836-8171-5a3b8a861cbe_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4629c1f0-32aa-4739-bf64-d60dec21607c_fixed.java
index dde7e35..9d8f362 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/ac3c5edd-5b71-4836-8171-5a3b8a861cbe_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4629c1f0-32aa-4739-bf64-d60dec21607c_fixed.java
@@ -1,19 +1,22 @@
   static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
       TypeToken<?> fieldType, JsonAdapter annotation) {
     Class<?> value = annotation.value();
     TypeAdapter<?> typeAdapter;
     if (TypeAdapter.class.isAssignableFrom(value)) {
       Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
     } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
       Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
           .construct()
           .create(gson, fieldType);
     } else {
       throw new IllegalArgumentException(
           "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
     }
-      typeAdapter = typeAdapter.nullSafe();
+// buggy code
+//      typeAdapter = typeAdapter.nullSafe();
+   typeAdapter = typeAdapter.nullSafe().withAdaptee(fieldType);
+
     return typeAdapter;
   }
