diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/82d332f3-231e-4190-b0c2-f5c89d381ec7_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/97c2cf4c-a86b-4348-87ac-fd2b7627ee40_fixed.java
index cba47b8..ef2c167 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/82d332f3-231e-4190-b0c2-f5c89d381ec7_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/97c2cf4c-a86b-4348-87ac-fd2b7627ee40_fixed.java
@@ -1,77 +1,29 @@
     public Fraction parse(String source, ParsePosition pos) {
-        // try to parse improper fraction
         Fraction ret = super.parse(source, pos);
         if (ret != null) {
             return ret;
         }
-        
         int initialIndex = pos.getIndex();
-
-        // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
-
-        // parse whole
         Number whole = getWholeFormat().parse(source, pos);
         if (whole == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
-
-        // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
-        
-        // parse numerator
         Number num = getNumeratorFormat().parse(source, pos);
         if (num == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
-            pos.setIndex(initialIndex);
+           pos.setErrorIndex(pos.getIndex());
             return null;
         }
-        
-            // minus signs should be leading, invalid expression
-
-        // parse '/'
-        int startIndex = pos.getIndex();
-        char c = parseNextCharacter(source, pos);
-        switch (c) {
-        case 0 :
-            // no '/'
-            // return num as a fraction
-            return new Fraction(num.intValue(), 1);
-        case '/' :
-            // found '/', continue parsing denominator
-            break;
-        default :
-            // invalid '/'
-            // set index back to initial, error index should be the last
-            // character examined.
-            pos.setIndex(initialIndex);
-            pos.setErrorIndex(startIndex);
-            return null;
-        }
-
-        // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
-
-        // parse denominator
         Number den = getDenominatorFormat().parse(source, pos);
         if (den == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
-            pos.setIndex(initialIndex);
+            pos.setErrorIndex(pos.getIndex());
             return null;
         }
-        
-            // minus signs must be leading, invalid
-
         int w = whole.intValue();
         int n = num.intValue();
         int d = den.intValue();
         return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
     }
