diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/896e2ed2-f1c2-4b31-8ec1-4464f14f690a_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/836de1d3-d2e0-4fb5-a57e-c9c0ac38978c_fixed.java
index 6c55d7a..1cadccd 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/896e2ed2-f1c2-4b31-8ec1-4464f14f690a_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/836de1d3-d2e0-4fb5-a57e-c9c0ac38978c_fixed.java
@@ -1,19 +1,4 @@
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
-
-
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
+     return new Vector3D(v1.getY() * v2.getZ() - v1.getZ() * v2.getY(), v1.getZ() * v2.getX() - v1.getX() * v2.getZ(),
+                          v1.getX() * v2.getY() - v1.getY() * v2.getX());
   }
