diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/139529a3-5fc8-4a6d-aa21-43fabb914f90_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4015a535-279a-42eb-9314-a5f3e573d0cd_fixed.java
index f9a9b5b..18ad89f 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/139529a3-5fc8-4a6d-aa21-43fabb914f90_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4015a535-279a-42eb-9314-a5f3e573d0cd_fixed.java
@@ -1,30 +1,25 @@
     public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
         if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
             throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
         }
         Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
                 settings.getTypeToMock(),
                 settings.getExtraInterfaces()
         );
-        T mockInstance = null;
        try {
-            mockInstance = classInstantiator.instantiate(mockedProxyType);
-            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
-            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
-
-            return ensureMockIsAssignableToMockedType(settings, mockInstance);
+            return mockedProxyType.newInstance();
+        } catch (InstantiationException e) {
+            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+        } catch (IllegalAccessException iae) {
+            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", iae);
         } catch (ClassCastException cce) {
-            throw new MockitoException(join(
-                    "ClassCastException occurred while creating the mockito mock :",
-                    "  class to mock : " + describeClass(mockedProxyType),
-                    "  created class : " + describeClass(settings.getTypeToMock()),
-                    "  proxy instance class : " + describeClass(mockInstance),
-                    "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
+            throw new MockitoException(String.format(
+                    "Unable to create mock instance of type '%s'.\n" +
                     "",
                     "You might experience classloading issues, please ask the mockito mailing-list.",
                     ""
             ),cce);
         } catch (org.mockito.internal.creation.instance.InstantiationException e) {
             throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
         }
     }
