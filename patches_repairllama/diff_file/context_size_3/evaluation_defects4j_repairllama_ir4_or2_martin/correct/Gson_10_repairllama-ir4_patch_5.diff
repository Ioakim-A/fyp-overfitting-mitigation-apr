diff --git gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
index ab1d05a..27a91a9 100644
--- gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
+++ gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
@@ -104,7 +104,6 @@ public final class ReflectiveTypeAdapterFactory implements TypeAdapterFactory {
       final Gson context, final Field field, final String name,
       final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
     final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
-    // special casing primitives here saves ~5% on Android...
     JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
     TypeAdapter<?> mapped = null;
     if (annotation != null) {
@@ -112,15 +111,19 @@ public final class ReflectiveTypeAdapterFactory implements TypeAdapterFactory {
     }
     final boolean jsonAdapterPresent = mapped != null;
     if (mapped == null) mapped = context.getAdapter(fieldType);
-
     final TypeAdapter<?> typeAdapter = mapped;
     return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
-      @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
+      @SuppressWarnings({"unchecked", "rawtypes"}) 
       @Override void write(JsonWriter writer, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = field.get(value);
-        TypeAdapter t =
-          new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
+// buggy code
+//         TypeAdapter t =
+//           new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
+       TypeAdapter t = typeAdapter;
+        if (!jsonAdapterPresent) {
+          t = new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
+        }
         t.write(writer, fieldValue);
       }
       @Override void read(JsonReader reader, Object value)
@@ -133,7 +136,7 @@ public final class ReflectiveTypeAdapterFactory implements TypeAdapterFactory {
       @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
         if (!serialized) return false;
         Object fieldValue = field.get(value);
-        return fieldValue != value; // avoid recursion for example for Throwable.cause
+        return fieldValue != value; 
       }
     };
   }
