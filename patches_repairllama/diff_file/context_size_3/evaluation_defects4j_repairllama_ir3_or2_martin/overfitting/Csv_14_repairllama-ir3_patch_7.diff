diff --git src/main/java/org/apache/commons/csv/CSVFormat.java src/main/java/org/apache/commons/csv/CSVFormat.java
index 35ee86a..156296e 100644
--- src/main/java/org/apache/commons/csv/CSVFormat.java
+++ src/main/java/org/apache/commons/csv/CSVFormat.java
@@ -1004,10 +1004,8 @@ public final class CSVFormat implements Serializable {
         int start = offset;
         int pos = offset;
         final int end = offset + len;
-
         final char delimChar = getDelimiter();
         final char quoteChar = getQuoteCharacter().charValue();
-
         QuoteMode quoteModePolicy = getQuoteMode();
         if (quoteModePolicy == null) {
             quoteModePolicy = QuoteMode.MINIMAL;
@@ -1020,28 +1018,18 @@ public final class CSVFormat implements Serializable {
             quote = !(object instanceof Number);
             break;
         case NONE:
-            // Use the existing escaping code
             printAndEscape(value, offset, len, out);
             return;
         case MINIMAL:
             if (len <= 0) {
-                // always quote an empty token that is the first
-                // on the line, as it may be the only thing on the
-                // line. If it were not quoted in that case,
-                // an empty line has no tokens.
                 if (newRecord) {
                     quote = true;
                 }
             } else {
                 char c = value.charAt(pos);
-
-                // RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E
-                if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {
+               if (c <= SP || c == quoteChar || c == delimChar) {
                     quote = true;
                 } else if (c <= COMMENT) {
-                    // Some other chars at the start of a value caused the parser to fail, so for now
-                    // encapsulate if we start in anything less than '#'. We are being conservative
-                    // by including the default comment char too.
                     quote = true;
                 } else {
                     while (pos < end) {
@@ -1052,21 +1040,16 @@ public final class CSVFormat implements Serializable {
                         }
                         pos++;
                     }
-
                     if (!quote) {
                         pos = end - 1;
                         c = value.charAt(pos);
-                        // Some other chars at the end caused the parser to fail, so for now
-                        // encapsulate if we end in anything less than ' '
                         if (c <= SP) {
                             quote = true;
                         }
                     }
                 }
             }
-
             if (!quote) {
-                // no encapsulation needed - write out the original value
                 out.append(value, start, end);
                 return;
             }
@@ -1074,33 +1057,19 @@ public final class CSVFormat implements Serializable {
         default:
             throw new IllegalStateException("Unexpected Quote value: " + quoteModePolicy);
         }
-
         if (!quote) {
-            // no encapsulation needed - write out the original value
             out.append(value, start, end);
             return;
         }
-
-        // we hit something that needed encapsulation
         out.append(quoteChar);
-
-        // Pick up where we left off: pos should be positioned on the first character that caused
-        // the need for encapsulation.
         while (pos < end) {
             final char c = value.charAt(pos);
             if (c == quoteChar) {
-                // write out the chunk up until this point
-
-                // add 1 to the length to write out the encapsulator also
                 out.append(value, start, pos + 1);
-                // put the next starting position on the encapsulator so we will
-                // write it out again with the next string (effectively doubling it)
                 start = pos;
             }
             pos++;
         }
-
-        // write the last segment
         out.append(value, start, pos);
         out.append(quoteChar);
     }
