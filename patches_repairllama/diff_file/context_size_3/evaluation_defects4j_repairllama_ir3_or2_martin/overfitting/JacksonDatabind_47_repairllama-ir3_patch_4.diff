diff --git src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
index dab3227..fa85552 100644
--- src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
+++ src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
@@ -797,26 +797,22 @@ public abstract class AnnotationIntrospector
     {
         JavaType type = baseType;
         final TypeFactory tf = config.getTypeFactory();
-        
-        // 10-Oct-2015, tatu: For 2.7, we'll need to delegate back to
-        //    now-deprecated secondary methods; this because while
-        //    direct sub-class not yet retrofitted may only override
-        //    those methods. With 2.8 or later we may consider removal
-        //    of these methods
-
-        
-        // Ok: start by refining the main type itself; common to all types
         Class<?> serClass = findSerializationType(a);
         if (serClass != null) {
             if (type.hasRawClass(serClass)) {
-                // 30-Nov-2015, tatu: As per [databind#1023], need to allow forcing of
-                //    static typing this way
                 type = type.withStaticTyping();
             } else {
+               Class<?> currRaw = type.getRawClass();
                 try {
-                    // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,
-                    //   may be needed here too in future?
+                    if (serClass.isAssignableFrom(currRaw)) { 
                         type = tf.constructGeneralizedType(type, serClass);
+                    } else if (currRaw.isAssignableFrom(serClass)) { 
+                        type = tf.constructSpecializedType(type, serClass);
+                    } else {
+                        throw new JsonMappingException(null,
+                                String.format("Can not refine type %s into %s; types not related",
+                                        type, serClass.getName()));
+                    }
                 } catch (IllegalArgumentException iae) {
                     throw new JsonMappingException(null,
                             String.format("Failed to widen type %s with annotation (value %s), from '%s': %s",
@@ -825,9 +821,6 @@ public abstract class AnnotationIntrospector
                 }
             }
         }
-        // Then further processing for container types
-
-        // First, key type (for Maps, Map-like types):
         if (type.isMapLikeType()) {
             JavaType keyType = type.getKeyType();
             Class<?> keyClass = findSerializationKeyType(a, keyType);
@@ -837,12 +830,9 @@ public abstract class AnnotationIntrospector
                 } else {
                     Class<?> currRaw = keyType.getRawClass();
                     try {
-                        // 19-May-2016, tatu: As per [databind#1231], [databind#1178] may need to actually
-                        //   specialize (narrow) type sometimes, even if more commonly opposite
-                        //   is needed.
-                        if (keyClass.isAssignableFrom(currRaw)) { // common case
+                        if (keyClass.isAssignableFrom(currRaw)) { 
                             keyType = tf.constructGeneralizedType(keyType, keyClass);
-                        } else if (currRaw.isAssignableFrom(keyClass)) { // specialization, ok as well
+                        } else if (currRaw.isAssignableFrom(keyClass)) { 
                             keyType = tf.constructSpecializedType(keyType, keyClass);
                         } else {
                             throw new JsonMappingException(null,
@@ -859,30 +849,25 @@ public abstract class AnnotationIntrospector
                 type = ((MapLikeType) type).withKeyType(keyType);
             }
         }
-
         JavaType contentType = type.getContentType();
-        if (contentType != null) { // collection[like], map[like], array, reference
-            // And then value types for all containers:
+        if (contentType != null) { 
            Class<?> contentClass = findSerializationContentType(a, contentType);
            if (contentClass != null) {
                if (contentType.hasRawClass(contentClass)) {
                    contentType = contentType.withStaticTyping();
                } else {
-                   // 03-Apr-2016, tatu: As per [databind#1178], may need to actually
-                   //   specialize (narrow) type sometimes, even if more commonly opposite
-                   //   is needed.
                    Class<?> currRaw = contentType.getRawClass();
                    try {
-                       if (contentClass.isAssignableFrom(currRaw)) { // common case
+                       if (contentClass.isAssignableFrom(currRaw)) { 
                            contentType = tf.constructGeneralizedType(contentType, contentClass);
-                       } else if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well
+                       } else if (currRaw.isAssignableFrom(contentClass)) { 
                            contentType = tf.constructSpecializedType(contentType, contentClass);
                        } else {
                            throw new JsonMappingException(null,
                                    String.format("Can not refine serialization content type %s into %s; types not related",
                                            contentType, contentClass.getName()));
                        }
-                   } catch (IllegalArgumentException iae) { // shouldn't really happen
+                   } catch (IllegalArgumentException iae) { 
                        throw new JsonMappingException(null,
                                String.format("Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s",
                                        type, contentClass.getName(), a.getName(), iae.getMessage()),
