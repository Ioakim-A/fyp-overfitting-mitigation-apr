diff --git src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
index 492cd98..6649ef3 100644
--- src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
+++ src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
@@ -64,9 +64,14 @@ public abstract class DateTimeSerializerBase<T>
     {
         // Note! Should not skip if `property` null since that'd skip check
         // for config overrides, in case of root value
-        if (property == null) {
+// buggy code
+//        if (property == null) {
+//            return this;
+//        }
+        if (property == null && handledType() == null) {
             return this;
         }
+
         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
         if (format == null) {
             return this;
@@ -76,7 +81,6 @@ public abstract class DateTimeSerializerBase<T>
         if (shape.isNumeric()) {
             return withFormat(Boolean.TRUE, null);
         }
-
         // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
         // First: custom pattern will override things
         if (format.hasPattern()) {
@@ -89,16 +93,13 @@ public abstract class DateTimeSerializerBase<T>
             df.setTimeZone(tz);
             return withFormat(Boolean.FALSE, df);
         }
-
         // Otherwise, need one of these changes:
         final boolean hasLocale = format.hasLocale();
         final boolean hasTZ = format.hasTimeZone();
         final boolean asString = (shape == JsonFormat.Shape.STRING);
-
         if (!hasLocale && !hasTZ && !asString) {
             return this;
         }
-
         DateFormat df0 = serializers.getConfig().getDateFormat();
         // Jackson's own `StdDateFormat` is quite easy to deal with...
         if (df0 instanceof StdDateFormat) {
@@ -111,7 +112,6 @@ public abstract class DateTimeSerializerBase<T>
             }
             return withFormat(Boolean.FALSE, std);
         }
-
         // 08-Jun-2017, tatu: Unfortunately there's no generally usable
         //    mechanism for changing `DateFormat` instances (or even clone()ing)
         //    So: require it be `SimpleDateFormat`; can't config other types
