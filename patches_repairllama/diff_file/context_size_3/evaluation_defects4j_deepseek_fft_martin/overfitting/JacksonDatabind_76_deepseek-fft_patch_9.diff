diff --git src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java
index 1629a42..089ca23 100644
--- src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java
+++ src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java
@@ -569,10 +569,8 @@ public class BuilderBasedDeserializer
     {
         final PropertyBasedCreator creator = _propertyBasedCreator;
         PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
-
         TokenBuffer tokens = new TokenBuffer(p, ctxt);
         tokens.writeStartObject();
-
         JsonToken t = p.getCurrentToken();
         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
             String propName = p.getCurrentName();
@@ -580,27 +578,32 @@ public class BuilderBasedDeserializer
             // creator property?
             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
             if (creatorProp != null) {
+// buggy code
+//                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
+//                    t = p.nextToken();
+//                    Object bean;
+//                    try {
+//                        bean = creator.build(ctxt, buffer);
+//                    } catch (Exception e) {
+//                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
+//                        continue;
+//                    }
+//                    while (t == JsonToken.FIELD_NAME) {
+//                        p.nextToken();
+//                        tokens.copyCurrentStructure(p);
+//                        t = p.nextToken();
+//                    }
+//                    tokens.writeEndObject();
+//                    if (bean.getClass() != _beanType.getRawClass()) {
+//                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
+//                        return null;
+//                    }
+//                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
+//                }
                 if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
-                    t = p.nextToken();
-                    Object bean;
-                    try {
-                        bean = creator.build(ctxt, buffer);
-                    } catch (Exception e) {
-                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
                     continue;
                 }
-                    while (t == JsonToken.FIELD_NAME) {
-                        p.nextToken();
-                        tokens.copyCurrentStructure(p);
-                        t = p.nextToken();
-                    }
-                    tokens.writeEndObject();
-                    if (bean.getClass() != _beanType.getRawClass()) {
-                        ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
-                        return null;
-                    }
-                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
-                }
+
                 continue;
             }
             // Object Id property?
@@ -624,7 +627,6 @@ public class BuilderBasedDeserializer
                 buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
             }
         }
-
         // We hit END_OBJECT, so:
         Object bean;
         // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
