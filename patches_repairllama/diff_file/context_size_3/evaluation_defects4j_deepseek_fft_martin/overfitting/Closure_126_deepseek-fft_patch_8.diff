diff --git src/com/google/javascript/jscomp/MinimizeExitPoints.java src/com/google/javascript/jscomp/MinimizeExitPoints.java
index 4146f17..e2db476 100644
--- src/com/google/javascript/jscomp/MinimizeExitPoints.java
+++ src/com/google/javascript/jscomp/MinimizeExitPoints.java
@@ -104,14 +104,12 @@ class MinimizeExitPoints
    * @nullable labelName non-null only for breaks within labels.
    */
   void tryMinimizeExits(Node n, int exitType, String labelName) {
-
     // Just an 'exit'.
     if (matchingExitNode(n, exitType, labelName)) {
       NodeUtil.removeChild(n.getParent(), n);
       compiler.reportCodeChange();
       return;
     }
-
     // Just an 'if'.
     if (n.isIf()) {
       Node ifBlock = n.getFirstChild().getNext();
@@ -122,7 +120,6 @@ class MinimizeExitPoints
       }
       return;
     }
-
     // Just a 'try/catch/finally'.
     if (n.isTry()) {
       Node tryBlock = n.getFirstChild();
@@ -138,42 +135,38 @@ class MinimizeExitPoints
        * can cause problems if it changes the completion type of the finally
        * block. See ECMA 262 Sections 8.9 & 12.14
        */
-      if (NodeUtil.hasFinally(n)) {
-        Node finallyBlock = n.getLastChild();
-        tryMinimizeExits(finallyBlock, exitType, labelName);
-      }
-    }
+// buggy code
+//      if (NodeUtil.hasFinally(n)) {
+//        Node finallyBlock = n.getLastChild();
+//        tryMinimizeExits(finallyBlock, exitType, labelName);
+//      }
+      return;
 
+    }
     // Just a 'label'.
     if (n.isLabel()) {
       Node labelBlock = n.getLastChild();
       tryMinimizeExits(labelBlock, exitType, labelName);
     }
-
     // TODO(johnlenz): The last case of SWITCH statement?
-
     // The rest assumes a block with at least one child, bail on anything else.
     if (!n.isBlock() || n.getLastChild() == null) {
       return;
     }
-
     // Multiple if-exits can be converted in a single pass.
     // Convert "if (blah) break;  if (blah2) break; other_stmt;" to
     // become "if (blah); else { if (blah2); else { other_stmt; } }"
     // which will get converted to "if (!blah && !blah2) { other_stmt; }".
     for (Node c : n.children()) {
-
       // An 'if' block to process below.
       if (c.isIf()) {
         Node ifTree = c;
         Node trueBlock, falseBlock;
-
         // First, the true condition block.
         trueBlock = ifTree.getFirstChild().getNext();
         falseBlock = trueBlock.getNext();
         tryMinimizeIfBlockExits(trueBlock, falseBlock,
             ifTree, exitType, labelName);
-
         // Now the else block.
         // The if blocks may have changed, get them again.
         trueBlock = ifTree.getFirstChild().getNext();
@@ -183,12 +176,10 @@ class MinimizeExitPoints
               ifTree, exitType, labelName);
         }
       }
-
       if (c == n.getLastChild()) {
         break;
       }
     }
-
     // Now try to minimize the exits of the last child, if it is removed
     // look at what has become the last child.
     for (Node c = n.getLastChild(); c != null; c = n.getLastChild()) {
