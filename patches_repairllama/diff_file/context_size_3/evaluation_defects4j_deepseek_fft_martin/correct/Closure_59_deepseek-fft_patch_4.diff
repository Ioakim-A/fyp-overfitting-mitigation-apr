diff --git src/com/google/javascript/jscomp/Compiler.java src/com/google/javascript/jscomp/Compiler.java
index b3ca246..6fee61c 100644
--- src/com/google/javascript/jscomp/Compiler.java
+++ src/com/google/javascript/jscomp/Compiler.java
@@ -236,7 +236,6 @@ public class Compiler extends AbstractCompiler {
         setErrorManager(printer);
       }
     }
-
     // DiagnosticGroups override the plain checkTypes option.
     if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = true;
@@ -251,28 +250,27 @@ public class Compiler extends AbstractCompiler {
               RhinoErrorReporter.TYPE_PARSE_ERROR),
           CheckLevel.OFF);
     }
+// buggy code
+//    if (options.checkGlobalThisLevel.isOn()) {
+    if (options.checkGlobalThisLevel.isOn() &&
+        !options.disables(DiagnosticGroups.GLOBAL_THIS)) {
 
-    if (options.checkGlobalThisLevel.isOn()) {
       options.setWarningLevel(
           DiagnosticGroups.GLOBAL_THIS,
           options.checkGlobalThisLevel);
     }
-
     if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {
       options.setWarningLevel(
           DiagnosticGroups.ES5_STRICT,
           CheckLevel.ERROR);
     }
-
     // Initialize the warnings guard.
     List<WarningsGuard> guards = Lists.newArrayList();
     guards.add(
         new SuppressDocWarningsGuard(
             getDiagnosticGroups().getRegisteredGroups()));
     guards.add(options.getWarningsGuard());
-
     ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);
-
     // All passes must run the variable check. This synthesizes
     // variables later so that the compiler doesn't crash. It also
     // checks the externs file for validity. If you don't want to warn
@@ -283,7 +281,6 @@ public class Compiler extends AbstractCompiler {
       composedGuards.addGuard(new DiagnosticGroupWarningsGuard(
           DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
     }
-
     this.warningsGuard = composedGuards;
   }
 
