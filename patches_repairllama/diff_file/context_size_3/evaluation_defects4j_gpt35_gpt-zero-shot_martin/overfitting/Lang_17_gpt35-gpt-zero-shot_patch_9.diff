diff --git src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java
index 4cb581d..96fc335 100644
--- src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java
+++ src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java
@@ -80,29 +80,20 @@ public abstract class CharSequenceTranslator {
             return;
         }
         int pos = 0;
-        int len = Character.codePointCount(input, 0, input.length());
+        int len = input.length(); // Fixed bug: removed unnecessary call to Character.codePointCount
         while (pos < len) {
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
                 char[] c = Character.toChars(Character.codePointAt(input, pos));
                 out.write(c);
-            }
-            else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
+                pos += Character.charCount(Character.codePointAt(input, pos)); // Fixed bug: increment pos after writing the character
+            } else {
                 for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
                     pos += Character.charCount(Character.codePointAt(input, pos));
-                    } else {
-                        pos++;
                 }
             }
-                pos--;
         }
-            pos++;
     }
-    }
-
     /**
      * Helper method to create a merger of this translator with another set of 
      * translators. Useful in customizing the standard functionality.
