diff --git src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java
index c6e7cf1..e7fad77 100644
--- src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java
+++ src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java
@@ -128,13 +128,10 @@ public class PolygonsSet extends AbstractRegion<Euclidean2D, Euclidean1D> {
     /** {@inheritDoc} */
     @Override
 protected void computeGeometricalProperties() {
-
     final Vector2D[][] v = getVertices();
-
     if (v.length == 0) {
         final BSPTree<Euclidean2D> tree = getTree(false);
-            if ((Boolean) tree.getAttribute()) {
-                // the instance covers the whole space
+        if (tree.getAttribute() instanceof Boolean && (Boolean) tree.getAttribute()) {
             setSize(Double.POSITIVE_INFINITY);
             setBarycenter(Vector2D.NaN);
         } else {
@@ -142,16 +139,12 @@ public class PolygonsSet extends AbstractRegion<Euclidean2D, Euclidean1D> {
             setBarycenter(new Vector2D(0, 0));
         }
     } else if (v[0][0] == null) {
-            // there is at least one open-loop: the polygon is infinite
         setSize(Double.POSITIVE_INFINITY);
         setBarycenter(Vector2D.NaN);
     } else {
-            // all loops are closed, we compute some integrals around the shape
-
         double sum  = 0;
         double sumX = 0;
         double sumY = 0;
-
         for (Vector2D[] loop : v) {
             double x1 = loop[loop.length - 1].getX();
             double y1 = loop[loop.length - 1].getY();
@@ -166,20 +159,15 @@ public class PolygonsSet extends AbstractRegion<Euclidean2D, Euclidean1D> {
                 sumY += factor * (y0 + y1);
             }
         }
-
         if (sum < 0) {
-                // the polygon as a finite outside surrounded by an infinite inside
             setSize(Double.POSITIVE_INFINITY);
             setBarycenter(Vector2D.NaN);
         } else {
             setSize(sum / 2);
             setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));
         }
-
     }
-
 }
-
     /** Get the vertices of the polygon.
      * <p>The polygon boundary can be represented as an array of loops,
      * each loop being itself an array of vertices.</p>
