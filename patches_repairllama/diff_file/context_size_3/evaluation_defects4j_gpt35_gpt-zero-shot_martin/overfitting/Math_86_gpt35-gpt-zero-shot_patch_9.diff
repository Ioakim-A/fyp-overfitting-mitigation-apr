diff --git src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java
index acd9222..d33f21e 100644
--- src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java
+++ src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java
@@ -95,26 +95,19 @@ public class CholeskyDecompositionImpl implements CholeskyDecomposition {
                                      final double absolutePositivityThreshold)
         throws NonSquareMatrixException,
                NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
-
         if (!matrix.isSquare()) {
             throw new NonSquareMatrixException(matrix.getRowDimension(),
                                                matrix.getColumnDimension());
         }
-
         final int order = matrix.getRowDimension();
         lTData   = matrix.getData();
         cachedL  = null;
         cachedLT = null;
-
-        // check the matrix before transformation
         for (int i = 0; i < order; ++i) {
-
             final double[] lI = lTData[i];
-
             if (lTData[i][i] < absolutePositivityThreshold) {
                 throw new NotPositiveDefiniteMatrixException();
             }
-            // check off-diagonal elements (and reset them to 0)
             for (int j = i + 1; j < order; ++j) {
                 final double[] lJ = lTData[j];
                 final double lIJ = lI[j];
@@ -127,17 +120,13 @@ public class CholeskyDecompositionImpl implements CholeskyDecomposition {
                 lJ[i] = 0;
            }
         }
-
-        // transform the matrix
         for (int i = 0; i < order; ++i) {
-
             final double[] ltI = lTData[i];
-
-            // check diagonal element
-
+            if (ltI[i] <= 0) {
+                throw new NotPositiveDefiniteMatrixException();
+            }
             ltI[i] = Math.sqrt(ltI[i]);
             final double inverse = 1.0 / ltI[i];
-
             for (int q = order - 1; q > i; --q) {
                 ltI[q] *= inverse;
                 final double[] ltQ = lTData[q];
@@ -145,11 +134,8 @@ public class CholeskyDecompositionImpl implements CholeskyDecomposition {
                     ltQ[p] -= ltI[q] * ltI[p];
                 }
             }
-
         }
-
     }
-
     /** {@inheritDoc} */
     public RealMatrix getL() {
         if (cachedL == null) {
