diff --git gson/src/main/java/com/google/gson/stream/JsonReader.java gson/src/main/java/com/google/gson/stream/JsonReader.java
index 877742b..f9aafbd 100644
--- gson/src/main/java/com/google/gson/stream/JsonReader.java
+++ gson/src/main/java/com/google/gson/stream/JsonReader.java
@@ -639,24 +639,18 @@ public class JsonReader implements Closeable {
   }
 
   private int peekNumber() throws IOException {
-    // Like nextNonWhitespace, this uses locals 'p' and 'l' to save inner-loop field access.
     char[] buffer = this.buffer;
     int p = pos;
     int l = limit;
-
-    long value = 0; // Negative to accommodate Long.MIN_VALUE more easily.
+    long value = 0; 
     boolean negative = false;
     boolean fitsInLong = true;
     int last = NUMBER_CHAR_NONE;
-
     int i = 0;
-
     charactersOfNumber:
     for (; true; i++) {
       if (p + i == l) {
         if (i == buffer.length) {
-          // Though this looks like a well-formed number, it's too long to continue reading. Give up
-          // and let the application handle this as an unquoted literal.
           return PEEKED_NONE;
         }
         if (!fillBuffer(i + 1)) {
@@ -665,7 +659,6 @@ public class JsonReader implements Closeable {
         p = pos;
         l = limit;
       }
-
       char c = buffer[p + i];
       switch (c) {
       case '-':
@@ -678,14 +671,12 @@ public class JsonReader implements Closeable {
           continue;
         }
         return PEEKED_NONE;
-
       case '+':
         if (last == NUMBER_CHAR_EXP_E) {
           last = NUMBER_CHAR_EXP_SIGN;
           continue;
         }
         return PEEKED_NONE;
-
       case 'e':
       case 'E':
         if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {
@@ -693,14 +684,12 @@ public class JsonReader implements Closeable {
           continue;
         }
         return PEEKED_NONE;
-
       case '.':
         if (last == NUMBER_CHAR_DIGIT) {
           last = NUMBER_CHAR_DECIMAL;
           continue;
         }
         return PEEKED_NONE;
-
       default:
         if (c < '0' || c > '9') {
           if (!isLiteral(c)) {
@@ -713,7 +702,7 @@ public class JsonReader implements Closeable {
           last = NUMBER_CHAR_DIGIT;
         } else if (last == NUMBER_CHAR_DIGIT) {
           if (value == 0) {
-            return PEEKED_NONE; // Leading '0' prefix is not allowed (since it could be octal).
+            return PEEKED_NONE; 
           }
           long newValue = value * 10 - (c - '0');
           fitsInLong &= value > MIN_INCOMPLETE_INTEGER
@@ -726,9 +715,8 @@ public class JsonReader implements Closeable {
         }
       }
     }
-
-    // We've read a complete number. Decide if it's a PEEKED_LONG or a PEEKED_NUMBER.
-    if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative)) {
+   if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative)
+        && value != 0) {
       peekedLong = negative ? value : -value;
       pos += i;
       return peeked = PEEKED_LONG;
