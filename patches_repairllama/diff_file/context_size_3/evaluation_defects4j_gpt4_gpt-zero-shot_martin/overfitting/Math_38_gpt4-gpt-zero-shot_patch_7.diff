diff --git src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java
index 592a2e8..2019c48 100644
--- src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java
+++ src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java
@@ -1581,19 +1581,13 @@ public class BOBYQAOptimizer
      */
     private void prelim(double[] lowerBound,
                         double[] upperBound) {
-        printMethod(); // XXX
-
+        printMethod(); 
         final int n = currentBest.getDimension();
         final int npt = numberOfInterpolationPoints;
         final int ndim = bMatrix.getRowDimension();
-
         final double rhosq = initialTrustRegionRadius * initialTrustRegionRadius;
         final double recip = 1d / rhosq;
         final int np = n + 1;
-
-        // Set XBASE to the initial vector of variables, and set the initial
-        // elements of XPT, BMAT, HQ, PQ and ZMAT to zero.
-
         for (int j = 0; j < n; j++) {
             originShift.setEntry(j, currentBest.getEntry(j));
             for (int k = 0; k < npt; k++) {
@@ -1612,11 +1606,6 @@ public class BOBYQAOptimizer
                 zMatrix.setEntry(k, j, ZERO);
             }
         }
-
-        // Begin the initialization procedure. NF becomes one more than the number
-        // of function values so far. The coordinates of the displacement of the
-        // next initial interpolation point from XBASE are set in XPT(NF+1,.).
-
         int ipt = 0;
         int jpt = 0;
         double fbeg = Double.NaN;
@@ -1633,7 +1622,6 @@ public class BOBYQAOptimizer
                     stepa = initialTrustRegionRadius;
                     if (upperDifference.getEntry(nfmm) == ZERO) {
                         stepa = -stepa;
-                        throw new PathIsExploredException(); // XXX
                     }
                     interpolationPoints.setEntry(nfm, nfmm, stepa);
                 } else if (nfm > n) {
@@ -1641,11 +1629,9 @@ public class BOBYQAOptimizer
                     stepb = -initialTrustRegionRadius;
                     if (lowerDifference.getEntry(nfxm) == ZERO) {
                         stepb = Math.min(TWO * initialTrustRegionRadius, upperDifference.getEntry(nfxm));
-                        throw new PathIsExploredException(); // XXX
                     }
                     if (upperDifference.getEntry(nfxm) == ZERO) {
                         stepb = Math.max(-TWO * initialTrustRegionRadius, lowerDifference.getEntry(nfxm));
-                        throw new PathIsExploredException(); // XXX
                     }
                     interpolationPoints.setEntry(nfm, nfxm, stepb);
                 }
@@ -1657,17 +1643,12 @@ public class BOBYQAOptimizer
                     final int tmp2 = jpt;
                     jpt = ipt - n;
                     ipt = tmp2;
-                    throw new PathIsExploredException(); // XXX
                 }
-                final int iptMinus1 = ipt;
-                final int jptMinus1 = jpt;
+                final int iptMinus1 = ipt - 1;
+                final int jptMinus1 = jpt - 1;
                 interpolationPoints.setEntry(nfm, iptMinus1, interpolationPoints.getEntry(ipt, iptMinus1));
                 interpolationPoints.setEntry(nfm, jptMinus1, interpolationPoints.getEntry(jpt, jptMinus1));
             }
-
-            // Calculate the next value of F. The least function value so far and
-            // its index are required.
-
             for (int j = 0; j < n; j++) {
                 currentBest.setEntry(j, Math.min(Math.max(lowerBound[j],
                                                           originShift.getEntry(j) + interpolationPoints.getEntry(nfm, j)),
@@ -1679,25 +1660,16 @@ public class BOBYQAOptimizer
                     currentBest.setEntry(j, upperBound[j]);
                 }
             }
-
             final double objectiveValue = computeObjectiveValue(currentBest.toArray());
             final double f = isMinimize ? objectiveValue : -objectiveValue;
-            final int numEval = getEvaluations(); // nfm + 1
+            final int numEval = getEvaluations(); 
             fAtInterpolationPoints.setEntry(nfm, f);
-
             if (numEval == 1) {
                 fbeg = f;
                 trustRegionCenterInterpolationPointIndex = 0;
             } else if (f < fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex)) {
                 trustRegionCenterInterpolationPointIndex = nfm;
             }
-
-            // Set the nonzero initial elements of BMAT and the quadratic model in the
-            // cases when NF is at most 2*N+1. If NF exceeds N+1, then the positions
-            // of the NF-th and (NF-N)-th interpolation points may be switched, in
-            // order that the function value at the first of them contributes to the
-            // off-diagonal second derivative terms of the initial quadratic model.
-
             if (numEval <= 2 * n + 1) {
                 if (numEval >= 2 &&
                     numEval <= n + 1) {
@@ -1707,7 +1679,6 @@ public class BOBYQAOptimizer
                         bMatrix.setEntry(0, nfmm, -oneOverStepA);
                         bMatrix.setEntry(nfm, nfmm, oneOverStepA);
                         bMatrix.setEntry(npt + nfmm, nfmm, -HALF * rhosq);
-                        throw new PathIsExploredException(); // XXX
                     }
                 } else if (numEval >= n + 2) {
                     final int ih = nfx * (nfx + 1) / 2 - 1;
@@ -1732,28 +1703,20 @@ public class BOBYQAOptimizer
                                   -bMatrix.getEntry(0, nfxm) - bMatrix.getEntry(nfm, nfxm));
                     zMatrix.setEntry(0, nfxm, Math.sqrt(TWO) / (stepa * stepb));
                     zMatrix.setEntry(nfm, nfxm, Math.sqrt(HALF) / rhosq);
-                    // zMatrix.setEntry(nfm, nfxm, Math.sqrt(HALF) * recip); // XXX "testAckley" and "testDiffPow" fail.
                     zMatrix.setEntry(nfm - n, nfxm,
                                   -zMatrix.getEntry(0, nfxm) - zMatrix.getEntry(nfm, nfxm));
                 }
-
-                // Set the off-diagonal second derivatives of the Lagrange functions and
-                // the initial quadratic model.
-
             } else {
                 zMatrix.setEntry(0, nfxm, recip);
                 zMatrix.setEntry(nfm, nfxm, recip);
                 zMatrix.setEntry(ipt, nfxm, -recip);
                 zMatrix.setEntry(jpt, nfxm, -recip);
-
                 final int ih = ipt * (ipt - 1) / 2 + jpt - 1;
                 final double tmp = interpolationPoints.getEntry(nfm, ipt - 1) * interpolationPoints.getEntry(nfm, jpt - 1);
                 modelSecondDerivativesValues.setEntry(ih, (fbeg - fAtInterpolationPoints.getEntry(ipt) - fAtInterpolationPoints.getEntry(jpt) + f) / tmp);
-                throw new PathIsExploredException(); // XXX
             }
         } while (getEvaluations() < npt);
-    } // prelim
-
+    } 
 
     // ----------------------------------------------------------------------------------------
 
