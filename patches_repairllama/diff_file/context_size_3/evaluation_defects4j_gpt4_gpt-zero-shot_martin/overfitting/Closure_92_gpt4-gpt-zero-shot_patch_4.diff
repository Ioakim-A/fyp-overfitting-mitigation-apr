diff --git src/com/google/javascript/jscomp/ProcessClosurePrimitives.java src/com/google/javascript/jscomp/ProcessClosurePrimitives.java
index c929a36..e0c8bce 100644
--- src/com/google/javascript/jscomp/ProcessClosurePrimitives.java
+++ src/com/google/javascript/jscomp/ProcessClosurePrimitives.java
@@ -744,27 +744,21 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback
      * If we're providing a name with a duplicate definition, then make sure
      * that definition becomes a declaration.
      */
+
 void replace() {
   if (firstNode == null) {
-        // Don't touch the base case ('goog').
     replacementNode = candidateDefinition;
     return;
   }
-
-      // Handle the case where there is a duplicate definition for an explicitly
-      // provided symbol.
   if (candidateDefinition != null && explicitNode != null) {
     explicitNode.detachFromParent();
     compiler.reportCodeChange();
-
-        // Does this need a VAR keyword?
     replacementNode = candidateDefinition;
     if (NodeUtil.isExpressionNode(candidateDefinition)) {
       candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);
       Node assignNode = candidateDefinition.getFirstChild();
       Node nameNode = assignNode.getFirstChild();
       if (nameNode.getType() == Token.NAME) {
-            // Need to convert this assign to a var declaration.
         Node valueNode = nameNode.getNext();
         assignNode.removeChild(nameNode);
         assignNode.removeChild(valueNode);
@@ -779,20 +773,16 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback
       }
     }
   } else {
-        // Handle the case where there's not a duplicate definition.
     replacementNode = createDeclarationNode();
     if (firstModule == minimumModule) {
       firstNode.getParent().addChildBefore(replacementNode, firstNode);
     } else {
-          // In this case, the name was implicitly provided by two independent
-          // modules. We need to move this code up to a common module.
+      String namespace = "yourNamespace";
       int indexOfDot = namespace.indexOf('.');
       if (indexOfDot == -1) {
-            // Any old place is fine.
         compiler.getNodeForCodeInsertion(minimumModule)
             .addChildToBack(replacementNode);
       } else {
-            // Add it after the parent namespace.
         ProvidedName parentName =
             providedNames.get(namespace.substring(0, indexOfDot));
         Preconditions.checkNotNull(parentName);
