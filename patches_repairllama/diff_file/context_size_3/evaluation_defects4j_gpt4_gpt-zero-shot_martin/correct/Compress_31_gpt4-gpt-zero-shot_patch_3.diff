diff --git src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
index 40e7871..c8e6dd7 100644
--- src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
+++ src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
@@ -102,16 +102,12 @@ public class TarUtils {
     long    result = 0;
     int     end = offset + length;
     int     start = offset;
-
     if (length < 2){
         throw new IllegalArgumentException("Length "+length+" must be at least 2");
     }
-
     if (buffer[start] == 0) {
         return 0L;
     }
-
-        // Skip leading spaces
     while (start < end){
         if (buffer[start] == ' '){
             start++;
@@ -119,34 +115,22 @@ public class TarUtils {
             break;
         }
     }
-
-        // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
     byte trailer = buffer[end - 1];
     while (start < end && (trailer == 0 || trailer == ' ')) {
         end--;
         trailer = buffer[end - 1];
     }
-
     for ( ;start < end; start++) {
         final byte currentByte = buffer[start];
-            if (currentByte == 0) {
-                break;
-            }
-            // CheckStyle:MagicNumber OFF
+        // Removed unnecessary code
         if (currentByte < '0' || currentByte > '7'){
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        result = (result << 3) + (currentByte - '0'); 
     }
-
     return result;
 }
-
     /** 
      * Compute the value contained in a byte buffer.  If the most
      * significant bit of the first byte in the buffer is set, this
