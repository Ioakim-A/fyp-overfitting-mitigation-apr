diff --git src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java
index 264ed20..d4c4cfa 100644
--- src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java
+++ src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java
@@ -94,15 +94,24 @@ public class JsonNodeDeserializer
         @Override
         public ObjectNode deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
         {
+// buggy code
+//            if (p.getCurrentToken() == JsonToken.START_OBJECT) {
+//                p.nextToken();
+//                return deserializeObject(p, ctxt, ctxt.getNodeFactory());
+//            }
+//            if (p.getCurrentToken() == JsonToken.FIELD_NAME) {
+//                return deserializeObject(p, ctxt, ctxt.getNodeFactory());
+//            }
             if (p.getCurrentToken() == JsonToken.START_OBJECT) {
-                p.nextToken();
                 return deserializeObject(p, ctxt, ctxt.getNodeFactory());
             }
-            // 23-Sep-2015, tatu: Ugh. We may also be given END_OBJECT (similar to FIELD_NAME),
-            //    if caller has advanced to the first token of Object, but for empty Object
             if (p.getCurrentToken() == JsonToken.FIELD_NAME) {
                 return deserializeObject(p, ctxt, ctxt.getNodeFactory());
             }
+            if (p.getCurrentToken() == JsonToken.END_OBJECT) {
+                return ctxt.getNodeFactory().objectNode();
+
+            }
             throw ctxt.mappingException(ObjectNode.class);
          }
     }
