diff --git src/main/java/org/apache/commons/lang3/math/NumberUtils.java src/main/java/org/apache/commons/lang3/math/NumberUtils.java
index 4a1d845..b610331 100644
--- src/main/java/org/apache/commons/lang3/math/NumberUtils.java
+++ src/main/java/org/apache/commons/lang3/math/NumberUtils.java
@@ -1326,15 +1326,13 @@ public class NumberUtils {
         boolean hasDecPoint = false;
         boolean allowSigns = false;
         boolean foundDigit = false;
-        // deal with any possible sign up front
         int start = (chars[0] == '-') ? 1 : 0;
         if (sz > start + 1) {
             if (chars[start] == '0' && chars[start + 1] == 'x') {
                 int i = start + 2;
                 if (i == sz) {
-                    return false; // str == "0x"
+                    return false; 
                 }
-                // checking hex (it can't be anything else)
                 for (; i < chars.length; i++) {
                     if ((chars[i] < '0' || chars[i] > '9')
                         && (chars[i] < 'a' || chars[i] > 'f')
@@ -1345,26 +1343,19 @@ public class NumberUtils {
                 return true;
             }
         }
-        sz--; // don't want to loop to the last char, check it afterwords
-              // for type qualifiers
+        sz--; 
         int i = start;
-        // loop to the next to last char or to the last char if we need another digit to
-        // make a valid number (e.g. chars[0..5] = "1234E")
         while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {
             if (chars[i] >= '0' && chars[i] <= '9') {
                 foundDigit = true;
                 allowSigns = false;
-
             } else if (chars[i] == '.') {
                 if (hasDecPoint || hasExp) {
-                    // two decimal points or dec in exponent   
                     return false;
                 }
                 hasDecPoint = true;
             } else if (chars[i] == 'e' || chars[i] == 'E') {
-                // we've already taken care of hex.
                 if (hasExp) {
-                    // two E's
                     return false;
                 }
                 if (!foundDigit) {
@@ -1377,7 +1368,7 @@ public class NumberUtils {
                     return false;
                 }
                 allowSigns = false;
-                foundDigit = false; // we need a digit after the E
+                foundDigit = false; 
             } else {
                 return false;
             }
@@ -1385,19 +1376,15 @@ public class NumberUtils {
         }
         if (i < chars.length) {
             if (chars[i] >= '0' && chars[i] <= '9') {
-                // no type qualifier, OK
                 return true;
             }
             if (chars[i] == 'e' || chars[i] == 'E') {
-                // can't have an E at the last byte
                 return false;
             }
             if (chars[i] == '.') {
                 if (hasDecPoint || hasExp) {
-                    // two decimal points or dec in exponent
                     return false;
                 }
-                // single trailing decimal point after non-exponent is ok
                 return foundDigit;
             }
             if (!allowSigns
@@ -1409,14 +1396,13 @@ public class NumberUtils {
             }
             if (chars[i] == 'l'
                 || chars[i] == 'L') {
-                // not allowing L with an exponent or decimal point
-                return foundDigit && !hasExp;
+// buggy code
+//                return foundDigit && !hasExp;
+               return foundDigit && !hasExp && !hasDecPoint;
+
             }
-            // last character is illegal
             return false;
         }
-        // allowSigns is true iff the val ends in 'E'
-        // found digit it to make sure weird stuff like '.' and '1E-' doesn't pass
         return !allowSigns && foundDigit;
     }
     
