diff --git src/main/java/org/apache/commons/lang3/math/NumberUtils.java src/main/java/org/apache/commons/lang3/math/NumberUtils.java
index 882358f..ed0a8d4 100644
--- src/main/java/org/apache/commons/lang3/math/NumberUtils.java
+++ src/main/java/org/apache/commons/lang3/math/NumberUtils.java
@@ -449,13 +449,23 @@ public class NumberUtils {
             throw new NumberFormatException("A blank string is not a valid number");
         }  
         if (str.startsWith("--")) {
-            // this is protection for poorness in java.lang.BigDecimal.
-            // it accepts this as a legal value, but it does not appear 
-            // to be in specification of class. OS X Java parses it to 
-            // a wrong value.
             return null;
         }
-        if (str.startsWith("0x") || str.startsWith("-0x")) {
+// buggy code
+//        if (str.startsWith("0x") || str.startsWith("-0x")) {
+//            return createInteger(str);
+//        }
+        if (str.startsWith("0x")) {
+            return createInteger(str);
+        }
+        if (str.startsWith("-0x")) {
+            return createInteger(str);
+        }
+        if (str.startsWith("0X") || str.startsWith("-0X")) {
+            return createInteger(str);
+        }
+        if (str.startsWith("0X")) {
+
             return createInteger(str);
         }   
         char lastChar = str.charAt(str.length() - 1);
@@ -464,9 +474,7 @@ public class NumberUtils {
         String exp;
         int decPos = str.indexOf('.');
         int expPos = str.indexOf('e') + str.indexOf('E') + 1;
-
         if (decPos > -1) {
-
             if (expPos > -1) {
                 if (expPos < decPos || expPos > str.length()) {
                     throw new NumberFormatException(str + " is not a valid number.");
@@ -493,7 +501,6 @@ public class NumberUtils {
             } else {
                 exp = null;
             }
-            //Requesting a specific type..
             String numeric = str.substring(0, str.length() - 1);
             boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
             switch (lastChar) {
@@ -504,11 +511,9 @@ public class NumberUtils {
                         && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                         try {
                             return createLong(numeric);
-                        } catch (NumberFormatException nfe) { // NOPMD
-                            // Too big for a long
+                        } catch (NumberFormatException nfe) { 
                         }
                         return createBigInteger(numeric);
-
                     }
                     throw new NumberFormatException(str + " is not a valid number.");
                 case 'f' :
@@ -516,15 +521,10 @@ public class NumberUtils {
                     try {
                         Float f = NumberUtils.createFloat(numeric);
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
                             return f;
                         }
-
-                    } catch (NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                    } catch (NumberFormatException nfe) { 
                     }
-                    //$FALL-THROUGH$
                 case 'd' :
                 case 'D' :
                     try {
@@ -532,63 +532,48 @@ public class NumberUtils {
                         if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
                             return d;
                         }
-                    } catch (NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                    } catch (NumberFormatException nfe) { 
                     }
                     try {
                         return createBigDecimal(numeric);
-                    } catch (NumberFormatException e) { // NOPMD
-                        // ignore the bad number
+                    } catch (NumberFormatException e) { 
                     }
-                    //$FALL-THROUGH$
                 default :
                     throw new NumberFormatException(str + " is not a valid number.");
-
             }
         } else {
-            //User doesn't have a preference on the return type, so let's start
-            //small and go from there...
             if (expPos > -1 && expPos < str.length() - 1) {
                 exp = str.substring(expPos + 1, str.length());
             } else {
                 exp = null;
             }
             if (dec == null && exp == null) {
-                //Must be an int,long,bigint
                 try {
                     return createInteger(str);
-                } catch (NumberFormatException nfe) { // NOPMD
-                    // ignore the bad number
+                } catch (NumberFormatException nfe) { 
                 }
                 try {
                     return createLong(str);
-                } catch (NumberFormatException nfe) { // NOPMD
-                    // ignore the bad number
+                } catch (NumberFormatException nfe) { 
                 }
                 return createBigInteger(str);
-
             } else {
-                //Must be a float,double,BigDec
                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
                 try {
                     Float f = createFloat(str);
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                         return f;
                     }
-                } catch (NumberFormatException nfe) { // NOPMD
-                    // ignore the bad number
+                } catch (NumberFormatException nfe) { 
                 }
                 try {
                     Double d = createDouble(str);
                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
-                } catch (NumberFormatException nfe) { // NOPMD
-                    // ignore the bad number
+                } catch (NumberFormatException nfe) { 
                 }
-
                 return createBigDecimal(str);
-
             }
         }
     }
