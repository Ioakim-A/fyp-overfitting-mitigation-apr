diff --git src/com/google/javascript/jscomp/TypedScopeCreator.java src/com/google/javascript/jscomp/TypedScopeCreator.java
index cf87eaa..b4a66df 100644
--- src/com/google/javascript/jscomp/TypedScopeCreator.java
+++ src/com/google/javascript/jscomp/TypedScopeCreator.java
@@ -1988,26 +1988,17 @@ final class TypedScopeCreator implements ScopeCreator {
       if (t.inGlobalScope()) {
         return;
       }
-
       if (n.isReturn() && n.getFirstChild() != null) {
         data.get(t.getScopeRoot()).recordNonEmptyReturn();
       }
+// buggy code
+//      if (t.getScopeDepth() <= 2) {
+// buggy code
+      if (t.getScopeDepth() <= 1) {
 
-      if (t.getScopeDepth() <= 2) {
-        // The first-order function analyzer looks at two types of variables:
-        //
-        // 1) Local variables that are assigned in inner scopes ("escaped vars")
-        //
-        // 2) Local variables that are assigned more than once.
-        //
-        // We treat all global variables as escaped by default, so there's
-        // no reason to do this extra computation for them.
         return;
       }
-
       if (n.isName() && NodeUtil.isLValue(n) &&
-          // Be careful of bleeding functions, which create variables
-          // in the inner scope, not the scope where the name appears.
           !NodeUtil.isBleedingFunctionName(n)) {
         String name = n.getString();
         Scope scope = t.getScope();
@@ -2017,7 +2008,6 @@ final class TypedScopeCreator implements ScopeCreator {
           if (ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode()).recordAssignedName(name);
           }
-
           if (scope != ownerScope && ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
           }
