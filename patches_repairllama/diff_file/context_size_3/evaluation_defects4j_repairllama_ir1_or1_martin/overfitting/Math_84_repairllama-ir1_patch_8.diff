diff --git src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java
index 42a4d9d..879b117 100644
--- src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java
+++ src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java
@@ -60,42 +60,24 @@ public class MultiDirectional extends DirectSearchOptimizer {
     @Override
    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
-
         while (true) {
-
             incrementIterationsCounter();
-
-            // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
-
-            // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
-
-                // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
                     simplex = reflectedSimplex;
                 }
-
                 return;
-
             }
-
-            // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
+            if (comparator.compare(contracted, best) >= 0) {
                 return;
             }
-
         }
-
     }
 
     /** Compute and evaluate a new simplex.
