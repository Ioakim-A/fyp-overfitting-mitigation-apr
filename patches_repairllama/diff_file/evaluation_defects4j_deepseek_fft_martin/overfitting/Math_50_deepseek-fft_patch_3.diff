diff --git src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java
index e47d982..9693528 100644
--- src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java
+++ src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java
@@ -131,7 +131,6 @@ public abstract class BaseSecantSolver
         double x1 = getMax();
         double f0 = computeObjectiveValue(x0);
         double f1 = computeObjectiveValue(x1);
-
         // If one of the bounds is the exact root, return it. Since these are
         // not under-approximations or over-approximations, we can return them
         // regardless of the allowed solutions.
@@ -141,32 +140,26 @@ public abstract class BaseSecantSolver
         if (f1 == 0.0) {
             return x1;
         }
-
         // Verify bracketing of initial solution.
         verifyBracketing(x0, x1);
-
         // Get accuracies.
         final double ftol = getFunctionValueAccuracy();
         final double atol = getAbsoluteAccuracy();
         final double rtol = getRelativeAccuracy();
-
         // Keep track of inverted intervals, meaning that the left bound is
         // larger than the right bound.
         boolean inverted = false;
-
         // Keep finding better approximations.
         while (true) {
             // Calculate the next approximation.
             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
             final double fx = computeObjectiveValue(x);
-
             // If the new approximation is the exact root, return it. Since
             // this is not an under-approximation or an over-approximation,
             // we can return it regardless of the allowed solutions.
             if (fx == 0.0) {
                 return x;
             }
-
             // Update the bounds with the new approximation.
             if (f1 * fx < 0) {
                 // The value of x1 has switched to the other bound, thus inverting
@@ -184,10 +177,16 @@ public abstract class BaseSecantSolver
                     break;
                 case REGULA_FALSI:
                     // Nothing.
+// buggy code
+//                    if (x == x1) {
+//                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
+//                        f0 = computeObjectiveValue(x0);
+//                    }
                     if (x == x1) {
-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
+                        x0 = 0.5 * (x0 + x1 + FastMath.max(rtol * FastMath.abs(x1), atol));
                         f0 = computeObjectiveValue(x0);
                     }
+
                     break;
                 default:
                     // Should never happen.
@@ -197,7 +196,6 @@ public abstract class BaseSecantSolver
             // Update from [x0, x1] to [x0, x].
             x1 = x;
             f1 = fx;
-
             // If the function value of the last approximation is too small,
             // given the function value accuracy, then we can't get closer to
             // the root than we already are.
@@ -229,7 +227,6 @@ public abstract class BaseSecantSolver
                     throw new MathInternalError();
                 }
             }
-
             // If the current interval is within the given accuracies, we
             // are satisfied with the current approximation.
             if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
