diff --git src/main/java/org/apache/commons/math3/util/MathArrays.java src/main/java/org/apache/commons/math3/util/MathArrays.java
index 325fd94..99b8628 100644
--- src/main/java/org/apache/commons/math3/util/MathArrays.java
+++ src/main/java/org/apache/commons/math3/util/MathArrays.java
@@ -817,18 +817,19 @@ public class MathArrays {
         if (len != b.length) {
             throw new DimensionMismatchException(len, b.length);
         }
-
-            // Revert to scalar multiplication.
-
+        if (len == 0) {
+            return 0;
+        }
+        if (len == 1) {
+            return a[0] * b[0];
+        }
         final double[] prodHigh = new double[len];
         double prodLowSum = 0;
-
         for (int i = 0; i < len; i++) {
             final double ai = a[i];
             final double ca = SPLIT_FACTOR * ai;
             final double aHigh = ca - (ca - ai);
             final double aLow = ai - aHigh;
-
             final double bi = b[i];
             final double cb = SPLIT_FACTOR * bi;
             final double bHigh = cb - (cb - bi);
@@ -840,14 +841,11 @@ public class MathArrays {
                                                   aHigh * bLow);
             prodLowSum += prodLow;
         }
-
-
         final double prodHighCur = prodHigh[0];
         double prodHighNext = prodHigh[1];
         double sHighPrev = prodHighCur + prodHighNext;
         double sPrime = sHighPrev - prodHighNext;
         double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);
-
         final int lenMinusOne = len - 1;
         for (int i = 1; i < lenMinusOne; i++) {
             prodHighNext = prodHigh[i + 1];
@@ -856,9 +854,7 @@ public class MathArrays {
             sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);
             sHighPrev = sHighCur;
         }
-
         double result = sHighPrev + (prodLowSum + sLowSum);
-
         if (Double.isNaN(result)) {
             // either we have split infinite numbers or some coefficients were NaNs,
             // just rely on the naive implementation and let IEEE754 handle this
@@ -867,7 +863,6 @@ public class MathArrays {
                 result += a[i] * b[i];
             }
         }
-
         return result;
     }
 
