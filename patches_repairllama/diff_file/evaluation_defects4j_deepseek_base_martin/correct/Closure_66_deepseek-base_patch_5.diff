diff --git src/com/google/javascript/jscomp/TypeCheck.java src/com/google/javascript/jscomp/TypeCheck.java
index edb7805..28fae68 100644
--- src/com/google/javascript/jscomp/TypeCheck.java
+++ src/com/google/javascript/jscomp/TypeCheck.java
@@ -464,12 +464,10 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
     Node left, right;
     // To be explicitly set to false if the node is not typeable.
     boolean typeable = true;
-
     switch (n.getType()) {
       case Token.NAME:
         typeable = visitName(t, n, parent);
         break;
-
       case Token.LP:
         // If this is under a FUNCTION node, it is a parameter list and can be
         // ignored here.
@@ -479,63 +477,51 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
           typeable = false;
         }
         break;
-
       case Token.COMMA:
         ensureTyped(t, n, getJSType(n.getLastChild()));
         break;
-
       case Token.TRUE:
       case Token.FALSE:
         ensureTyped(t, n, BOOLEAN_TYPE);
         break;
-
       case Token.THIS:
         ensureTyped(t, n, t.getScope().getTypeOfThis());
         break;
-
       case Token.REF_SPECIAL:
         ensureTyped(t, n);
         break;
-
       case Token.GET_REF:
         ensureTyped(t, n, getJSType(n.getFirstChild()));
         break;
-
       case Token.NULL:
         ensureTyped(t, n, NULL_TYPE);
         break;
-
       case Token.NUMBER:
         ensureTyped(t, n, NUMBER_TYPE);
         break;
-
       case Token.STRING:
         // Object literal keys are handled with OBJECTLIT
         if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
           ensureTyped(t, n, STRING_TYPE);
-          // Object literal keys are not typeable
+        } else {
+          typeable = false;
         }
         break;
-
       case Token.GET:
       case Token.SET:
         // Object literal keys are handled with OBJECTLIT
         break;
-
       case Token.ARRAYLIT:
         ensureTyped(t, n, ARRAY_TYPE);
         break;
-
       case Token.REGEXP:
         ensureTyped(t, n, REGEXP_TYPE);
         break;
-
       case Token.GETPROP:
         visitGetProp(t, n, parent);
         typeable = !(parent.getType() == Token.ASSIGN &&
                      parent.getFirstChild() == n);
         break;
-
       case Token.GETELEM:
         visitGetElem(t, n);
         // The type of GETELEM is always unknown, so no point counting that.
@@ -543,27 +529,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
         // variable), then it will be counted.
         typeable = false;
         break;
-
       case Token.VAR:
         visitVar(t, n);
         typeable = false;
         break;
-
       case Token.NEW:
         visitNew(t, n);
         typeable = true;
         break;
-
       case Token.CALL:
         visitCall(t, n);
         typeable = !NodeUtil.isExpressionNode(parent);
         break;
-
       case Token.RETURN:
         visitReturn(t, n);
         typeable = false;
         break;
-
       case Token.DEC:
       case Token.INC:
         left = n.getFirstChild();
@@ -571,19 +552,15 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
             t, left, getJSType(left), "increment/decrement");
         ensureTyped(t, n, NUMBER_TYPE);
         break;
-
       case Token.NOT:
         ensureTyped(t, n, BOOLEAN_TYPE);
         break;
-
       case Token.VOID:
         ensureTyped(t, n, VOID_TYPE);
         break;
-
       case Token.TYPEOF:
         ensureTyped(t, n, STRING_TYPE);
         break;
-
       case Token.BITNOT:
         childType = getJSType(n.getFirstChild());
         if (!childType.matchesInt32Context()) {
@@ -592,19 +569,16 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
         }
         ensureTyped(t, n, NUMBER_TYPE);
         break;
-
       case Token.POS:
       case Token.NEG:
         left = n.getFirstChild();
         validator.expectNumber(t, left, getJSType(left), "sign operator");
         ensureTyped(t, n, NUMBER_TYPE);
         break;
-
       case Token.EQ:
       case Token.NE: {
         leftType = getJSType(n.getFirstChild());
         rightType = getJSType(n.getLastChild());
-
         JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
         JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
         TernaryValue result =
@@ -619,12 +593,10 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
         ensureTyped(t, n, BOOLEAN_TYPE);
         break;
       }
-
       case Token.SHEQ:
       case Token.SHNE: {
         leftType = getJSType(n.getFirstChild());
         rightType = getJSType(n.getLastChild());
-
         JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
         JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
         if (!leftTypeRestricted.canTestForShallowEqualityWith(
@@ -635,7 +607,6 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
         ensureTyped(t, n, BOOLEAN_TYPE);
         break;
       }
-
       case Token.LT:
       case Token.LE:
       case Token.GT:
@@ -666,7 +637,6 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
         }
         ensureTyped(t, n, BOOLEAN_TYPE);
         break;
-
       case Token.IN:
         left = n.getFirstChild();
         right = n.getLastChild();
@@ -676,25 +646,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
         validator.expectString(t, left, leftType, "left side of 'in'");
         ensureTyped(t, n, BOOLEAN_TYPE);
         break;
-
       case Token.INSTANCEOF:
         left = n.getFirstChild();
         right = n.getLastChild();
         leftType = getJSType(left);
         rightType = getJSType(right).restrictByNotNullOrUndefined();
-
         validator.expectAnyObject(
             t, left, leftType, "deterministic instanceof yields false");
         validator.expectActualObject(
             t, right, rightType, "instanceof requires an object");
         ensureTyped(t, n, BOOLEAN_TYPE);
         break;
-
       case Token.ASSIGN:
         visitAssign(t, n);
         typeable = false;
         break;
-
       case Token.ASSIGN_LSH:
       case Token.ASSIGN_RSH:
       case Token.ASSIGN_URSH:
@@ -719,21 +685,18 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
       case Token.MUL:
         visitBinaryOperator(n.getType(), t, n);
         break;
-
       case Token.DELPROP:
         if (!isReference(n.getFirstChild())) {
           report(t, n, BAD_DELETE);
         }
         ensureTyped(t, n, BOOLEAN_TYPE);
         break;
-
       case Token.CASE:
         JSType switchType = getJSType(parent.getFirstChild());
         JSType caseType = getJSType(n.getFirstChild());
         validator.expectSwitchMatchesCase(t, n, switchType, caseType);
         typeable = false;
         break;
-
       case Token.WITH: {
         Node child = n.getFirstChild();
         childType = getJSType(child);
@@ -742,11 +705,9 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
         typeable = false;
         break;
       }
-
       case Token.FUNCTION:
         visitFunction(t, n);
         break;
-
       // These nodes have no interesting type behavior.
       case Token.LABEL:
       case Token.LABEL_NAME:
@@ -764,7 +725,6 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
       case Token.THROW:
         typeable = false;
         break;
-
       // These nodes require data flow analysis.
       case Token.DO:
       case Token.FOR:
@@ -772,7 +732,6 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
       case Token.WHILE:
         typeable = false;
         break;
-
       // These nodes are typed during the type inference.
       case Token.AND:
       case Token.HOOK:
@@ -795,20 +754,16 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
           }
         }
         break;
-
       default:
         report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
         ensureTyped(t, n);
         break;
     }
-
     // Don't count externs since the user's code may not even use that part.
     typeable = typeable && !inExterns;
-
     if (typeable) {
       doPercentTypedAccounting(t, n);
     }
-
     checkNoTypeCheckSection(n, false);
   }
 
