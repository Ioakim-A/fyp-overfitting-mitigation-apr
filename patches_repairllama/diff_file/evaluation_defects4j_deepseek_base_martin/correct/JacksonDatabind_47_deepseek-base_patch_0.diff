diff --git src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
index dab3227..da88378 100644
--- src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
+++ src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
@@ -797,14 +797,11 @@ public abstract class AnnotationIntrospector
     {
         JavaType type = baseType;
         final TypeFactory tf = config.getTypeFactory();
-        
         // 10-Oct-2015, tatu: For 2.7, we'll need to delegate back to
         //    now-deprecated secondary methods; this because while
         //    direct sub-class not yet retrofitted may only override
         //    those methods. With 2.8 or later we may consider removal
         //    of these methods
-
-        
         // Ok: start by refining the main type itself; common to all types
         Class<?> serClass = findSerializationType(a);
         if (serClass != null) {
@@ -813,10 +810,17 @@ public abstract class AnnotationIntrospector
                 //    static typing this way
                 type = type.withStaticTyping();
             } else {
+                Class<?> currRaw = type.getRawClass();
                 try {
-                    // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,
-                    //   may be needed here too in future?
+                    if (serClass.isAssignableFrom(currRaw)) { // common case
                         type = tf.constructGeneralizedType(type, serClass);
+                    } else if (currRaw.isAssignableFrom(serClass)) { // specialization, ok as well
+                        type = tf.constructSpecializedType(type, serClass);
+                    } else {
+                        throw new JsonMappingException(null,
+                                String.format("Can not refine serialization type %s into %s; types not related",
+                                        type, serClass.getName()));
+                    }
                 } catch (IllegalArgumentException iae) {
                     throw new JsonMappingException(null,
                             String.format("Failed to widen type %s with annotation (value %s), from '%s': %s",
@@ -826,7 +830,6 @@ public abstract class AnnotationIntrospector
             }
         }
         // Then further processing for container types
-
         // First, key type (for Maps, Map-like types):
         if (type.isMapLikeType()) {
             JavaType keyType = type.getKeyType();
@@ -859,7 +862,6 @@ public abstract class AnnotationIntrospector
                 type = ((MapLikeType) type).withKeyType(keyType);
             }
         }
-
         JavaType contentType = type.getContentType();
         if (contentType != null) { // collection[like], map[like], array, reference
             // And then value types for all containers:
