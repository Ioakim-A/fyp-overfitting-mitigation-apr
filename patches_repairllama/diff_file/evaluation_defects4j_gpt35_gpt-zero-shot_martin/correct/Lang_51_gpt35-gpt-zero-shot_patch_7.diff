diff --git src/java/org/apache/commons/lang/BooleanUtils.java src/java/org/apache/commons/lang/BooleanUtils.java
index 3fda4ec..3a044e2 100644
--- src/java/org/apache/commons/lang/BooleanUtils.java
+++ src/java/org/apache/commons/lang/BooleanUtils.java
@@ -647,13 +647,7 @@ public class BooleanUtils {
      * @return the boolean value of the string, <code>false</code> if no match
      */
 public static boolean toBoolean(String str) {
-        // Previously used equalsIgnoreCase, which was fast for interned 'true'.
-        // Non interned 'true' matched 15 times slower.
-        // 
-        // Optimisation provides same performance as before for interned 'true'.
-        // Similar performance for null, 'false', and other strings not length 2/3/4.
-        // 'true'/'TRUE' match 4 times slower, 'tRUE'/'True' 7 times slower.
-        if (str == "true") {
+    if ("true".equals(str)) {
         return true;
     }
     if (str == null) {
@@ -679,6 +673,7 @@ public class BooleanUtils {
                     (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&
                     (str.charAt(2) == 'S' || str.charAt(2) == 's');
             }
+            return false;
         }
         case 4: {
             char ch = str.charAt(0);
@@ -694,11 +689,11 @@ public class BooleanUtils {
                     (str.charAt(2) == 'U' || str.charAt(2) == 'u') &&
                     (str.charAt(3) == 'E' || str.charAt(3) == 'e');
             }
+            return false;
         }
     }
     return false;
 }    
-    
 //    public static void main(String[] args) {
 //        long start = System.currentTimeMillis();
 //        boolean flag = true;
