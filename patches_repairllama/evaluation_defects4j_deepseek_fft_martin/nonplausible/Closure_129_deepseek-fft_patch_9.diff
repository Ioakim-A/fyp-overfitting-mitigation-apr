diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0c240184-3f43-4760-80ae-2a551dde0a2c_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/8ddf6428-20eb-4090-b563-ef46fa4bd259_fixed.java
index e8705ac..8a1df40 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0c240184-3f43-4760-80ae-2a551dde0a2c_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/8ddf6428-20eb-4090-b563-ef46fa4bd259_fixed.java
@@ -1,24 +1,23 @@
     /**
      * There are two types of calls we are interested in calls without explicit
      * "this" values (what we are call "free" calls) and direct call to eval.
      */
     private void annotateCalls(Node n) {
       Preconditions.checkState(n.isCall());
-
       // Keep track of of the "this" context of a call.  A call without an
       // explicit "this" is a free call.
       Node first = n.getFirstChild();
-
       // ignore cast nodes.
+// buggy code
+      if (first == null) return;
 
       if (!NodeUtil.isGet(first)) {
         n.putBooleanProp(Node.FREE_CALL, true);
       }
-
       // Keep track of the context in which eval is called. It is important
       // to distinguish between "(0, eval)()" and "eval()".
       if (first.isName() &&
           "eval".equals(first.getString())) {
         first.putBooleanProp(Node.DIRECT_EVAL, true);
       }
     }
