diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0fab00a8-7c02-42cd-885e-c3e1ef4c1303_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2ea1d08e-5d80-4148-afe9-341a7e875840_fixed.java
index 0eef537..739304e 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0fab00a8-7c02-42cd-885e-c3e1ef4c1303_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2ea1d08e-5d80-4148-afe9-341a7e875840_fixed.java
@@ -1,74 +1,82 @@
     /**
      * Calculates the Cholesky decomposition of the given matrix.
      * @param matrix the matrix to decompose
      * @param relativeSymmetryThreshold threshold above which off-diagonal
      * elements are considered too different and matrix not symmetric
      * @param absolutePositivityThreshold threshold below which diagonal
      * elements are considered null and matrix not positive definite
      * @exception NonSquareMatrixException if matrix is not square
      * @exception NotSymmetricMatrixException if matrix is not symmetric
      * @exception NotPositiveDefiniteMatrixException if the matrix is not
      * strictly positive definite
      * @see #CholeskyDecompositionImpl(RealMatrix)
      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
      */
     public CholeskyDecompositionImpl(final RealMatrix matrix,
                                      final double relativeSymmetryThreshold,
                                      final double absolutePositivityThreshold)
         throws NonSquareMatrixException,
                NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
-
         if (!matrix.isSquare()) {
             throw new NonSquareMatrixException(matrix.getRowDimension(),
                                                matrix.getColumnDimension());
         }
-
         final int order = matrix.getRowDimension();
         lTData   = matrix.getData();
         cachedL  = null;
         cachedLT = null;
-
         // check the matrix before transformation
         for (int i = 0; i < order; ++i) {
-
             final double[] lI = lTData[i];
-
-            if (lTData[i][i] < absolutePositivityThreshold) {
+// buggy code
+//            if (lTData[i][i] < absolutePositivityThreshold) {
+//                throw new NotPositiveDefiniteMatrixException();
+//            }
+//            // check off-diagonal elements (and reset them to 0)
+//            for (int j = i + 1; j < order; ++j) {
+//                final double[] lJ = lTData[j];
+//                final double lIJ = lI[j];
+//                final double lJI = lJ[i];
+//                final double maxDelta =
+//                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
+//                if (Math.abs(lIJ - lJI) > maxDelta) {
+//                    throw new NotSymmetricMatrixException();
+//                }
+//                lJ[i] = 0;
+//           }
+//        }
+//        // transform the matrix
+//        for (int i = 0; i < order; ++i) {
+//            final double[] ltI = lTData[i];
+//            // check diagonal element
+//            ltI[i] = Math.sqrt(ltI[i]);
+//            final double inverse = 1.0 / ltI[i];
+//            for (int q = order - 1; q > i; --q) {
+//                ltI[q] *= inverse;
+//                final double[] ltQ = lTData[q];
+//                for (int p = q; p < order; ++p) {
+//                    ltQ[p] -= ltI[q] * ltI[p];
+//                }
+//            }
+//        }
+            if (lI[i] < absolutePositivityThreshold) {
                 throw new NotPositiveDefiniteMatrixException();
             }
             // check off-diagonal elements (and reset them to 0)
             for (int j = i + 1; j < order; ++j) {
-                final double[] lJ = lTData[j];
                 final double lIJ = lI[j];
-                final double lJI = lJ[i];
+                final double lJI = lTData[j][i];
                 final double maxDelta =
-                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
-                if (Math.abs(lIJ - lJI) > maxDelta) {
-                    throw new NotSymmetricMatrixException();
-                }
-                lJ[i] = 0;
-           }
-        }
-
-        // transform the matrix
-        for (int i = 0; i < order; ++i) {
-
-            final double[] ltI = lTData[i];
-
-            // check diagonal element
-
+                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ
             ltI[i] = Math.sqrt(ltI[i]);
             final double inverse = 1.0 / ltI[i];
-
             for (int q = order - 1; q > i; --q) {
                 ltI[q] *= inverse;
                 final double[] ltQ = lTData[q];
                 for (int p = q; p < order; ++p) {
                     ltQ[p] -= ltI[q] * ltI[p];
                 }
             }
-
         }
-
     }
