diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/5b01f9b1-af38-4952-ae74-dd5c78869ee9_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/fb9310ff-4db8-43e0-bee5-384d94658636_fixed.java
index 227a4ef..0a9f621 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/5b01f9b1-af38-4952-ae74-dd5c78869ee9_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/fb9310ff-4db8-43e0-bee5-384d94658636_fixed.java
@@ -1,48 +1,54 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
-
         if (pos == -1)
         {
             sb.append(rtrim(text));
-
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
         // all following lines must be padded with nextLineTabStop space 
         // characters
         final String padding = createPadding(nextLineTabStop);
-
         while (true)
         {
-            int lastPos = pos;
+// buggy code
+//            int lastPos = pos;
+//            text = padding + text.substring(pos).trim();
+//            pos = findWrapPos(text, width, 0);
+//            if (pos == -1)
+//            {
+//                sb.append(text);
+//                return sb;
+//            } else
+//            if (pos == lastPos)
+//            {
+//                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
+//            }
+            final int lastPos = pos;
             text = padding + text.substring(pos).trim();
             pos = findWrapPos(text, width, 0);
-
             if (pos == -1)
             {
                 sb.append(text);
-
                 return sb;
-            } else
-            if (pos == lastPos)
+            } else if (pos == lastPos)
             {
                 throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
-            }
 
+            }
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
