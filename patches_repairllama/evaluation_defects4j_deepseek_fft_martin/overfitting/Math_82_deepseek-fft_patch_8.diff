diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0cb9c016-950c-45fe-8a59-d5ec27b6bdd0_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/585cb49d-3063-4091-bedc-ed90ae333c66_fixed.java
index 220820e..d4d21ef 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0cb9c016-950c-45fe-8a59-d5ec27b6bdd0_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/585cb49d-3063-4091-bedc-ed90ae333c66_fixed.java
@@ -1,22 +1,25 @@
     /**
      * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
      * @param tableau simple tableau for the problem
      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
      * @return row with the minimum ratio
      */
     private Integer getPivotRow(final int col, final SimplexTableau tableau) {
         double minRatio = Double.MAX_VALUE;
         Integer minRatioPos = null;
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
             final double entry = tableau.getEntry(i, col);
-            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {
+// buggy code
+//            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {
+            if (entry > 0) {
+
                 final double ratio = rhs / entry;
                 if (ratio < minRatio) {
                     minRatio = ratio;
                     minRatioPos = i; 
                 }
             }
         }
         return minRatioPos;
     }
