diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1455ef95-02f6-450a-88da-5cddad8a57f0_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9907c4a0-5592-46c5-aa6f-e2b56fc0dd55_fixed.java
index 8ff679b..4dcdf9c 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1455ef95-02f6-450a-88da-5cddad8a57f0_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9907c4a0-5592-46c5-aa6f-e2b56fc0dd55_fixed.java
@@ -1,39 +1,45 @@
   /**
    * Check whether there's any property conflict for for a particular super
    * interface
    * @param t The node traversal object that supplies context
    * @param n The node being visited
    * @param functionName The function name being checked
    * @param properties The property names in the super interfaces that have
    * been visited
    * @param currentProperties The property names in the super interface
    * that have been visited
    * @param interfaceType The super interface that is being visited
    */
   private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
       String functionName, HashMap<String, ObjectType> properties,
       HashMap<String, ObjectType> currentProperties,
       ObjectType interfaceType) {
     ObjectType implicitProto = interfaceType.getImplicitPrototype();
     Set<String> currentPropertyNames;
-      // This can be the case if interfaceType is proxy to a non-existent
-      // object (which is a bad type annotation, but shouldn't crash).
+// buggy code
+//      // This can be the case if interfaceType is proxy to a non-existent
+//      // object (which is a bad type annotation, but shouldn't crash).
+//      currentPropertyNames = implicitProto.getOwnPropertyNames();
+    if (implicitProto == null) {
+      return;
+    }
     currentPropertyNames = implicitProto.getOwnPropertyNames();
+
     for (String name : currentPropertyNames) {
       ObjectType oType = properties.get(name);
       if (oType != null) {
         if (!interfaceType.getPropertyType(name).isEquivalentTo(
             oType.getPropertyType(name))) {
           compiler.report(
               t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
                   functionName, name, oType.toString(),
                   interfaceType.toString()));
         }
       }
       currentProperties.put(name, interfaceType);
     }
     for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
       checkInterfaceConflictProperties(t, n, functionName, properties,
           currentProperties, iType);
     }
   }
