diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9378e473-772a-4b95-a1c5-0c23c55ab4b3_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/55bb8d43-e20e-489e-8b30-ada8dc258a34_fixed.java
index 1303a19..05ae26a 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9378e473-772a-4b95-a1c5-0c23c55ab4b3_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/55bb8d43-e20e-489e-8b30-ada8dc258a34_fixed.java
@@ -1,45 +1,39 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
-    // If GETPROP/GETELEM is used as assignment target the array literal is
-    // acting as a temporary we can't fold it here:
-    //    "[][0] += 1"
-
+// buggy code
+   if (parent == null) {
+      return n;
+    }
+    if (parent.getType() != Token.GETELEM) {
+      return n;
+    }
     if (right.getType() != Token.NUMBER) {
-      // Sometimes people like to use complex expressions to index into
-      // arrays, or strings to index into array methods.
       return n;
     }
-
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
-
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
-
     Node elem = left.getFirstChild();
     for (int i = 0; elem != null && i < intIndex; i++) {
       elem = elem.getNext();
     }
-
     if (elem == null) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
-
     if (elem.getType() == Token.EMPTY) {
       elem = NodeUtil.newUndefinedNode(elem);
     } else {
       left.removeChild(elem);
     }
-
-    // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
   }
