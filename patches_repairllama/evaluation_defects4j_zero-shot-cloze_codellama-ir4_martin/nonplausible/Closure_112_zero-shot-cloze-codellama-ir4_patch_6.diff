diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/32f70f7f-f14c-4961-9570-decca32e21a8_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/416f1051-e253-48e4-917f-6e7b08f712d9_fixed.java
index 618a37c..5249f47 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/32f70f7f-f14c-4961-9570-decca32e21a8_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/416f1051-e253-48e4-917f-6e7b08f712d9_fixed.java
@@ -1,28 +1,26 @@
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
-
-    // Try to infer the template types
+// buggy code
+//    Map<TemplateType, JSType> inferred =
+//        inferTemplateTypesFromParameters(fnType, n);
    Map<TemplateType, JSType> inferred =
-        inferTemplateTypesFromParameters(fnType, n);
+        inferTemplateTypesFromArguments(fnType, n);
+    if (inferred == null) {
+      return false;
+    }
 
-
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
-
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
-
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
-
     return replacer.madeChanges;
   }
