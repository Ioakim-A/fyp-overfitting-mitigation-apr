diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/05678e93-b9fe-4bcc-884a-c7895a5a0241_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/14014142-ed14-43f4-bfb5-19c296f481bc_fixed.java
index 02afa2a..5101a12 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/05678e93-b9fe-4bcc-884a-c7895a5a0241_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/14014142-ed14-43f4-bfb5-19c296f481bc_fixed.java
@@ -1,28 +1,49 @@
   static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
       case Token.STRING:
       case Token.NUMBER:
       case Token.TRUE:
       case Token.FALSE:
         return true;
-
-      // Binary operators are only valid if both children are valid.
-      case Token.BITAND:
-      case Token.BITNOT:
-      case Token.BITOR:
-      case Token.BITXOR:
-
-      // Uniary operators are valid if the child is valid.
-      case Token.NOT:
-      case Token.NEG:
+// buggy code
+//      case Token.BITAND:
+//      case Token.BITNOT:
+//      case Token.BITOR:
+//      case Token.BITXOR:
+//      case Token.NOT:
+//      case Token.NEG:
+//      case Token.ADD:
+//      case Token.SUB:
+//      case Token.MUL:
+//      case Token.DIV:
+//      case Token.MOD:
+//      case Token.LSH:
+//      case Token.RSH:
+//      case Token.URSH:
+//      case Token.ASSIGN_BITAND:
+//      case Token.ASSIGN_BITOR:
+//      case Token.ASSIGN_BITXOR:
+//      case Token.ASSIGN_LSH:
+//      case Token.ASSIGN_RSH:
+//      case Token.ASSIGN_URSH:
+//      case Token.ASSIGN_ADD:
+//      case Token.ASSIGN_SUB:
+//      case Token.ASSIGN_MUL:
+//      case Token.ASSIGN_DIV:
+//      case Token.ASSIGN_MOD:
+//      case Token.HOOK:
+//      case Token.OR:
+//      case Token.AND:
+//      case Token.EQ:
+//      case Token.NE:
+//      case Token.SHEQ:
+//      case Token.
         return isValidDefineValue(val.getFirstChild(), defines);
-
-      // Names are valid if and only if they are defines themselves.
       case Token.NAME:
       case Token.GETPROP:
         if (val.isQualifiedName()) {
           return defines.contains(val.getQualifiedName());
         }
     }
     return false;
   }
