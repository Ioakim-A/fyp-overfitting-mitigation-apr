diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/42e311fe-dfbd-4099-9b9c-53ef1e297d7d_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/bf17f660-0f59-4a57-b3c9-c6e188065dfc_fixed.java
index 01c7c46..a5c0989 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/42e311fe-dfbd-4099-9b9c-53ef1e297d7d_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/bf17f660-0f59-4a57-b3c9-c6e188065dfc_fixed.java
@@ -1,27 +1 @@
-    protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,
-            TokenBuffer tb) throws IOException
-    {
-        // As per [JACKSON-614], may have default implementation to use
-        JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
-        if (deser != null) {
-            if (tb != null) {
-                tb.writeEndObject();
-                p = tb.asParser(p);
-                // must move to point to the first token:
-                p.nextToken();
-            }
-            return deser.deserialize(p, ctxt);
-        }
-        // or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
-        Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);
-        if (result != null) {
-            return result;
-        }
-        // or, something for which "as-property" won't work, changed into "wrapper-array" type:
-        if (p.getCurrentToken() == JsonToken.START_ARRAY) {
         return super.deserializeTypedFromAny(p, ctxt);
\ No newline at end of file
-        }
-        ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
-                "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
-        return null;
-    }
