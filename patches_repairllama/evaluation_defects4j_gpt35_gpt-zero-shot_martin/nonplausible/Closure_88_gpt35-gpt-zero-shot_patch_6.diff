diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/eddd8a96-d96a-4903-a930-5770ab227692_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c8ae6fff-1444-4df4-835f-39a64a5329df_fixed.java
index ca2992e..6513c2e 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/eddd8a96-d96a-4903-a930-5770ab227692_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c8ae6fff-1444-4df4-835f-39a64a5329df_fixed.java
@@ -1,25 +1,27 @@
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+      // Fix: Add the following code to handle the case when the variable is read
+      if (n.getParent().isAssign()) {
+        return VariableLiveness.READ;
+      }
+      // Fix: Add the following code to handle the case when the variable is killed
+      if (n.getParent().isDelProp()) {
         return VariableLiveness.KILL;
+      }
     } else {
       return VariableLiveness.READ;
     }
   }
-
-    // Expressions are evaluated left-right, depth first.
   for (Node child = n.getFirstChild();
       child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+    if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { 
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state != VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
