diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1f891f72-ea16-4d40-b14f-b137bd931560_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a81be137-d906-4488-b790-62ff046c3c51_fixed.java
index a0eee42..09aae57 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1f891f72-ea16-4d40-b14f-b137bd931560_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a81be137-d906-4488-b790-62ff046c3c51_fixed.java
@@ -1,25 +1,5 @@
-    private void getNumUseInUseCfgNode(final Node cfgNode) {
-
-      numUsesWithinCfgNode = 0;
-      AbstractCfgNodeTraversalCallback gatherCb =
-          new AbstractCfgNodeTraversalCallback() {
-
-        @Override
-        public void visit(NodeTraversal t, Node n, Node parent) {
 if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
     !(parent.isAssign() &&
     (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
     numUsesWithinCfgNode++;
 }
\ No newline at end of file
-        }
-
-      };
-
-      NodeTraversal.traverse(compiler, cfgNode, gatherCb);
-    }
