diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e8baa108-0c73-4f3f-908c-f540c9d72929_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6dfa68d6-4485-400f-a28f-4a14c6c5bf9e_fixed.java
index f3bca8d..911e1da 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e8baa108-0c73-4f3f-908c-f540c9d72929_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/6dfa68d6-4485-400f-a28f-4a14c6c5bf9e_fixed.java
@@ -1,37 +1,22 @@
 private void inlineAliases(GlobalNamespace namespace) {
-    // Invariant: All the names in the worklist meet condition (a).
   Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());
   while (!workList.isEmpty()) {
     Name name = workList.pop();
-
-      // Don't attempt to inline a getter or setter property as a variable.
     if (name.type == Name.Type.GET || name.type == Name.Type.SET) {
       continue;
     }
-
-      if (name.globalSets == 1 && name.localSets == 0 &&
-          name.aliasingGets > 0) {
-        // {@code name} meets condition (b). Find all of its local aliases
-        // and try to inline them.
+    if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0) {
       List<Ref> refs = Lists.newArrayList(name.getRefs());
       for (Ref ref : refs) {
         if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {
-            // {@code name} meets condition (c). Try to inline it.
           if (inlineAliasIfPossible(ref, namespace)) {
             name.removeRef(ref);
           }
         }
       }
     }
-
-      // Check if {@code name} has any aliases left after the
-      // local-alias-inlining above.
-      if ((name.type == Name.Type.OBJECTLIT ||
-           name.type == Name.Type.FUNCTION) &&
-          name.aliasingGets == 0 && name.props != null) {
-        // All of {@code name}'s children meet condition (a), so they can be
-        // added to the worklist.
+    if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) && name.aliasingGets == 0 && name.props != null) {
       workList.addAll(name.props);
     }
   }
 }
\ No newline at end of file
