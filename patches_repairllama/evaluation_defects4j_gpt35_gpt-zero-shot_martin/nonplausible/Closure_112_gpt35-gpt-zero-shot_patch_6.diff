diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/92b0e848-2128-4475-aedc-36ad150cbb0a_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/92f0d3e8-4b82-4b45-870a-686eaf97d551_fixed.java
index 618a37c..457bfd7 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/92b0e848-2128-4475-aedc-36ad150cbb0a_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/92f0d3e8-4b82-4b45-870a-686eaf97d551_fixed.java
@@ -1,28 +1 @@
-  private boolean inferTemplatedTypesForCall(
-      Node n, FunctionType fnType) {
-    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
-        .getTemplateKeys();
-    if (keys.isEmpty()) {
-      return false;
-    }
-
-    // Try to infer the template types
-    Map<TemplateType, JSType> inferred =
-        inferTemplateTypesFromParameters(fnType, n);
-
-
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
-    TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
-    Node callTarget = n.getFirstChild();
-
-    FunctionType replacementFnType = fnType.visit(replacer)
-        .toMaybeFunctionType();
-    Preconditions.checkNotNull(replacementFnType);
-
-    callTarget.setJSType(replacementFnType);
-    n.setJSType(replacementFnType.getReturnType());
-
-    return replacer.madeChanges;
-  }
+Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, n);
\ No newline at end of file
