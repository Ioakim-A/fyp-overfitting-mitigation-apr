diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/cb2ee669-6c9f-419c-82e7-c5123bd7811d_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/063b6356-ecd1-438b-b8c5-f41c7ecbe004_fixed.java
index dfceb86..d29331d 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/cb2ee669-6c9f-419c-82e7-c5123bd7811d_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/063b6356-ecd1-438b-b8c5-f41c7ecbe004_fixed.java
@@ -1,54 +1,42 @@
 String getReadableJSTypeName(Node n, boolean dereference) {
-
-    // The best type name is the actual type name.
-
-    // If we're analyzing a GETPROP, the property may be inherited by the
-    // prototype chain. So climb the prototype chain and find out where
-    // the property was originally defined.
+    JSType type = getJSType(n);
+    if (dereference) {
+        ObjectType dereferenced = type.dereference();
+        if (dereferenced != null) {
+            type = dereferenced;
+        }
+    }
     if (n.isGetProp()) {
         ObjectType objectType = getJSType(n.getFirstChild()).dereference();
         if (objectType != null) {
             String propName = n.getLastChild().getString();
             if (objectType.getConstructor() != null &&
                 objectType.getConstructor().isInterface()) {
                 objectType = FunctionType.getTopDefiningInterface(
                     objectType, propName);
             } else {
-          // classes
                 while (objectType != null && !objectType.hasOwnProperty(propName)) {
                     objectType = objectType.getImplicitPrototype();
                 }
             }
-
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
             if (objectType != null &&
                 (objectType.getConstructor() != null ||
                 objectType.isFunctionPrototypeType())) {
                 return objectType.toString() + "." + propName;
             }
         }
     }
-
-    JSType type = getJSType(n);
-    if (dereference) {
-      ObjectType dereferenced = type.dereference();
-      if (dereferenced != null) {
-        type = dereferenced;
-      }
-    }
     if (type.isFunctionPrototypeType() ||
         (type.toObjectType() != null &&
         type.toObjectType().getConstructor() != null)) {
         return type.toString();
     }
     String qualifiedName = n.getQualifiedName();
     if (qualifiedName != null) {
         return qualifiedName;
     } else if (type.isFunctionType()) {
-      // Don't show complex function names.
         return "function";
     } else {
         return type.toString();
     }
 }
\ No newline at end of file
