diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/45e464c6-2643-413e-a5a3-29204d845435_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/55924eb4-38bf-46f1-b93e-96402f024de4_fixed.java
index d4e6d48..6f2ffc7 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/45e464c6-2643-413e-a5a3-29204d845435_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/55924eb4-38bf-46f1-b93e-96402f024de4_fixed.java
@@ -1,23 +1,24 @@
 private Node tryFoldSimpleFunctionCall(Node n) {
   Preconditions.checkState(n.isCall());
   Node callTarget = n.getFirstChild();
   if (callTarget != null && callTarget.isName() &&
         callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
     Node value = callTarget.getNext();
     if (value != null) {
       Node addition = IR.add(
           IR.string("").srcref(callTarget),
           value.detachFromParent());
       n.getParent().replaceChild(n, addition);
       reportCodeChange();
       return addition;
     }
+    // Fixed code
+    else {
+      Node emptyString = IR.string("").srcref(callTarget);
+      n.getParent().replaceChild(n, emptyString);
+      reportCodeChange();
+      return emptyString;
+    }
   }
   return n;
 }
\ No newline at end of file
