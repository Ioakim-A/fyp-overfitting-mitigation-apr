diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/33bd0269-032f-492c-8341-02e4503c504b_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b7e7926f-065f-425b-907d-ec320d58e4ce_fixed.java
index 511ea30..2c5b9a4 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/33bd0269-032f-492c-8341-02e4503c504b_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b7e7926f-065f-425b-907d-ec320d58e4ce_fixed.java
@@ -1,28 +1,52 @@
-    public double solve(double min, double max) throws MaxIterationsExceededException, 
-        FunctionEvaluationException {
-        
+public double solve(double min, double max) throws MaxIterationsExceededException, FunctionEvaluationException {
     clearResult();
     verifyInterval(min, max);
-        
     double ret = Double.NaN;
-        
     double yMin = f.value(min);
     double yMax = f.value(max);
-        
-        // Verify bracketing
     double sign = yMin * yMax;
+    
     if (sign >= 0) {
-            // check if either value is close to a zero
-                // neither value is close to zero and min and max do not bracket root.
-                throw new IllegalArgumentException
-                ("Function values at endpoints do not have different signs." +
+        throw new IllegalArgumentException("Function values at endpoints do not have different signs." +
                 "  Endpoints: [" + min + "," + max + "]" +
                 "  Values: [" + yMin + "," + yMax + "]");
     } else {
-            // solve using only the first endpoint as initial guess
         ret = solve(min, yMin, max, yMax, min, yMin);
-            // either min or max is a root
     }
     
     return ret;
 }
+
+private double solve(double min, double yMin, double max, double yMax, double oldMin, double oldYMin)
+        throws MaxIterationsExceededException, FunctionEvaluationException {
+    
+    double mid = (min + max) / 2;
+    double yMid = f.value(mid);
+    
+    if (Math.abs(yMid) <= Math.abs(tol)) {
+        setResult(mid, yMid);
+        return mid;
+    }
+    
+    if (yMid * oldYMin < 0) {
+        return solve(oldMin, oldYMin, mid, yMid, oldMin, oldYMin);
+    } else {
+        return solve(mid, yMid, max, yMax, oldMin, oldYMin);
+    }
+}
+
+private void setResult(double x, double y) {
+    result = x;
+    value = y;
+}
+
+private void clearResult() {
+    result = Double.NaN;
+    value = Double.NaN;
+}
+
+private void verifyInterval(double min, double max) {
+    if (min >= max) {
+        throw new IllegalArgumentException("Invalid interval: [" + min + "," + max + "]");
+    }
+}
\ No newline at end of file
