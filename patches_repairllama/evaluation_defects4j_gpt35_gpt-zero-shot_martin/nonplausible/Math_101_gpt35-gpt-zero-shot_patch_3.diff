diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/be7209c4-31a2-4ff3-b90c-7d3a61943090_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/74971acd-6535-4d48-aa09-d792aff38b26_fixed.java
index 9637fa4..e165732 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/be7209c4-31a2-4ff3-b90c-7d3a61943090_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/74971acd-6535-4d48-aa09-d792aff38b26_fixed.java
@@ -1,70 +1,5 @@
-    public Complex parse(String source, ParsePosition pos) {
-        int initialIndex = pos.getIndex();
-
-        // parse whitespace
-        parseAndIgnoreWhitespace(source, pos);
-
-        // parse real
-        Number re = parseNumber(source, getRealFormat(), pos);
-        if (re == null) {
-            // invalid real number
-            // set index back to initial, error index should already be set
-            // character examined.
-            pos.setIndex(initialIndex);
-            return null;
-        }
-
-        // parse sign
-        int startIndex = pos.getIndex();
-        char c = parseNextCharacter(source, pos);
-        int sign = 0;
-        switch (c) {
-        case 0 :
-            // no sign
-            // return real only complex number
-            return new Complex(re.doubleValue(), 0.0);
-        case '-' :
-            sign = -1;
-            break;
-        case '+' :
-            sign = 1;
-            break;
-        default :
-            // invalid sign
-            // set index back to initial, error index should be the last
-            // character examined.
+if (!source.substring(startIndex, endIndex).equals(getImaginaryCharacter())) {
     pos.setIndex(initialIndex);
     pos.setErrorIndex(startIndex);
     return null;
 }
\ No newline at end of file
-
-        // parse whitespace
-        parseAndIgnoreWhitespace(source, pos);
-
-        // parse imaginary
-        Number im = parseNumber(source, getRealFormat(), pos);
-        if (im == null) {
-            // invalid imaginary number
-            // set index back to initial, error index should already be set
-            // character examined.
-            pos.setIndex(initialIndex);
-            return null;
-        }
-
-        // parse imaginary character
-        int n = getImaginaryCharacter().length();
-        startIndex = pos.getIndex();
-        int endIndex = startIndex + n;
-        if (
-            source.substring(startIndex, endIndex).compareTo(
-            getImaginaryCharacter()) != 0) {
-            // set index back to initial, error index should be the start index
-            // character examined.
-            pos.setIndex(initialIndex);
-            pos.setErrorIndex(startIndex);
-            return null;
-        }
-        pos.setIndex(endIndex);
-
-        return new Complex(re.doubleValue(), im.doubleValue() * sign);
-    }
