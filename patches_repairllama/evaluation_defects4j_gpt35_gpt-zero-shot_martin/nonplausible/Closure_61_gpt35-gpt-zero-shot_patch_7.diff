diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e7662f03-7586-49e3-8fa0-79c5ee454330_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/101eb6b5-3fec-476c-9292-e9ae60ce5415_fixed.java
index d2dd743..c156e9c 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e7662f03-7586-49e3-8fa0-79c5ee454330_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/101eb6b5-3fec-476c-9292-e9ae60ce5415_fixed.java
@@ -1,51 +1,16 @@
-  static boolean functionCallHasSideEffects(
-      Node callNode, @Nullable AbstractCompiler compiler) {
-    if (callNode.getType() != Token.CALL) {
-      throw new IllegalStateException(
-          "Expected CALL node, got " + Token.name(callNode.getType()));
-    }
-
-    if (callNode.isNoSideEffectsCall()) {
-      return false;
-    }
-
-    Node nameNode = callNode.getFirstChild();
-
-    // Built-in functions with no side effects.
-    if (nameNode.getType() == Token.NAME) {
-      String name = nameNode.getString();
-      if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
-        return false;
-      }
-    } else if (nameNode.getType() == Token.GETPROP) {
-      if (callNode.hasOneChild()
-          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
-                nameNode.getLastChild().getString())) {
-        return false;
-      }
-
-      if (callNode.isOnlyModifiesThisCall()
-          && evaluatesToLocalValue(nameNode.getFirstChild())) {
-        return false;
-      }
-
-      // Functions in the "Math" namespace have no side effects.
-
       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
         if (nameNode.getFirstChild().getType() == Token.REGEXP
             && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
           return false;
         } else if (nameNode.getFirstChild().getType() == Token.STRING
             && STRING_REGEXP_METHODS.contains(
                 nameNode.getLastChild().getString())) {
           Node param = nameNode.getNext();
           if (param != null &&
               (param.getType() == Token.STRING
                   || param.getType() == Token.REGEXP))
           return false;
         }
-      }
-    }
-
-    return true;
+      } else {
+        return false;
       }
\ No newline at end of file
