diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/bb6d539f-1045-4c2e-928e-36eacaaaa6eb_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/fcaa17d5-ec8b-472e-9c43-5a041c25207d_fixed.java
index b98f0a7..f08fd1c 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/bb6d539f-1045-4c2e-928e-36eacaaaa6eb_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/fcaa17d5-ec8b-472e-9c43-5a041c25207d_fixed.java
@@ -1,29 +1,25 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
\ No newline at end of file
