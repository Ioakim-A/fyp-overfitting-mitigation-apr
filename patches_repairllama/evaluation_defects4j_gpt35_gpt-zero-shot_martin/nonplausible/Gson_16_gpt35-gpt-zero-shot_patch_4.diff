diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0dd5e0a3-95bf-40e3-98eb-afc8b17a6f5d_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/68c6820f-2cf6-4c04-9a72-f120e88b3b2a_fixed.java
index 79880a8..c12d524 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0dd5e0a3-95bf-40e3-98eb-afc8b17a6f5d_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/68c6820f-2cf6-4c04-9a72-f120e88b3b2a_fixed.java
@@ -1,73 +1,69 @@
 private static Type resolve(Type context, Class<?> contextRawType, Type toResolve,
-                              Collection<TypeVariable> visitedTypeVariables) {
-    // this implementation is made a little more complicated in an attempt to avoid object-creation
+                            Collection<TypeVariable<?>> visitedTypeVariables) {
   while (true) {
     if (toResolve instanceof TypeVariable) {
       TypeVariable<?> typeVariable = (TypeVariable<?>) toResolve;
-          // cannot reduce due to infinite recursion
+      if (visitedTypeVariables.contains(typeVariable)) {
+        // Recursive type variable resolution.
+        return toResolve;
+      } else {
+        visitedTypeVariables.add(typeVariable);
         toResolve = resolveTypeVariable(context, contextRawType, typeVariable);
         if (toResolve == typeVariable) {
           return toResolve;
         }
-
+      }
     } else if (toResolve instanceof Class && ((Class<?>) toResolve).isArray()) {
       Class<?> original = (Class<?>) toResolve;
       Type componentType = original.getComponentType();
       Type newComponentType = resolve(context, contextRawType, componentType, visitedTypeVariables);
       return componentType == newComponentType
           ? original
           : arrayOf(newComponentType);
-
     } else if (toResolve instanceof GenericArrayType) {
       GenericArrayType original = (GenericArrayType) toResolve;
       Type componentType = original.getGenericComponentType();
       Type newComponentType = resolve(context, contextRawType, componentType, visitedTypeVariables);
       return componentType == newComponentType
           ? original
           : arrayOf(newComponentType);
-
     } else if (toResolve instanceof ParameterizedType) {
       ParameterizedType original = (ParameterizedType) toResolve;
       Type ownerType = original.getOwnerType();
       Type newOwnerType = resolve(context, contextRawType, ownerType, visitedTypeVariables);
       boolean changed = newOwnerType != ownerType;
-
       Type[] args = original.getActualTypeArguments();
       for (int t = 0, length = args.length; t < length; t++) {
         Type resolvedTypeArgument = resolve(context, contextRawType, args[t], visitedTypeVariables);
         if (resolvedTypeArgument != args[t]) {
           if (!changed) {
             args = args.clone();
             changed = true;
           }
           args[t] = resolvedTypeArgument;
         }
       }
-
       return changed
           ? newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args)
           : original;
-
     } else if (toResolve instanceof WildcardType) {
       WildcardType original = (WildcardType) toResolve;
       Type[] originalLowerBound = original.getLowerBounds();
       Type[] originalUpperBound = original.getUpperBounds();
-
       if (originalLowerBound.length == 1) {
         Type lowerBound = resolve(context, contextRawType, originalLowerBound[0], visitedTypeVariables);
         if (lowerBound != originalLowerBound[0]) {
           return supertypeOf(lowerBound);
         }
       } else if (originalUpperBound.length == 1) {
         Type upperBound = resolve(context, contextRawType, originalUpperBound[0], visitedTypeVariables);
         if (upperBound != originalUpperBound[0]) {
           return subtypeOf(upperBound);
         }
       }
       return original;
-
     } else {
       return toResolve;
     }
   }
 }
\ No newline at end of file
