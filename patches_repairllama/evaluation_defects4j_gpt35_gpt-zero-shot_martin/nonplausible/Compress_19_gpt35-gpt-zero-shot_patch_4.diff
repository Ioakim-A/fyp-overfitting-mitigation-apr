diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a8e7d6ba-3df6-4054-b3a1-9cc4d772aa73_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/790dec64-5d85-45f3-82f1-9839d9b962b6_fixed.java
index af634a5..decf74e 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a8e7d6ba-3df6-4054-b3a1-9cc4d772aa73_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/790dec64-5d85-45f3-82f1-9839d9b962b6_fixed.java
@@ -1,39 +1,39 @@
     public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                             boolean hasCompressedSize,
                                             boolean hasRelativeHeaderOffset,
                                             boolean hasDiskStart)
         throws ZipException {
         if (rawCentralDirectoryData != null) {
             int expectedLength = (hasUncompressedSize ? DWORD : 0)
                 + (hasCompressedSize ? DWORD : 0)
                 + (hasRelativeHeaderOffset ? DWORD : 0)
                 + (hasDiskStart ? WORD : 0);
             if (rawCentralDirectoryData.length != expectedLength) {
                 throw new ZipException("central directory zip64 extended"
                                        + " information extra field's length"
                                        + " doesn't match central directory"
                                        + " data.  Expected length "
                                        + expectedLength + " but is "
                                        + rawCentralDirectoryData.length);
             }
             int offset = 0;
             if (hasUncompressedSize) {
-                size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
+                size = new ZipEightByteInteger(rawCentralDirectoryData, offset).getLongValue();
                 offset += DWORD;
             }
             if (hasCompressedSize) {
                 compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
-                                                         offset);
+                                                         offset).getLongValue();
                 offset += DWORD;
             }
             if (hasRelativeHeaderOffset) {
                 relativeHeaderOffset =
-                    new ZipEightByteInteger(rawCentralDirectoryData, offset);
+                    new ZipEightByteInteger(rawCentralDirectoryData, offset).getLongValue();
                 offset += DWORD;
             }
             if (hasDiskStart) {
-                diskStart = new ZipLong(rawCentralDirectoryData, offset);
+                diskStart = new ZipLong(rawCentralDirectoryData, offset).getValue();
                 offset += WORD;
             }
         }
     }
\ No newline at end of file
