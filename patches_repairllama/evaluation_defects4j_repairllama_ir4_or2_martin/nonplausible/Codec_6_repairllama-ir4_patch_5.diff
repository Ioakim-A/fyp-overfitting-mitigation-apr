diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0cbd04a0-6b87-45cd-889d-16c605cd229d_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/68648e9d-3087-4131-bdf9-1a5fa17f8678_fixed.java
index 5424d9c..580006a 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0cbd04a0-6b87-45cd-889d-16c605cd229d_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/68648e9d-3087-4131-bdf9-1a5fa17f8678_fixed.java
@@ -1,43 +1,38 @@
     public int read(byte b[], int offset, int len) throws IOException {
         if (b == null) {
             throw new NullPointerException();
         } else if (offset < 0 || len < 0) {
             throw new IndexOutOfBoundsException();
         } else if (offset > b.length || offset + len > b.length) {
             throw new IndexOutOfBoundsException();
         } else if (len == 0) {
             return 0;
         } else {
-            /*
-             Rationale for while-loop on (readLen == 0):
-             -----
-             Base64.readResults() usually returns > 0 or EOF (-1).  In the
-             rare case where it returns 0, we just keep trying.
-
-             This is essentially an undocumented contract for InputStream
-             implementors that want their code to work properly with
-             java.io.InputStreamReader, since the latter hates it when
-             InputStream.read(byte[]) returns a zero.  Unfortunately our
-             readResults() call must return 0 if a large amount of the data
-             being decoded was non-base64, so this while-loop enables proper
-             interop with InputStreamReader for that scenario.
-             -----
-             This is a fix for CODEC-101
-            */
+// buggy code
+//                 if (!base64.hasData()) {
+//                     byte[] buf = new byte[doEncode ? 4096 : 8192];
+//                     int c = in.read(buf);
+//                     if (c > 0 && b.length == len) {
+//                         base64.setInitialBuffer(b, offset, len);
+//                     }
+//                     if (doEncode) {
+//                         base64.encode(buf, 0, c);
+//                     } else {
+//                         base64.decode(buf, 0, c);
+//                     }
+//                 }
+//             return base64.readResults(b, offset, len);
            if (!base64.hasData()) {
                 byte[] buf = new byte[doEncode ? 4096 : 8192];
                 int c = in.read(buf);
-                    // A little optimization to avoid System.arraycopy()
-                    // when possible.
-                    if (c > 0 && b.length == len) {
-                        base64.setInitialBuffer(b, offset, len);
-                    }
+                if (c > 0) {
                     if (doEncode) {
                         base64.encode(buf, 0, c);
                     } else {
                         base64.decode(buf, 0, c);
                     }
                 }
+            }
             return base64.readResults(b, offset, len);
         }
     }
