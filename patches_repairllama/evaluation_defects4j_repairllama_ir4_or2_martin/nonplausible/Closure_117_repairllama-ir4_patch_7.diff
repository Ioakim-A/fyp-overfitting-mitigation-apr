diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/ed68fd04-ce29-4cb7-9d68-7c8e51105474_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4d506063-3cba-458a-b9ef-5b7e60dc64b5_fixed.java
index dfceb86..129b32d 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/ed68fd04-ce29-4cb7-9d68-7c8e51105474_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/4d506063-3cba-458a-b9ef-5b7e60dc64b5_fixed.java
@@ -1,54 +1,43 @@
   String getReadableJSTypeName(Node n, boolean dereference) {
-
-    // The best type name is the actual type name.
-
-    // If we're analyzing a GETPROP, the property may be inherited by the
-    // prototype chain. So climb the prototype chain and find out where
-    // the property was originally defined.
-    if (n.isGetProp()) {
-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();
-      if (objectType != null) {
-        String propName = n.getLastChild().getString();
-        if (objectType.getConstructor() != null &&
-            objectType.getConstructor().isInterface()) {
-          objectType = FunctionType.getTopDefiningInterface(
-              objectType, propName);
-        } else {
-          // classes
-          while (objectType != null && !objectType.hasOwnProperty(propName)) {
-            objectType = objectType.getImplicitPrototype();
-          }
-        }
-
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
-        if (objectType != null &&
-            (objectType.getConstructor() != null ||
-             objectType.isFunctionPrototypeType())) {
-          return objectType.toString() + "." + propName;
-        }
-      }
-    }
-
-    JSType type = getJSType(n);
-    if (dereference) {
-      ObjectType dereferenced = type.dereference();
-      if (dereferenced != null) {
-        type = dereferenced;
-      }
-    }
-    if (type.isFunctionPrototypeType() ||
-        (type.toObjectType() != null &&
-         type.toObjectType().getConstructor() != null)) {
-      return type.toString();
-    }
+// buggy code
+//     if (n.isGetProp()) {
+//       ObjectType objectType = getJSType(n.getFirstChild()).dereference();
+//       if (objectType != null) {
+//         String propName = n.getLastChild().getString();
+//         if (objectType.getConstructor() != null &&
+//             objectType.getConstructor().isInterface()) {
+//           objectType = FunctionType.getTopDefiningInterface(
+//               objectType, propName);
+//         } else {
+//           while (objectType != null && !objectType.hasOwnProperty(propName)) {
+//             objectType = objectType.getImplicitPrototype();
+//           }
+//         }
+//         if (objectType != null &&
+//             (objectType.getConstructor() != null ||
+//              objectType.isFunctionPrototypeType())) {
+//           return objectType.toString() + "." + propName;
+//         }
+//       }
+//     }
+//     JSType type = getJSType(n);
+//     if (dereference) {
+//       ObjectType dereferenced = type.dereference();
+//       if (dereferenced != null) {
+//         type = dereferenced;
+//       }
+//     }
+//     if (type.isFunctionPrototypeType() ||
+//         (type.toObjectType() != null &&
+//          type.toObjectType().getConstructor() != null)) {
+//       return type.toString();
+//     }
     String qualifiedName = n.getQualifiedName();
     if (qualifiedName != null) {
       return qualifiedName;
     } else if (type.isFunctionType()) {
-      // Don't show complex function names.
       return "function";
     } else {
       return type.toString();
     }
   }
