diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/ca3b3864-f155-475d-b676-ae6c188f2e32_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a3130ef5-637e-4c2e-a136-5a84098e0fbc_fixed.java
index cba47b8..edd2890 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/ca3b3864-f155-475d-b676-ae6c188f2e32_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a3130ef5-637e-4c2e-a136-5a84098e0fbc_fixed.java
@@ -1,77 +1,62 @@
     public Fraction parse(String source, ParsePosition pos) {
-        // try to parse improper fraction
         Fraction ret = super.parse(source, pos);
         if (ret != null) {
             return ret;
         }
-        
         int initialIndex = pos.getIndex();
-
-        // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
-
-        // parse whole
         Number whole = getWholeFormat().parse(source, pos);
         if (whole == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
-
-        // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
-        
-        // parse numerator
         Number num = getNumeratorFormat().parse(source, pos);
         if (num == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
-            pos.setIndex(initialIndex);
+// buggy code
+//             pos.setIndex(initialIndex);
+//             return null;
+//         }
+//         int startIndex = pos.getIndex();
+//         char c = parseNextCharacter(source, pos);
+//         switch (c) {
+//         case 0 :
+//             return new Fraction(num.intValue(), 1);
+//         case '/' :
+//             break;
+//         default :
+//             pos.setIndex(initialIndex);
+//             pos.setErrorIndex(startIndex);
+//             return null;
+//         }
+//         parseAndIgnoreWhitespace(source, pos);
+//         Number den = getDenominatorFormat().parse(source, pos);
+//         if (den == null) {
+//             pos.setIndex(initialIndex);
+//             return null;
+//         }
+           pos.setErrorIndex(initialIndex);
             return null;
         }
-        
-            // minus signs should be leading, invalid expression
-
-        // parse '/'
         int startIndex = pos.getIndex();
         char c = parseNextCharacter(source, pos);
         switch (c) {
         case 0 :
-            // no '/'
-            // return num as a fraction
             return new Fraction(num.intValue(), 1);
         case '/' :
-            // found '/', continue parsing denominator
             break;
         default :
-            // invalid '/'
-            // set index back to initial, error index should be the last
-            // character examined.
-            pos.setIndex(initialIndex);
             pos.setErrorIndex(startIndex);
             return null;
         }
-
-        // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
-
-        // parse denominator
         Number den = getDenominatorFormat().parse(source, pos);
         if (den == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
-            pos.setIndex(initialIndex);
+            pos.setErrorIndex(startIndex);
             return null;
         }
-        
-            // minus signs must be leading, invalid
-
         int w = whole.intValue();
         int n = num.intValue();
         int d = den.intValue();
         return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
     }
