diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/3ab334c8-455d-4cb2-a9fe-8005a3a7a6b8_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a4b14d1e-b84f-4092-a630-1423c89b3829_fixed.java
index de32c39..171a8e9 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/3ab334c8-455d-4cb2-a9fe-8005a3a7a6b8_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a4b14d1e-b84f-4092-a630-1423c89b3829_fixed.java
@@ -1,101 +1,98 @@
   private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                       WhitespaceOption option) {
-
     if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
         token == JsDocToken.EOF) {
       return new ExtractionInfo("", token);
     }
-
     stream.update();
     int startLineno = stream.getLineno();
     int startCharno = stream.getCharno() + 1;
-
-    // Read the content from the first line.
     String line = stream.getRemainingJSDocLine();
     if (option != WhitespaceOption.PRESERVE) {
       line = line.trim();
     }
-
     StringBuilder builder = new StringBuilder();
     builder.append(line);
-
     state = State.SEARCHING_ANNOTATION;
     token = next();
-
     boolean ignoreStar = false;
-
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
-
-    do {
+// buggy code
+//     do {
+//       switch (token) {
+//         case STAR:
+//           if (ignoreStar) {
+//           } else {
+//             if (builder.length() > 0) {
+//               builder.append(' ');
+//             }
+//             builder.append('*');
+//           }
+//           token = next();
+//           continue;
+//         case EOL:
+//           if (option != WhitespaceOption.SINGLE_LINE) {
+//             builder.append("\n");
+//           }
+//           ignoreStar = true;
+//           token = next();
+//           continue;
+//         default:
+//           ignoreStar = false;
+//           state = State.SEARCHING_ANNOTATION;
+//           if (token == JsDocToken.EOC ||
+//               token == JsDocToken.EOF ||
+//               (token == JsDocToken.ANNOTATION &&
+//                option != WhitespaceOption.PRESERVE)) {
+//             String multilineText = builder.toString();
+//             if (option != WhitespaceOption.PRESERVE) {
+//               multilineText = multilineText.trim();
+//             }
+//             int endLineno = stream.getLineno();
+//             int endCharno = stream.getCharno();
+//             if (multilineText.length() > 0) {
+//               jsdocBuilder.markText(multilineText, startLineno, startCharno,
+//                   endLineno, endCharno);
+//             }
+//             return new ExtractionInfo(multilineText, token);
+//           }
+//           if (builder.length() > 0) {
+//             builder.append(' ');
+//           }
+   while (token != JsDocToken.EOC &&
+           token != JsDocToken.EOF) {
       switch (token) {
         case STAR:
           if (ignoreStar) {
-            // Mark the position after the star as the new start of the line.
           } else {
-            // The star is part of the comment.
             if (builder.length() > 0) {
               builder.append(' ');
             }
-
             builder.append('*');
           }
-
           token = next();
           continue;
-
         case EOL:
           if (option != WhitespaceOption.SINGLE_LINE) {
             builder.append("\n");
           }
-
           ignoreStar = true;
           token = next();
           continue;
-
         default:
           ignoreStar = false;
           state = State.SEARCHING_ANNOTATION;
-
-              // All tokens must be separated by a space.
-
           if (token == JsDocToken.EOC ||
               token == JsDocToken.EOF ||
-              // When we're capturing a license block, annotations
-              // in the block are ok.
               (token == JsDocToken.ANNOTATION &&
                option != WhitespaceOption.PRESERVE)) {
             String multilineText = builder.toString();
-
-            if (option != WhitespaceOption.PRESERVE) {
-              multilineText = multilineText.trim();
-            }
-
-            int endLineno = stream.getLineno();
-            int endCharno = stream.getCharno();
-
-            if (multilineText.length() > 0) {
-              jsdocBuilder.markText(multilineText, startLineno, startCharno,
-                  endLineno, endCharno);
-            }
-
-            return new ExtractionInfo(multilineText, token);
-          }
-
-          if (builder.length() > 0) {
-            builder.append(' ');
-          }
-          builder.append(toString(token));
-
+            if (option != WhitespaceOption.PRESERVE)          builder.append(toString(token));
           line = stream.getRemainingJSDocLine();
-
           if (option != WhitespaceOption.PRESERVE) {
             line = trimEnd(line);
           }
-
           builder.append(line);
           token = next();
       }
     } while (true);
   }
