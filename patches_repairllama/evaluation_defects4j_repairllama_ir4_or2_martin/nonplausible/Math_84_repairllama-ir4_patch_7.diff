diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/8c1ea9d2-cc1d-441a-adb3-6dfbef768fee_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/cfeef3f0-7c2f-467f-a271-f90a40a3239f_fixed.java
index 50cbfb2..5b60ff4 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/8c1ea9d2-cc1d-441a-adb3-6dfbef768fee_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/cfeef3f0-7c2f-467f-a271-f90a40a3239f_fixed.java
@@ -1,39 +1,38 @@
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
-
-        while (true) {
-
+// buggy code
+//         while (true) {
+//             incrementIterationsCounter();
+//             final RealPointValuePair[] original = simplex;
+//             final RealPointValuePair best = original[0];
+//             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
+//             if (comparator.compare(reflected, best) < 0) {
+//                 final RealPointValuePair[] reflectedSimplex = simplex;
+//                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
+//                 if (comparator.compare(reflected, expanded) <= 0) {
+//                     simplex = reflectedSimplex;
+//                 }
+//                 return;
+//             }
+//             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
+//             if (comparator.compare(contracted, best) < 0) {
+//                 return;
+//             }
        incrementIterationsCounter();
-
-            // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
-
-            // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
-
-                // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
                 simplex = reflectedSimplex;
             }
-
             return;
-
         }
-
-            // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
+            simplex = original;
             return;
         }
-
-        }
-
     }
