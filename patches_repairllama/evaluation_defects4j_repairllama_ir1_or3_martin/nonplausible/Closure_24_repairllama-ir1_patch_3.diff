diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b9823a5c-5263-4f01-914d-7c56ab04e06a_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/25b591e2-cc60-4a82-9a55-d4fb5676b493_fixed.java
index 602226b..849429f 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/b9823a5c-5263-4f01-914d-7c56ab04e06a_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/25b591e2-cc60-4a82-9a55-d4fb5676b493_fixed.java
@@ -1,26 +1,19 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
-        int type = n.getType();
         Node parent = n.getParent();
         if (parent.isVar()) {
           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
           String name = n.getString();
           Var aliasVar = scope.getVar(name);
           aliases.put(name, aliasVar);
-
           String qualifiedName =
               aliasVar.getInitialValue().getQualifiedName();
           transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
         } else {
-          // TODO(robbyw): Support using locals for private variables.
           report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
         }
         }
       }
     }
