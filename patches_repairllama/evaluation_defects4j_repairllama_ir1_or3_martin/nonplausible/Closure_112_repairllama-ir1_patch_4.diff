diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/3d9c763a-f549-4ab0-8575-6f7ffb02b0e6_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/3ec07453-0cc0-4cc1-9a91-ccc74eb311a4_fixed.java
index 618a37c..fcc5575 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/3d9c763a-f549-4ab0-8575-6f7ffb02b0e6_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/3ec07453-0cc0-4cc1-9a91-ccc74eb311a4_fixed.java
@@ -1,28 +1,19 @@
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
-    if (keys.isEmpty()) {
+    if (keys.isEmpty() || n.getChildCount() == 0) {
       return false;
     }
-
-    // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
-
-
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
-
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
-
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
-
     return replacer.madeChanges;
   }
