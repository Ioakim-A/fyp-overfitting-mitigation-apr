diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/754de588-5977-40af-9bcc-51a797cd0fb0_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/36dc21ff-6acc-4620-ac45-d8733c6b2e6b_fixed.java
index a0eee42..d18470a 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/754de588-5977-40af-9bcc-51a797cd0fb0_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/36dc21ff-6acc-4620-ac45-d8733c6b2e6b_fixed.java
@@ -1,25 +1,7 @@
     private void getNumUseInUseCfgNode(final Node cfgNode) {
-
       numUsesWithinCfgNode = 0;
-      AbstractCfgNodeTraversalCallback gatherCb =
-          new AbstractCfgNodeTraversalCallback() {
-
+      NodeTraversal.traverse(compiler, cfgNode, new AbstractCfgNodeTraversalCallback() {
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
           if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
-              numUsesWithinCfgNode++;
-          }
-        }
-
-      };
-
-      NodeTraversal.traverse(compiler, cfgNode, gatherCb);
                  }
