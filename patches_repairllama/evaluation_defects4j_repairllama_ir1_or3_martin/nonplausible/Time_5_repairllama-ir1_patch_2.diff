diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/7fd7e956-1416-4763-97f2-1de07177d709_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/efd95f5c-51a9-466e-aa38-9f078671f7c4_fixed.java
index c50b3cc..e3b4f2c 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/7fd7e956-1416-4763-97f2-1de07177d709_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/efd95f5c-51a9-466e-aa38-9f078671f7c4_fixed.java
@@ -1,23 +1,20 @@
     public Period normalizedStandard(PeriodType type) {
         type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+        long millis = getMillis();  
+        millis += ((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND);
+        millis += ((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE);
+        millis += ((long) getHours())        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
         int years = getYears();
         int months = getMonths();
         if (years != 0 || months != 0) {
             years = FieldUtils.safeAdd(years, months / 12);
             months = months % 12;
             if (years != 0) {
                 result = result.withYears(years);
             }
             if (months != 0) {
                 result = result.withMonths(months);
             }
         }
         return result;
     }
