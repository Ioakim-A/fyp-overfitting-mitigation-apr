diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a3fef31f-3017-4e73-8ae2-3bade4839b17_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/74eb4bb3-8c8d-442b-a48a-2c19a9bcb10c_fixed.java
index 25c13b3..e441722 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/a3fef31f-3017-4e73-8ae2-3bade4839b17_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/74eb4bb3-8c8d-442b-a48a-2c19a9bcb10c_fixed.java
@@ -1,15 +1,108 @@
     /**
      * Access the initial domain value, based on <code>p</code>, used to
      * bracket a CDF root.  This method is used by
      * {@link #inverseCumulativeProbability(double)} to find critical values.
      * 
      * @param p the desired probability for the critical value
      * @return initial domain value
      */
     protected double getInitialDomain(double p) {
-        double ret;
-        double d = getDenominatorDegreesOfFreedom();
-            // use mean
-            ret = d / (d - 2.0);
+        return 0.0;
+    }
+
+    /**
+     * Access the final domain value, based on <code>p</code>, used to
+     * bracket a CDF root.  This method is used by
+     * {@link #inverseCumulativeProbability(double)} to find critical values.
+     * 
+     * @param p the desired probability for the critical value
+     * @return final domain value
+     */
+    protected double getFinalDomain(double p) {
+        return Double.POSITIVE_INFINITY;
+    }
+
+    /**
+     * Access the initial domain value, based on <code>p</code>, used to
+     * bracket a CDF root.  This method is used by
+     * {@link #inverseCumulativeProbability(double)} to find critical values.
+     * 
+     * @param p the desired probability for the critical value
+     * @return initial domain value
+     */
+    protected double getInitialDomain(double p) {
+        return 0.0;
+    }
+
+    /**
+     * Access the final domain value, based on <code>p</code>, used to
+     * bracket a CDF root.  This method is used by
+     * {@link #inverseCumulativeProbability(double)} to find critical values.
+     * 
+     * @param p the desired probability for the critical value
+     * @return final domain value
+     */
+    protected double getFinalDomain(double p) {
+        return Double.POSITIVE_INFINITY;
+    }
+
+    /**
+     * Access the initial domain value, based on <code>p</code>, used to
+     * bracket a CDF root.  This method is used by
+     * {@link #inverseCumulativeProbability(double)} to find critical values.
+     * 
+     * @param p the desired probability for the critical value
+     * @return initial domain value
+     */
+    protected double getInitialDomain(double p) {
+        return 0.0;
+    }
+
+    /**
+     * Access the final domain value, based on <code>p</code>, used to
+     * bracket a CDF root.  This method is used by
+     * {@link #inverseCumulativeProbability(double)} to find critical values.
+     * 
+     * @param p the desired probability for the critical value
+     * @return final domain value
+     */
+    protected double getFinalDomain(double p) {
+        return Double.POSITIVE_INFINITY;
+    }
+
+    /**
+     * Access the initial domain value, based on <code>p</code>, used to
+     * bracket a CDF root.  This method is used by
+     * {@link #inverseCumulativeProbability(double)} to find critical values.
+     * 
+     * @param p the desired probability for the critical value
+     * @return initial domain value
+     */
+    protected double getInitialDomain(double p) {
+        return 0.0;
+    }
+
+    /**
+     * Access the final domain value, based on <code>p</code>, used to
+     * bracket a CDF root.  This method is used by
+     * {@link #inverseCumulativeProbability(double)} to find critical values.
+     * 
+     * @param p the desired probability for the critical value
+     * @return final domain value
+     */
+    protected double getFinalDomain(double p) {
+        return Double.POSITIVE_INFINITY;
+    }
+
+    /**
+     * Access the initial domain value, based on <code>p</code>, used to
+     * bracket a CDF root.  This method is used by
+     * {@link #inverseCumulativeProbability(double)} to find critical values.
+     * 
+     * @param p the desired probability for the critical value
+     * @return initial domain value
+     */
+    protected double getInitialDomain(double p) {
+        return 0.0;
         return ret;
     }
