diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/060ebab5-c150-4e68-9bea-ac2ed1040896_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f53226d4-69f1-4bc8-b8c2-48c4328b762e_fixed.java
index 8b0cd97..3f09539 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/060ebab5-c150-4e68-9bea-ac2ed1040896_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/f53226d4-69f1-4bc8-b8c2-48c4328b762e_fixed.java
@@ -1,30 +1,57 @@
      /**
      * {@inheritDoc}
      * <p><strong>Note: </strong>This implementation rescales the 
      * <code>expected</code> array if necessary to ensure that the sum of the
      * expected and observed counts are equal.</p>
      * 
      * @param observed array of observed frequency counts
      * @param expected array of expected frequency counts
      * @return chi-square test statistic
      * @throws IllegalArgumentException if preconditions are not met
      * or length is less than 2
      */
     public double chiSquare(double[] expected, long[] observed)
         throws IllegalArgumentException {
         if ((expected.length < 2) || (expected.length != observed.length)) {
             throw new IllegalArgumentException(
                     "observed, expected array lengths incorrect");
         }
         if (!isPositive(expected) || !isNonNegative(observed)) {
             throw new IllegalArgumentException(
                 "observed counts must be non-negative and expected counts must be postive");
         }
-        double sumSq = 0.0d;
-        double dev = 0.0d;
+        double sumSq = 0.0;
         for (int i = 0; i < observed.length; i++) {
-                dev = ((double) observed[i] - expected[i]);
-                sumSq += dev * dev / expected[i];
+            sumSq += Math.pow(observed[i] - expected[i], 2) / expected[i];
+        }
+        return sumSq;
+    }
+
+    /**
+     * {@inheritDoc}
+     * <p><strong>Note: </strong>This implementation rescales the 
+     * <code>expected</code> array if necessary to ensure that the sum of the
+     * expected and observed counts are equal.</p>
+     * 
+     * @param observed array of observed frequency counts
+     * @param expected array of expected frequency counts
+     * @return chi-square test statistic
+     * @throws IllegalArgumentException if preconditions are not met
+     * or length is less than 2
+     */
+    public double chiSquare(long[] observed, double[] expected)
+        throws IllegalArgumentException {
+        if ((expected.length < 2) || (expected.length != observed.length)) {
+            throw new IllegalArgumentException(
+                    "observed, expected array lengths incorrect");
+        }
+        if (!isNonNegative(observed) || !isPositive(expected)) {
+            throw new IllegalArgumentException(
+                "observed counts must be non-negative and expected counts must be postive");
+        }
+        double sumSq = 0.0;
+        for (int i = 0; i < observed.length; i++) {
+            sumSq += Math.pow(observed[i] - expected[i], 2) / expected[i];
         }
         return sumSq;
     }
