diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/84818ba6-5b18-45ab-b292-11dfb265d3e5_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/8ac3cd26-3a0c-43ee-8c43-db99b51f7e84_fixed.java
index 3127f85..a9f1b77 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/84818ba6-5b18-45ab-b292-11dfb265d3e5_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/8ac3cd26-3a0c-43ee-8c43-db99b51f7e84_fixed.java
@@ -1,24 +1,16 @@
     /**
      * For this distribution, {@code X}, this method returns {@code P(X < x)}.
      * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
      * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
      *
      * @param x Value at which the CDF is evaluated.
      * @return CDF evaluated at {@code x}.
      * @throws MathException if the algorithm fails to converge
      */
     public double cumulativeProbability(double x) throws MathException {
         final double dev = x - mean;
-        try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
-        } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
-            } else {
-                throw ex;
-            }
+        if (Math.abs(dev) > 40 * stdDev) {
+            return dev < 0 ? 0.0 : 1.0;
         }
+        return 0.5 * (1.0 + SpecialFunctions.erf(dev / (stdDev * Math.sqrt(2.0))));
     }
