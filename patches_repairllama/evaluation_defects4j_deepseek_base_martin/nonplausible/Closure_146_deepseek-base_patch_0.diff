diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/795f0115-6f0e-4c98-8e65-ba27a0b234b6_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c8b28306-aa14-4d44-93ed-524efcfb1f47_fixed.java
index 210695a..fcf2958 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/795f0115-6f0e-4c98-8e65-ba27a0b234b6_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/c8b28306-aa14-4d44-93ed-524efcfb1f47_fixed.java
@@ -1,32 +1,59 @@
   /**
    * Computes the subset of {@code this} and {@code that} types if inequality
    * is observed. If a value {@code v1} of type {@code number} is not equal to a
    * value {@code v2} of type {@code (undefined,number)}, we can infer that the
    * type of {@code v1} is {@code number} and the type of {@code v2} is
    * {@code number} as well.
    *
    * @return a pair containing the restricted type of {@code this} as the first
    *         component and the restricted type of {@code that} as the second
    *         element. The returned pair is never {@code null} even though its
    *         components may be {@code null}
    */
   public TypePair getTypesUnderInequality(JSType that) {
     // unions types
     if (that instanceof UnionType) {
       TypePair p = that.getTypesUnderInequality(this);
       return new TypePair(p.typeB, p.typeA);
     }
-
     // other types
     switch (this.testForEquality(that)) {
       case TRUE:
-        return new TypePair(null, null);
-
+        return new TypePair(this, this);
       case FALSE:
       case UNKNOWN:
         return new TypePair(this, that);
     }
+    // switch case is exhaustive
+    throw new IllegalStateException();
+  }
 
+  /**
+   * Computes the subset of {@code this} and {@code that} types if equality is
+   * observed. If a value {@code v1} of type {@code number} is equal to a value
+   * {@code v2} of type {@code (undefined,number)}, we can infer that the type of
+   * {@code v1} is {@code number} and the type of {@code v2} is {@code number} as
+   * well.
+   *
+   * @return a pair containing the restricted type of {@code this} as the first
+   *         component and the restricted type of {@code that} as the second
+   *         element. The returned pair is never {@code null} even though its
+   *         components may be {@code null}
+   */
+  public TypePair getTypesUnderEquality(JSType that) {
+    // unions types
+    if (that instanceof UnionType) {
+      TypePair p = that.getTypesUnderEquality(this);
+      return new TypePair(p.typeB, p.typeA);
+    }
+    // other types
+    switch (this.testForEquality(that)) {
+      case TRUE:
+        return new TypePair(this, this);
+      case FALSE:
+      case UNKNOWN:
+        return new TypePair(this, that);
+    }
     // switch case is exhaustive
     throw new IllegalStateException();
   }
