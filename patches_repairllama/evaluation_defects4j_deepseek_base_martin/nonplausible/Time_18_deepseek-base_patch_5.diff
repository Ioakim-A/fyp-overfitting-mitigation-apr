diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1ca3286e-addf-48ad-ad3f-ad69d4ad79c3_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d87352e1-f6d4-4eab-a4ea-c7d9f3504c6d_fixed.java
index be2af16..b0aec50 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1ca3286e-addf-48ad-ad3f-ad69d4ad79c3_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/d87352e1-f6d4-4eab-a4ea-c7d9f3504c6d_fixed.java
@@ -1,29 +1,33 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
-
         // Assume date is Gregorian.
         long instant;
+        try {
             instant = iGregorianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        }
+        catch (IllegalArgumentException ex) {
+            throw new IllegalArgumentException("Specified date does not exist");
+        }
         if (instant < iCutoverMillis) {
             // Maybe it's Julian.
             instant = iJulianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
             if (instant >= iCutoverMillis) {
                 // Okay, it's in the illegal cutover gap.
                 throw new IllegalArgumentException("Specified date does not exist");
             }
         }
         return instant;
     }
