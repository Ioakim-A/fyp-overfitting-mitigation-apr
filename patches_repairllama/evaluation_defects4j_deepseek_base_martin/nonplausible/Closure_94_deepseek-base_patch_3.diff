diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/07433ca1-0551-4d15-b1ca-fc3c4caf359e_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/22107769-af0d-4980-b1b1-555da2323620_fixed.java
index 66e3d01..b677c3c 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/07433ca1-0551-4d15-b1ca-fc3c4caf359e_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/22107769-af0d-4980-b1b1-555da2323620_fixed.java
@@ -1,34 +1,33 @@
   /**
    * Determines whether the given value may be assigned to a define.
    *
    * @param val The value being assigned.
    * @param defines The list of names of existing defines.
    */
   static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
       case Token.STRING:
       case Token.NUMBER:
       case Token.TRUE:
       case Token.FALSE:
         return true;
-
       // Binary operators are only valid if both children are valid.
-      case Token.BITAND:
-      case Token.BITNOT:
-      case Token.BITOR:
-      case Token.BITXOR:
-
-      // Uniary operators are valid if the child is valid.
+      case Token.PLUS:
+      case Token.MINUS:
+      case Token.MUL:
+      case Token.DIV:
+      case Token.MOD:
+        return isValidDefineValue(val.getFirstChild(), defines)
+            && isValidDefineValue(val.getLastChild(), defines);
+      // Unary operators are only valid if the child is valid.
       case Token.NOT:
-      case Token.NEG:
         return isValidDefineValue(val.getFirstChild(), defines);
-
       // Names are valid if and only if they are defines themselves.
       case Token.NAME:
       case Token.GETPROP:
         if (val.isQualifiedName()) {
           return defines.contains(val.getQualifiedName());
         }
     }
     return false;
   }
