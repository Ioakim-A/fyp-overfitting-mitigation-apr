diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/96e1fbbf-0801-46ae-b1a0-fbb585e67bfa_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9ecd6bbd-f051-40f5-adf0-f9a03fc9925c_fixed.java
index b5d94e0..c71eb3d 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/96e1fbbf-0801-46ae-b1a0-fbb585e67bfa_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/9ecd6bbd-f051-40f5-adf0-f9a03fc9925c_fixed.java
@@ -1,26 +1,22 @@
   private void traverse(Node node) {
     // The goal here is to avoid retraversing
     // the entire AST to catch newly created opportunities.
     // So we track whether a "unit of code" has changed,
     // and revisit immediately.
     if (!shouldVisit(node)) {
       return;
     }
-
     int visits = 0;
     do {
       Node c = node.getFirstChild();
       while(c != null) {
-        traverse(c);
-        Node next = c.getNext();
+        visit(c);
+        Node next = c.getNextSibling();
         c = next;
       }
-
       visit(node);
       visits++;
-
       Preconditions.checkState(visits < 10000, "too many interations");
     } while (shouldRetraverse(node));
-
     exitNode(node);
   }
