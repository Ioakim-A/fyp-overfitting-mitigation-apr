diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/912e11ee-793c-429d-88fe-5daebd14cd3e_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/ff8fef51-2751-4a63-9af6-6d54820407b0_fixed.java
index 602226b..32d25ad 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/912e11ee-793c-429d-88fe-5daebd14cd3e_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/ff8fef51-2751-4a63-9af6-6d54820407b0_fixed.java
@@ -1,26 +1,11 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
-        if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
-          String name = n.getString();
-          Var aliasVar = scope.getVar(name);
-          aliases.put(name, aliasVar);
-
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
-          transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
-        } else {
-          // TODO(robbyw): Support using locals for private variables.
-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
-        }
+        if (type == Node.VAR && parent != null && parent.getType() == Node.ALIAS) {
+          aliases.add(n);
         }
       }
     }
