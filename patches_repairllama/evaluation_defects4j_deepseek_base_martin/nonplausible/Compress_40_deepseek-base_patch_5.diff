diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e174cf10-ff81-4da1-b6df-fc6d39fc9b81_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1f2fe9f0-e4d2-4c40-9f27-932e1d08455d_fixed.java
index 7116384..021c9f2 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/e174cf10-ff81-4da1-b6df-fc6d39fc9b81_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/1f2fe9f0-e4d2-4c40-9f27-932e1d08455d_fixed.java
@@ -1,39 +1,20 @@
     /**
      * Returns at most 63 bits read from the underlying stream.
      *
      * @param count the number of bits to read, must be a positive
      * number not bigger than 63.
      * @return the bits concatenated as a long using the stream's byte order.
      *         -1 if the end of the underlying stream has been reached before reading
      *         the requested number of bits
      * @throws IOException on error
      */
     public long readBits(final int count) throws IOException {
         if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
             throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
         }
-        while (bitsCachedSize < count) {
-            final long nextByte = in.read();
-            if (nextByte < 0) {
-                return nextByte;
+        long bitsOut = 0;
+        for (int i = 0; i < count; i++) {
+            bitsOut |= readBit() << i;
         }
-            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsCached |= (nextByte << bitsCachedSize);
-            } else {
-                bitsCached <<= 8;
-                bitsCached |= nextByte;
-            }
-            bitsCachedSize += 8;
-        }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
-        
-        final long bitsOut;
-            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsOut = (bitsCached & MASKS[count]);
-                bitsCached >>>= count;
-            } else {
-                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
-            }
-            bitsCachedSize -= count;
         return bitsOut;
     }
