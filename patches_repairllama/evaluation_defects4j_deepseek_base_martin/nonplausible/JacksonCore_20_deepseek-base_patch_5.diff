diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/54fe56ac-dfd0-403d-a610-33c128c166c7_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/211808c0-1a73-4c2e-a39b-60c1668f3ea8_fixed.java
index a6f008f..d5d24cc 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/54fe56ac-dfd0-403d-a610-33c128c166c7_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/211808c0-1a73-4c2e-a39b-60c1668f3ea8_fixed.java
@@ -1,11 +1,186 @@
     /**
      * Method that can be called on backends that support passing opaque datatypes of
      * non-JSON formats
      *
      * @since 2.8
      */
     public void writeEmbeddedObject(Object object) throws IOException {
         // 01-Sep-2016, tatu: As per [core#318], handle small number of cases
-        throw new JsonGenerationException("No native support for writing embedded objects",
+        if (object == null) {
+            this.writeNull();
+            return;
+        }
+        if (object instanceof String) {
+            this.writeString((String) object);
+            return;
+        }
+        if (object instanceof Number) {
+            this.writeNumber((Number) object);
+            return;
+        }
+        if (object instanceof Boolean) {
+            this.writeBoolean((Boolean) object);
+            return;
+        }
+        if (object instanceof Character) {
+            this.writeCharacter((Character) object);
+            return;
+        }
+        if (object instanceof Byte) {
+            this.writeByte((Byte) object);
+            return;
+        }
+        if (object instanceof Short) {
+            this.writeShort((Short) object);
+            return;
+        }
+        if (object instanceof Integer) {
+            this.writeInt((Integer) object);
+            return;
+        }
+        if (object instanceof Long) {
+            this.writeLong((Long) object);
+            return;
+        }
+        if (object instanceof Float) {
+            this.writeFloat((Float) object);
+            return;
+        }
+        if (object instanceof Double) {
+            this.writeDouble((Double) object);
+            return;
+        }
+        if (object instanceof BigInteger) {
+            this.writeBigInteger((BigInteger) object);
+            return;
+        }
+        if (object instanceof BigDecimal) {
+            this.writeBigDecimal((BigDecimal) object);
+            return;
+        }
+        if (object instanceof Instant) {
+            this.writeInstant((Instant) object);
+            return;
+        }
+        if (object instanceof LocalDate) {
+            this.writeLocalDate((LocalDate) object);
+            return;
+        }
+        if (object instanceof LocalTime) {
+            this.writeLocalTime((LocalTime) object);
+            return;
+        }
+        if (object instanceof LocalDateTime) {
+            this.writeLocalDateTime((LocalDateTime) object);
+            return;
+        }
+        if (object instanceof OffsetTime) {
+            this.writeOffsetTime((OffsetTime) object);
+            return;
+        }
+        if (object instanceof OffsetDateTime) {
+            this.writeOffsetDateTime((OffsetDateTime) object);
+            return;
+        }
+        if (object instanceof ZonedDateTime) {
+            this.writeZonedDateTime((ZonedDateTime) object);
+            return;
+        }
+        if (object instanceof Year) {
+            this.writeYear((Year) object);
+            return;
+        }
+        if (object instanceof YearMonth) {
+            this.writeYearMonth((YearMonth) object);
+            return;
+        }
+        if (object instanceof MonthDay) {
+            this.writeMonthDay((MonthDay) object);
+            return;
+        }
+        if (object instanceof Duration) {
+            this.writeDuration((Duration) object);
+            return;
+        }
+        if (object instanceof Period) {
+            this.writePeriod((Period) object);
+            return;
+        }
+        if (object instanceof OffsetDateTime) {
+            this.writeOffsetDateTime((OffsetDateTime) object);
+            return;
+        }
+        if (object instanceof OffsetTime) {
+            this.writeOffsetTime((OffsetTime) object);
+            return;
+        }
+        if (object instanceof ZonedDateTime) {
+            this.writeZonedDateTime((ZonedDateTime) object);
+            return;
+        }
+        if (object instanceof Year) {
+            this.writeYear((Year) object);
+            return;
+        }
+        if (object instanceof YearMonth) {
+            this.writeYearMonth((YearMonth) object);
+            return;
+        }
+        if (object instanceof MonthDay) {
+            this.writeMonthDay((MonthDay) object);
+            return;
+        }
+        if (object instanceof Duration) {
+            this.writeDuration((Duration) object);
+            return;
+        }
+        if (object instanceof Period) {
+            this.writePeriod((Period) object);
+            return;
+        }
+        if (object instanceof OffsetDateTime) {
+            this.writeOffsetDateTime((OffsetDateTime) object);
+            return;
+        }
+        if (object instanceof OffsetTime) {
+            this.writeOffsetTime((OffsetTime) object);
+            return;
+        }
+        if (object instanceof ZonedDateTime) {
+            this.writeZonedDateTime((ZonedDateTime) object);
+            return;
+        }
+        if (object instanceof Year) {
+            this.writeYear((Year) object);
+            return;
+        }
+        if (object instanceof YearMonth) {
+            this.writeYearMonth((YearMonth) object);
+            return;
+        }
+        if (object instanceof MonthDay) {
+            this.writeMonthDay((MonthDay) object);
+            return;
+        }
+        if (object instanceof Duration) {
+            this.writeDuration((Duration) object);
+            return;
+        }
+        if (object instanceof Period) {
+            this.writePeriod((Period) object);
+            return;
+        }
+        if (object instanceof OffsetDateTime) {
+            this.writeOffsetDateTime((OffsetDateTime) object);
+            return;
+        }
+        if (object instanceof OffsetTime) {
+            this.writeOffsetTime((OffsetTime) object);
+            return;
+        }
+        if (object instanceof ZonedDateTime) {
+            this.writeZonedDateTime((ZonedDateTime) object);
+            return;
+        }
                 this);
     }
