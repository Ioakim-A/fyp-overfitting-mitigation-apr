diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0a6187cc-ff91-426b-a508-43bad918e9cf_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2e609d35-2b54-4b49-94c8-b8a30c81b331_fixed.java
index 170b3a0..1ca48b6 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/0a6187cc-ff91-426b-a508-43bad918e9cf_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/2e609d35-2b54-4b49-94c8-b8a30c81b331_fixed.java
@@ -1,32 +1,65 @@
     /**
      * Returns the <a href="http://www.xycoon.com/SumOfSquares.htm">
      * sum of squared errors</a> (SSE) associated with the regression 
      * model.
      * <p>
      * The sum is computed using the computational formula
      * <p>
      * <code>SSE = SYY - (SXY * SXY / SXX)</code>
      * <p>
      * where <code>SYY</code> is the sum of the squared deviations of the y
      * values about their mean, <code>SXX</code> is similarly defined and
      * <code>SXY</code> is the sum of the products of x and y mean deviations.
      * <p>
      * The sums are accumulated using the updating algorithm referenced in 
      * {@link #addData}.  
      * <p>
      * The return value is constrained to be non-negative - i.e., if due to 
      * rounding errors the computational formula returns a negative result, 
      * 0 is returned.
      * <p>
      * <strong>Preconditions</strong>: <ul>
      * <li>At least two observations (with at least two different x values)
      * must have been added before invoking this method. If this method is 
      * invoked before a model can be estimated, <code>Double,NaN</code> is
      * returned.
      * </li></ul>
      *
      * @return sum of squared errors associated with the regression model
      */
     public double getSumSquaredErrors() {
-        return sumYY - sumXY * sumXY / sumXX;
+        return sse;
+    }
+
+    /**
+     * Returns the <a href="http://www.xycoon.com/SumOfSquares.htm">
+     * sum of squared errors</a> (SSE) associated with the regression 
+     * model.
+     * <p>
+     * The sum is computed using the computational formula
+     * <p>
+     * <code>SSE = SYY - (SXY * SXY / SXX)</code>
+     * <p>
+     * where <code>SYY</code> is the sum of the squared deviations of the y
+     * values about their mean, <code>SXX</code> is similarly defined and
+     * <code>SXY</code> is the sum of the products of x and y mean deviations.
+     * <p>
+     * The sums are accumulated using the updating algorithm referenced in 
+     * {@link #addData}.  
+     * <p>
+     * The return value is constrained to be non-negative - i.e., if due to 
+     * rounding errors the computational formula returns a negative result, 
+     * 0 is returned.
+     * <p>
+     * <strong>Preconditions</strong>: <ul>
+     * <li>At least two observations (with at least two different x values)
+     * must have been added before invoking this method. If this method is 
+     * invoked before a model can be estimated, <code>Double,NaN</code> is
+     * returned.
+     * </li></ul>
+     *
+     * @return sum of squared errors associated with the regression model
+     */
+    public double getSumOfSquaredErrors() {
+        return getSumSquaredErrors();
     }
