diff --git a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/cbfb8e21-cdcc-4880-bb65-97c69922368e_buggy.java b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/ca439b3a-1316-41eb-ba7e-afb48bcd9efd_fixed.java
index 6e05e4b..3fcc12f 100644
--- a/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/cbfb8e21-cdcc-4880-bb65-97c69922368e_buggy.java
+++ b/var/folders/0t/lbz9bxg17r10xznln_x5mpj00000gn/T/ca439b3a-1316-41eb-ba7e-afb48bcd9efd_fixed.java
@@ -1,51 +1,51 @@
     @Override
     Node processFunctionNode(FunctionNode functionNode) {
       Name name = functionNode.getFunctionName();
       Boolean isUnnamedFunction = false;
       if (name == null) {
+        functionNode.setFunctionName(name = new Name());
+      }
+      if (name.getIdentifier() == null) {
         name = new Name();
         name.setIdentifier("");
         isUnnamedFunction = true;
       }
       Node node = newNode(Token.FUNCTION);
       Node newName = transform(name);
       if (isUnnamedFunction) {
         // Old Rhino tagged the empty name node with the line number of the
         // declaration.
         newName.setLineno(functionNode.getLineno());
         // TODO(bowdidge) Mark line number of paren correctly.
         // Same problem as below - the left paren might not be on the
         // same line as the function keyword.
         int lpColumn = functionNode.getAbsolutePosition() +
             functionNode.getLp();
         newName.setCharno(position2charno(lpColumn));
       }
-
       node.addChildToBack(newName);
       Node lp = newNode(Token.LP);
       // The left paren's complicated because it's not represented by an
       // AstNode, so there's nothing that has the actual line number that it
       // appeared on.  We know the paren has to appear on the same line as the
       // function name (or else a semicolon will be inserted.)  If there's no
       // function name, assume the paren was on the same line as the function.
       // TODO(bowdidge): Mark line number of paren correctly.
       Name fnName = functionNode.getFunctionName();
       if (fnName != null) {
         lp.setLineno(fnName.getLineno());
       } else {
         lp.setLineno(functionNode.getLineno());
       }
       int lparenCharno = functionNode.getLp() +
           functionNode.getAbsolutePosition();
-
       lp.setCharno(position2charno(lparenCharno));
       for (AstNode param : functionNode.getParams()) {
         lp.addChildToBack(transform(param));
       }
       node.addChildToBack(lp);
-
       Node bodyNode = transform(functionNode.getBody());
       parseDirectives(bodyNode);
       node.addChildToBack(bodyNode);
      return node;
     }
